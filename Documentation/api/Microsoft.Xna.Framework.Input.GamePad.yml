### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Input.GamePad
  commentId: T:Microsoft.Xna.Framework.Input.GamePad
  id: GamePad
  parent: Microsoft.Xna.Framework.Input
  children:
  - Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)
  - Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(System.Int32)
  - Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)
  - Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  - Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32)
  - Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  - Microsoft.Xna.Framework.Input.GamePad.InitDatabase
  - Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount
  - Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)
  - Microsoft.Xna.Framework.Input.GamePad.SetVibration(System.Int32,System.Single,System.Single)
  langs:
  - csharp
  - vb
  name: GamePad
  nameWithType: GamePad
  fullName: Microsoft.Xna.Framework.Input.GamePad
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.SDL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GamePad
    path: ../MonoGame.Framework/Input/GamePad.SDL.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nSupports querying the game controllers and setting the vibration motors.\n"
  example: []
  syntax:
    content: public static class GamePad
    content.vb: Public Module GamePad
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)
  id: GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: GetCapabilities(PlayerIndex)
  nameWithType: GamePad.GetCapabilities(PlayerIndex)
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetCapabilities
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 18
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns the capabilites of the connected controller.\n"
  example: []
  syntax:
    content: public static GamePadCapabilities GetCapabilities(PlayerIndex playerIndex)
    parameters:
    - id: playerIndex
      type: Microsoft.Xna.Framework.PlayerIndex
      description: Player index for the controller you want to query.
    return:
      type: Microsoft.Xna.Framework.Input.GamePadCapabilities
      description: The capabilites of the controller.
    content.vb: Public Shared Function GetCapabilities(playerIndex As PlayerIndex) As GamePadCapabilities
  overload: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(System.Int32)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(System.Int32)
  id: GetCapabilities(System.Int32)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: GetCapabilities(Int32)
  nameWithType: GamePad.GetCapabilities(Int32)
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetCapabilities
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 28
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns the capabilites of the connected controller.\n"
  example: []
  syntax:
    content: public static GamePadCapabilities GetCapabilities(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index for the controller you want to query.
    return:
      type: Microsoft.Xna.Framework.Input.GamePadCapabilities
      description: The capabilites of the controller.
    content.vb: Public Shared Function GetCapabilities(index As Integer) As GamePadCapabilities
  overload: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)
  id: GetState(Microsoft.Xna.Framework.PlayerIndex)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: GetState(PlayerIndex)
  nameWithType: GamePad.GetState(PlayerIndex)
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetState
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 41
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the current state of a game pad controller with an independent axes dead zone.\n"
  example: []
  syntax:
    content: public static GamePadState GetState(PlayerIndex playerIndex)
    parameters:
    - id: playerIndex
      type: Microsoft.Xna.Framework.PlayerIndex
      description: Player index for the controller you want to query.
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The state of the controller.
    content.vb: Public Shared Function GetState(playerIndex As PlayerIndex) As GamePadState
  overload: Microsoft.Xna.Framework.Input.GamePad.GetState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32)
  id: GetState(System.Int32)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: GetState(Int32)
  nameWithType: GamePad.GetState(Int32)
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetState
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 51
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the current state of a game pad controller with an independent axes dead zone.\n"
  example: []
  syntax:
    content: public static GamePadState GetState(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index for the controller you want to query.
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The state of the controller.
    content.vb: Public Shared Function GetState(index As Integer) As GamePadState
  overload: Microsoft.Xna.Framework.Input.GamePad.GetState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  id: GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: GetState(PlayerIndex, GamePadDeadZone)
  nameWithType: GamePad.GetState(PlayerIndex, GamePadDeadZone)
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex, Microsoft.Xna.Framework.Input.GamePadDeadZone)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetState
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 63
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the current state of a game pad controller, using a specified dead zone\non analog stick positions.\n"
  example: []
  syntax:
    content: public static GamePadState GetState(PlayerIndex playerIndex, GamePadDeadZone deadZoneMode)
    parameters:
    - id: playerIndex
      type: Microsoft.Xna.Framework.PlayerIndex
      description: Player index for the controller you want to query.
    - id: deadZoneMode
      type: Microsoft.Xna.Framework.Input.GamePadDeadZone
      description: Enumerated value that specifies what dead zone type to use.
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The state of the controller.
    content.vb: Public Shared Function GetState(playerIndex As PlayerIndex, deadZoneMode As GamePadDeadZone) As GamePadState
  overload: Microsoft.Xna.Framework.Input.GamePad.GetState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  id: GetState(System.Int32,Microsoft.Xna.Framework.Input.GamePadDeadZone)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: GetState(Int32, GamePadDeadZone)
  nameWithType: GamePad.GetState(Int32, GamePadDeadZone)
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32, Microsoft.Xna.Framework.Input.GamePadDeadZone)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetState
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 75
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the current state of a game pad controller, using a specified dead zone\non analog stick positions.\n"
  example: []
  syntax:
    content: public static GamePadState GetState(int index, GamePadDeadZone deadZoneMode)
    parameters:
    - id: index
      type: System.Int32
      description: Index for the controller you want to query.
    - id: deadZoneMode
      type: Microsoft.Xna.Framework.Input.GamePadDeadZone
      description: Enumerated value that specifies what dead zone type to use.
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The state of the controller.
    content.vb: Public Shared Function GetState(index As Integer, deadZoneMode As GamePadDeadZone) As GamePadState
  overload: Microsoft.Xna.Framework.Input.GamePad.GetState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)
  id: SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: SetVibration(PlayerIndex, Single, Single)
  nameWithType: GamePad.SetVibration(PlayerIndex, Single, Single)
  fullName: Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetVibration
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 90
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nSets the vibration motor speeds on the controller device if supported.\n"
  example: []
  syntax:
    content: public static bool SetVibration(PlayerIndex playerIndex, float leftMotor, float rightMotor)
    parameters:
    - id: playerIndex
      type: Microsoft.Xna.Framework.PlayerIndex
      description: Player index that identifies the controller to set.
    - id: leftMotor
      type: System.Single
      description: The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.
    - id: rightMotor
      type: System.Single
      description: The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.
    return:
      type: System.Boolean
      description: Returns true if the vibration motors were set.
    content.vb: Public Shared Function SetVibration(playerIndex As PlayerIndex, leftMotor As Single, rightMotor As Single) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePad.SetVibration*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.SetVibration(System.Int32,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(System.Int32,System.Single,System.Single)
  id: SetVibration(System.Int32,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: SetVibration(Int32, Single, Single)
  nameWithType: GamePad.SetVibration(Int32, Single, Single)
  fullName: Microsoft.Xna.Framework.Input.GamePad.SetVibration(System.Int32, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetVibration
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 102
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nSets the vibration motor speeds on the controller device if supported.\n"
  example: []
  syntax:
    content: public static bool SetVibration(int index, float leftMotor, float rightMotor)
    parameters:
    - id: index
      type: System.Int32
      description: Index for the controller you want to query.
    - id: leftMotor
      type: System.Single
      description: The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.
    - id: rightMotor
      type: System.Single
      description: The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.
    return:
      type: System.Boolean
      description: Returns true if the vibration motors were set.
    content.vb: Public Shared Function SetVibration(index As Integer, leftMotor As Single, rightMotor As Single) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePad.SetVibration*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount
  commentId: P:Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount
  id: MaximumGamePadCount
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: MaximumGamePadCount
  nameWithType: GamePad.MaximumGamePadCount
  fullName: Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: MaximumGamePadCount
    path: ../MonoGame.Framework/Input/GamePad.cs
    startLine: 115
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nThe maximum number of game pads supported on this system.  Attempting to\naccess a gamepad index higher than this number will result in an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>\nbeing thrown by the API.\n"
  example: []
  syntax:
    content: public static int MaximumGamePadCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property MaximumGamePadCount As Integer
  overload: Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePad.InitDatabase
  commentId: M:Microsoft.Xna.Framework.Input.GamePad.InitDatabase
  id: InitDatabase
  parent: Microsoft.Xna.Framework.Input.GamePad
  langs:
  - csharp
  - vb
  name: InitDatabase()
  nameWithType: GamePad.InitDatabase()
  fullName: Microsoft.Xna.Framework.Input.GamePad.InitDatabase()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePad.SDL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: InitDatabase
    path: ../MonoGame.Framework/Input/GamePad.SDL.cs
    startLine: 36
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  syntax:
    content: public static void InitDatabase()
    content.vb: Public Shared Sub InitDatabase
  overload: Microsoft.Xna.Framework.Input.GamePad.InitDatabase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: false
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities
  isExternal: false
  name: GetCapabilities
  nameWithType: GamePad.GetCapabilities
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetCapabilities
- uid: Microsoft.Xna.Framework.PlayerIndex
  commentId: T:Microsoft.Xna.Framework.PlayerIndex
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: PlayerIndex
  nameWithType: PlayerIndex
  fullName: Microsoft.Xna.Framework.PlayerIndex
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities
  commentId: T:Microsoft.Xna.Framework.Input.GamePadCapabilities
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadCapabilities
  nameWithType: GamePadCapabilities
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Input.GamePad.GetState*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePad.GetState
  isExternal: false
  name: GetState
  nameWithType: GamePad.GetState
  fullName: Microsoft.Xna.Framework.Input.GamePad.GetState
- uid: Microsoft.Xna.Framework.Input.GamePadState
  commentId: T:Microsoft.Xna.Framework.Input.GamePadState
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadState
  nameWithType: GamePadState
  fullName: Microsoft.Xna.Framework.Input.GamePadState
- uid: Microsoft.Xna.Framework.Input.GamePadDeadZone
  commentId: T:Microsoft.Xna.Framework.Input.GamePadDeadZone
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadDeadZone
  nameWithType: GamePadDeadZone
  fullName: Microsoft.Xna.Framework.Input.GamePadDeadZone
- uid: Microsoft.Xna.Framework.Input.GamePad.SetVibration*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePad.SetVibration
  isExternal: false
  name: SetVibration
  nameWithType: GamePad.SetVibration
  fullName: Microsoft.Xna.Framework.Input.GamePad.SetVibration
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount
  isExternal: false
  name: MaximumGamePadCount
  nameWithType: GamePad.MaximumGamePadCount
  fullName: Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount
- uid: Microsoft.Xna.Framework.Input.GamePad.InitDatabase*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePad.InitDatabase
  isExternal: false
  name: InitDatabase
  nameWithType: GamePad.InitDatabase
  fullName: Microsoft.Xna.Framework.Input.GamePad.InitDatabase
