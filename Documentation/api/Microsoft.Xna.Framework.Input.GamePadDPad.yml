### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Input.GamePadDPad
  commentId: T:Microsoft.Xna.Framework.Input.GamePadDPad
  id: GamePadDPad
  parent: Microsoft.Xna.Framework.Input
  children:
  - Microsoft.Xna.Framework.Input.GamePadDPad.#ctor(Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)
  - Microsoft.Xna.Framework.Input.GamePadDPad.Down
  - Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)
  - Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode
  - Microsoft.Xna.Framework.Input.GamePadDPad.Left
  - Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  - Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  - Microsoft.Xna.Framework.Input.GamePadDPad.Right
  - Microsoft.Xna.Framework.Input.GamePadDPad.ToString
  - Microsoft.Xna.Framework.Input.GamePadDPad.Up
  langs:
  - csharp
  - vb
  name: GamePadDPad
  nameWithType: GamePadDPad
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GamePadDPad
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 6
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  syntax:
    content: public struct GamePadDPad
    content.vb: Public Structure GamePadDPad
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Down
  commentId: P:Microsoft.Xna.Framework.Input.GamePadDPad.Down
  id: Down
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: Down
  nameWithType: GamePadDPad.Down
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Down
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Down
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 12
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating wethever down is pressed on the directional pad.\n"
  example: []
  syntax:
    content: public ButtonState Down { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the down button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Down As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.Down*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Left
  commentId: P:Microsoft.Xna.Framework.Input.GamePadDPad.Left
  id: Left
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: GamePadDPad.Left
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Left
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Left
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 18
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating wethever left is pressed on the directional pad.\n"
  example: []
  syntax:
    content: public ButtonState Left { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the left button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Left As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.Left*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Right
  commentId: P:Microsoft.Xna.Framework.Input.GamePadDPad.Right
  id: Right
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: GamePadDPad.Right
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Right
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Right
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 24
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating wethever right is pressed on the directional pad.\n"
  example: []
  syntax:
    content: public ButtonState Right { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the right button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Right As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.Right*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Up
  commentId: P:Microsoft.Xna.Framework.Input.GamePadDPad.Up
  id: Up
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: Up
  nameWithType: GamePadDPad.Up
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Up
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Up
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 30
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating wethever up is pressed on the directional pad.\n"
  example: []
  syntax:
    content: public ButtonState Up { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the up button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Up As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.Up*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.#ctor(Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadDPad.#ctor(Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)
  id: '#ctor(Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)'
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: GamePadDPad(ButtonState, ButtonState, ButtonState, ButtonState)
  nameWithType: GamePadDPad.GamePadDPad(ButtonState, ButtonState, ButtonState, ButtonState)
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.GamePadDPad(Microsoft.Xna.Framework.Input.ButtonState, Microsoft.Xna.Framework.Input.ButtonState, Microsoft.Xna.Framework.Input.ButtonState, Microsoft.Xna.Framework.Input.ButtonState)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 39
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Xna.Framework.Input.GamePadDPad\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public GamePadDPad(ButtonState upValue, ButtonState downValue, ButtonState leftValue, ButtonState rightValue)
    parameters:
    - id: upValue
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: Current state of directional pad up.
    - id: downValue
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: Current state of directional pad down.
    - id: leftValue
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: Current state of directional pad left.
    - id: rightValue
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: Current state of directional pad right.
    content.vb: Public Sub New(upValue As ButtonState, downValue As ButtonState, leftValue As ButtonState, rightValue As ButtonState)
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  id: op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: Equality(GamePadDPad, GamePadDPad)
  nameWithType: GamePadDPad.Equality(GamePadDPad, GamePadDPad)
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Equality(Microsoft.Xna.Framework.Input.GamePadDPad, Microsoft.Xna.Framework.Input.GamePadDPad)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 65
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether two specified instances of <xref href=\"Microsoft.Xna.Framework.Input.GamePadDPad\" data-throw-if-not-resolved=\"false\"></xref> are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(GamePadDPad left, GamePadDPad right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadDPad
      description: The first object to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadDPad
      description: The second object to compare.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">left</code> and <code data-dev-comment-type="paramref" class="paramref">right</code> are equal; otherwise, false.
    content.vb: Public Shared Operator =(left As GamePadDPad, right As GamePadDPad) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  id: op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: Inequality(GamePadDPad, GamePadDPad)
  nameWithType: GamePadDPad.Inequality(GamePadDPad, GamePadDPad)
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Inequality(Microsoft.Xna.Framework.Input.GamePadDPad, Microsoft.Xna.Framework.Input.GamePadDPad)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 79
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether two specified instances of <xref href=\"Microsoft.Xna.Framework.Input.GamePadDPad\" data-throw-if-not-resolved=\"false\"></xref> are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(GamePadDPad left, GamePadDPad right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadDPad
      description: The first object to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadDPad
      description: The second object to compare.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">left</code> and <code data-dev-comment-type="paramref" class="paramref">right</code> are not equal; otherwise, false.
    content.vb: Public Shared Operator <>(left As GamePadDPad, right As GamePadDPad) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: GamePadDPad.Equals(Object)
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 89
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns a value indicating whether this instance is equal to a specified object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare to this instance.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">obj</code> is a <xref href="Microsoft.Xna.Framework.Input.GamePadDPad" data-throw-if-not-resolved="false"></xref> and has the same value as this instance; otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GamePadDPad.GetHashCode()
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 99
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nServes as a hash function for a <xref href=\"Microsoft.Xna.Framework.Input.GamePadDPad\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a

        hash table.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.ToString
  commentId: M:Microsoft.Xna.Framework.Input.GamePadDPad.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Input.GamePadDPad
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GamePadDPad.ToString()
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadDPad.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Input/GamePadDPad.cs
    startLine: 113
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"Microsoft.Xna.Framework.Input.GamePadDPad\" data-throw-if-not-resolved=\"false\"></xref>\nin a format of 0000 where each number represents a boolean value of each respecting object property: Left, Up, Right, Down.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="Microsoft.Xna.Framework.Input.GamePadDPad" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Input.GamePadDPad.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: false
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Input.ButtonState.Pressed
  commentId: F:Microsoft.Xna.Framework.Input.ButtonState.Pressed
- uid: Microsoft.Xna.Framework.Input.ButtonState.Released
  commentId: F:Microsoft.Xna.Framework.Input.ButtonState.Released
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Down*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.Down
  isExternal: false
  name: Down
  nameWithType: GamePadDPad.Down
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Down
- uid: Microsoft.Xna.Framework.Input.ButtonState
  commentId: T:Microsoft.Xna.Framework.Input.ButtonState
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: ButtonState
  nameWithType: ButtonState
  fullName: Microsoft.Xna.Framework.Input.ButtonState
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Left*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.Left
  isExternal: false
  name: Left
  nameWithType: GamePadDPad.Left
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Left
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Right*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.Right
  isExternal: false
  name: Right
  nameWithType: GamePadDPad.Right
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Right
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Up*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.Up
  isExternal: false
  name: Up
  nameWithType: GamePadDPad.Up
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Up
- uid: Microsoft.Xna.Framework.Input.GamePadDPad
  commentId: T:Microsoft.Xna.Framework.Input.GamePadDPad
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadDPad
  nameWithType: GamePadDPad
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.#ctor
  isExternal: false
  name: GamePadDPad
  nameWithType: GamePadDPad.GamePadDPad
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.GamePadDPad
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality
  isExternal: false
  name: Equality
  nameWithType: GamePadDPad.Equality
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: GamePadDPad.Inequality
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.Equals
  isExternal: false
  name: Equals
  nameWithType: GamePadDPad.Equals
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: GamePadDPad.GetHashCode
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadDPad.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadDPad.ToString
  isExternal: false
  name: ToString
  nameWithType: GamePadDPad.ToString
  fullName: Microsoft.Xna.Framework.Input.GamePadDPad.ToString
