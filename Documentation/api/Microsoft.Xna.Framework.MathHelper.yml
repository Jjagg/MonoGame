### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.MathHelper
  commentId: T:Microsoft.Xna.Framework.MathHelper
  id: MathHelper
  parent: Microsoft.Xna.Framework
  children:
  - Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)
  - Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.E
  - Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo(System.Int32)
  - Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.Log10E
  - Microsoft.Xna.Framework.MathHelper.Log2E
  - Microsoft.Xna.Framework.MathHelper.Max(System.Int32,System.Int32)
  - Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.Min(System.Int32,System.Int32)
  - Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.Pi
  - Microsoft.Xna.Framework.MathHelper.PiOver2
  - Microsoft.Xna.Framework.MathHelper.PiOver4
  - Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)
  - Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)
  - Microsoft.Xna.Framework.MathHelper.TwoPi
  - Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)
  langs:
  - csharp
  - vb
  name: MathHelper
  nameWithType: MathHelper
  fullName: Microsoft.Xna.Framework.MathHelper
  type: Class
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: MathHelper
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 11
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nContains commonly used precalculated values and mathematical operations.\n"
  example: []
  syntax:
    content: public static class MathHelper
    content.vb: Public Module MathHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Xna.Framework.MathHelper.E
  commentId: F:Microsoft.Xna.Framework.MathHelper.E
  id: E
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: E
  nameWithType: MathHelper.E
  fullName: Microsoft.Xna.Framework.MathHelper.E
  type: Field
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: E
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 16
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRepresents the mathematical constant e(2.71828175).\n"
  example: []
  syntax:
    content: public const float E = 2.71828175F
    return:
      type: System.Single
    content.vb: Public Const E As Single = 2.71828175F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.MathHelper.Log10E
  commentId: F:Microsoft.Xna.Framework.MathHelper.Log10E
  id: Log10E
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Log10E
  nameWithType: MathHelper.Log10E
  fullName: Microsoft.Xna.Framework.MathHelper.Log10E
  type: Field
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Log10E
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 21
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRepresents the log base ten of e(0.4342945).\n"
  example: []
  syntax:
    content: public const float Log10E = 0.4342945F
    return:
      type: System.Single
    content.vb: Public Const Log10E As Single = 0.4342945F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.MathHelper.Log2E
  commentId: F:Microsoft.Xna.Framework.MathHelper.Log2E
  id: Log2E
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Log2E
  nameWithType: MathHelper.Log2E
  fullName: Microsoft.Xna.Framework.MathHelper.Log2E
  type: Field
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Log2E
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 26
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRepresents the log base two of e(1.442695).\n"
  example: []
  syntax:
    content: public const float Log2E = 1.442695F
    return:
      type: System.Single
    content.vb: Public Const Log2E As Single = 1.442695F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.MathHelper.Pi
  commentId: F:Microsoft.Xna.Framework.MathHelper.Pi
  id: Pi
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Pi
  nameWithType: MathHelper.Pi
  fullName: Microsoft.Xna.Framework.MathHelper.Pi
  type: Field
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Pi
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 31
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRepresents the value of pi(3.14159274).\n"
  example: []
  syntax:
    content: public const float Pi = 3.14159274F
    return:
      type: System.Single
    content.vb: Public Const Pi As Single = 3.14159274F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.MathHelper.PiOver2
  commentId: F:Microsoft.Xna.Framework.MathHelper.PiOver2
  id: PiOver2
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: PiOver2
  nameWithType: MathHelper.PiOver2
  fullName: Microsoft.Xna.Framework.MathHelper.PiOver2
  type: Field
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PiOver2
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 36
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRepresents the value of pi divided by two(1.57079637).\n"
  example: []
  syntax:
    content: public const float PiOver2 = 1.57079637F
    return:
      type: System.Single
    content.vb: Public Const PiOver2 As Single = 1.57079637F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.MathHelper.PiOver4
  commentId: F:Microsoft.Xna.Framework.MathHelper.PiOver4
  id: PiOver4
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: PiOver4
  nameWithType: MathHelper.PiOver4
  fullName: Microsoft.Xna.Framework.MathHelper.PiOver4
  type: Field
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PiOver4
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 41
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRepresents the value of pi divided by four(0.7853982).\n"
  example: []
  syntax:
    content: public const float PiOver4 = 0.7853982F
    return:
      type: System.Single
    content.vb: Public Const PiOver4 As Single = 0.7853982F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.MathHelper.TwoPi
  commentId: F:Microsoft.Xna.Framework.MathHelper.TwoPi
  id: TwoPi
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: TwoPi
  nameWithType: MathHelper.TwoPi
  fullName: Microsoft.Xna.Framework.MathHelper.TwoPi
  type: Field
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TwoPi
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 46
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRepresents the value of pi times two(6.28318548).\n"
  example: []
  syntax:
    content: public const float TwoPi = 6.28318548F
    return:
      type: System.Single
    content.vb: Public Const TwoPi As Single = 6.28318548F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Barycentric(Single, Single, Single, Single, Single)
  nameWithType: MathHelper.Barycentric(Single, Single, Single, Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Barycentric
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 57
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.\n"
  example: []
  syntax:
    content: public static float Barycentric(float value1, float value2, float value3, float amount1, float amount2)
    parameters:
    - id: value1
      type: System.Single
      description: The coordinate on one axis of vertex 1 of the defining triangle.
    - id: value2
      type: System.Single
      description: The coordinate on the same axis of vertex 2 of the defining triangle.
    - id: value3
      type: System.Single
      description: The coordinate on the same axis of vertex 3 of the defining triangle.
    - id: amount1
      type: System.Single
      description: The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.
    - id: amount2
      type: System.Single
      description: The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.
    return:
      type: System.Single
      description: Cartesian coordinate of the specified point with respect to the axis being used.
    content.vb: Public Shared Function Barycentric(value1 As Single, value2 As Single, value3 As Single, amount1 As Single, amount2 As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: CatmullRom(Single, Single, Single, Single, Single)
  nameWithType: MathHelper.CatmullRom(Single, Single, Single, Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CatmullRom
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 71
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms a Catmull-Rom interpolation using the specified positions.\n"
  example: []
  syntax:
    content: public static float CatmullRom(float value1, float value2, float value3, float value4, float amount)
    parameters:
    - id: value1
      type: System.Single
      description: The first position in the interpolation.
    - id: value2
      type: System.Single
      description: The second position in the interpolation.
    - id: value3
      type: System.Single
      description: The third position in the interpolation.
    - id: value4
      type: System.Single
      description: The fourth position in the interpolation.
    - id: amount
      type: System.Single
      description: Weighting factor.
    return:
      type: System.Single
      description: A position that is the result of the Catmull-Rom interpolation.
    content.vb: Public Shared Function CatmullRom(value1 As Single, value2 As Single, value3 As Single, value4 As Single, amount As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.CatmullRom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)
  id: Clamp(System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Clamp(Single, Single, Single)
  nameWithType: MathHelper.Clamp(Single, Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.Clamp(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clamp
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 90
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRestricts a value to be within a specified range.\n"
  example: []
  syntax:
    content: public static float Clamp(float value, float min, float max)
    parameters:
    - id: value
      type: System.Single
      description: The value to clamp.
    - id: min
      type: System.Single
      description: The minimum value. If <code>value</code> is less than <code>min</code>, <code>min</code> will be returned.
    - id: max
      type: System.Single
      description: The maximum value. If <code>value</code> is greater than <code>max</code>, <code>max</code> will be returned.
    return:
      type: System.Single
      description: The clamped value.
    content.vb: Public Shared Function Clamp(value As Single, min As Single, max As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)
  id: Clamp(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Clamp(Int32, Int32, Int32)
  nameWithType: MathHelper.Clamp(Int32, Int32, Int32)
  fullName: Microsoft.Xna.Framework.MathHelper.Clamp(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clamp
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 109
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nRestricts a value to be within a specified range.\n"
  example: []
  syntax:
    content: public static int Clamp(int value, int min, int max)
    parameters:
    - id: value
      type: System.Int32
      description: The value to clamp.
    - id: min
      type: System.Int32
      description: The minimum value. If <code>value</code> is less than <code>min</code>, <code>min</code> will be returned.
    - id: max
      type: System.Int32
      description: The maximum value. If <code>value</code> is greater than <code>max</code>, <code>max</code> will be returned.
    return:
      type: System.Int32
      description: The clamped value.
    content.vb: Public Shared Function Clamp(value As Integer, min As Integer, max As Integer) As Integer
  overload: Microsoft.Xna.Framework.MathHelper.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)
  id: Distance(System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Distance(Single, Single)
  nameWithType: MathHelper.Distance(Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.Distance(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Distance
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 122
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCalculates the absolute value of the difference of two values.\n"
  example: []
  syntax:
    content: public static float Distance(float value1, float value2)
    parameters:
    - id: value1
      type: System.Single
      description: Source value.
    - id: value2
      type: System.Single
      description: Source value.
    return:
      type: System.Single
      description: Distance between the two values.
    content.vb: Public Shared Function Distance(value1 As Single, value2 As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Hermite(Single, Single, Single, Single, Single)
  nameWithType: MathHelper.Hermite(Single, Single, Single, Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.Hermite(System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Hermite
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 136
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms a Hermite spline interpolation.\n"
  example: []
  syntax:
    content: public static float Hermite(float value1, float tangent1, float value2, float tangent2, float amount)
    parameters:
    - id: value1
      type: System.Single
      description: Source position.
    - id: tangent1
      type: System.Single
      description: Source tangent.
    - id: value2
      type: System.Single
      description: Source position.
    - id: tangent2
      type: System.Single
      description: Source tangent.
    - id: amount
      type: System.Single
      description: Weighting factor.
    return:
      type: System.Single
      description: The result of the Hermite spline interpolation.
    content.vb: Public Shared Function Hermite(value1 As Single, tangent1 As Single, value2 As Single, tangent2 As Single, amount As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.Hermite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)
  id: Lerp(System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Lerp(Single, Single, Single)
  nameWithType: MathHelper.Lerp(Single, Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.Lerp(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Lerp
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 169
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nLinearly interpolates between two values.\n"
  remarks: >
    This method performs the linear interpolation based on the following formula:

    <pre><code>value1 + (value2 - value1) * amount</code></pre>.

    Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.

    See <xref href="Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> for a less efficient version with more precision around edge cases.
  example: []
  syntax:
    content: public static float Lerp(float value1, float value2, float amount)
    parameters:
    - id: value1
      type: System.Single
      description: Source value.
    - id: value2
      type: System.Single
      description: Destination value.
    - id: amount
      type: System.Single
      description: Value between 0 and 1 indicating the weight of value2.
    return:
      type: System.Single
      description: Interpolated value.
    content.vb: Public Shared Function Lerp(value1 As Single, value2 As Single, amount As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
  id: LerpPrecise(System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: LerpPrecise(Single, Single, Single)
  nameWithType: MathHelper.LerpPrecise(Single, Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LerpPrecise
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 195
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nLinearly interpolates between two values.\nThis method is a less efficient, more precise version of <xref href=\"Microsoft.Xna.Framework.MathHelper.Lerp(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nSee remarks for more info.\n"
  remarks: >
    This method performs the linear interpolation based on the following formula:

    <pre><code>((1 - amount) * value1) + (value2 * amount)</code></pre>.

    Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.

    This method does not have the floating point precision issue that <xref href="Microsoft.Xna.Framework.MathHelper.Lerp(System.Single%2cSystem.Single%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> has.

    i.e. If there is a big gap between value1 and value2 in magnitude (e.g. value1=10000000000000000, value2=1),

    right at the edge of the interpolation range (amount=1), <xref href="Microsoft.Xna.Framework.MathHelper.Lerp(System.Single%2cSystem.Single%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> will return 0 (whereas it should return 1).

    This also holds for value1=10^17, value2=10; value1=10^18,value2=10^2... so on.

    For an in depth explanation of the issue, see below references:

    Relevant Wikipedia Article: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support

    Relevant StackOverflow Answer: http://stackoverflow.com/questions/4353525/floating-point-linear-interpolation#answer-23716956
  example: []
  syntax:
    content: public static float LerpPrecise(float value1, float value2, float amount)
    parameters:
    - id: value1
      type: System.Single
      description: Source value.
    - id: value2
      type: System.Single
      description: Destination value.
    - id: amount
      type: System.Single
      description: Value between 0 and 1 indicating the weight of value2.
    return:
      type: System.Single
      description: Interpolated value.
    content.vb: Public Shared Function LerpPrecise(value1 As Single, value2 As Single, amount As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)
  id: Max(System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Max(Single, Single)
  nameWithType: MathHelper.Max(Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.Max(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Max
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 206
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the greater of two values.\n"
  example: []
  syntax:
    content: public static float Max(float value1, float value2)
    parameters:
    - id: value1
      type: System.Single
      description: Source value.
    - id: value2
      type: System.Single
      description: Source value.
    return:
      type: System.Single
      description: The greater value.
    content.vb: Public Shared Function Max(value1 As Single, value2 As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Max(System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Max(System.Int32,System.Int32)
  id: Max(System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Max(Int32, Int32)
  nameWithType: MathHelper.Max(Int32, Int32)
  fullName: Microsoft.Xna.Framework.MathHelper.Max(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Max
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 217
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the greater of two values.\n"
  example: []
  syntax:
    content: public static int Max(int value1, int value2)
    parameters:
    - id: value1
      type: System.Int32
      description: Source value.
    - id: value2
      type: System.Int32
      description: Source value.
    return:
      type: System.Int32
      description: The greater value.
    content.vb: Public Shared Function Max(value1 As Integer, value2 As Integer) As Integer
  overload: Microsoft.Xna.Framework.MathHelper.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)
  id: Min(System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Min(Single, Single)
  nameWithType: MathHelper.Min(Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.Min(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Min
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 228
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the lesser of two values.\n"
  example: []
  syntax:
    content: public static float Min(float value1, float value2)
    parameters:
    - id: value1
      type: System.Single
      description: Source value.
    - id: value2
      type: System.Single
      description: Source value.
    return:
      type: System.Single
      description: The lesser value.
    content.vb: Public Shared Function Min(value1 As Single, value2 As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.Min(System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Min(System.Int32,System.Int32)
  id: Min(System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: Min(Int32, Int32)
  nameWithType: MathHelper.Min(Int32, Int32)
  fullName: Microsoft.Xna.Framework.MathHelper.Min(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Min
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 239
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the lesser of two values.\n"
  example: []
  syntax:
    content: public static int Min(int value1, int value2)
    parameters:
    - id: value1
      type: System.Int32
      description: Source value.
    - id: value2
      type: System.Int32
      description: Source value.
    return:
      type: System.Int32
      description: The lesser value.
    content.vb: Public Shared Function Min(value1 As Integer, value2 As Integer) As Integer
  overload: Microsoft.Xna.Framework.MathHelper.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)
  id: SmoothStep(System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: SmoothStep(Single, Single, Single)
  nameWithType: MathHelper.SmoothStep(Single, Single, Single)
  fullName: Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SmoothStep
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 251
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nInterpolates between two values using a cubic equation.\n"
  example: []
  syntax:
    content: public static float SmoothStep(float value1, float value2, float amount)
    parameters:
    - id: value1
      type: System.Single
      description: Source value.
    - id: value2
      type: System.Single
      description: Source value.
    - id: amount
      type: System.Single
      description: Weighting value.
    return:
      type: System.Single
      description: Interpolated value.
    content.vb: Public Shared Function SmoothStep(value1 As Single, value2 As Single, amount As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.SmoothStep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)
  id: ToDegrees(System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: ToDegrees(Single)
  nameWithType: MathHelper.ToDegrees(Single)
  fullName: Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToDegrees
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 272
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConverts radians to degrees.\n"
  remarks: "\nThis method uses double precission internally,\nthough it returns single float\nFactor = 180 / pi\n"
  example: []
  syntax:
    content: public static float ToDegrees(float radians)
    parameters:
    - id: radians
      type: System.Single
      description: The angle in radians.
    return:
      type: System.Single
      description: The angle in degrees.
    content.vb: Public Shared Function ToDegrees(radians As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)
  id: ToRadians(System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: ToRadians(Single)
  nameWithType: MathHelper.ToRadians(Single)
  fullName: Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToRadians
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 287
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConverts degrees to radians.\n"
  remarks: "\nThis method uses double precission internally,\nthough it returns single float\nFactor = pi / 180\n"
  example: []
  syntax:
    content: public static float ToRadians(float degrees)
    parameters:
    - id: degrees
      type: System.Single
      description: The angle in degrees.
    return:
      type: System.Single
      description: The angle in radians.
    content.vb: Public Shared Function ToRadians(degrees As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)
  id: WrapAngle(System.Single)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: WrapAngle(Single)
  nameWithType: MathHelper.WrapAngle(Single)
  fullName: Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: WrapAngle
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 297
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReduces a given angle to a value between π and -π.\n"
  example: []
  syntax:
    content: public static float WrapAngle(float angle)
    parameters:
    - id: angle
      type: System.Single
      description: The angle to reduce, in radians.
    return:
      type: System.Single
      description: The new angle, in radians.
    content.vb: Public Shared Function WrapAngle(angle As Single) As Single
  overload: Microsoft.Xna.Framework.MathHelper.WrapAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo(System.Int32)
  commentId: M:Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo(System.Int32)
  id: IsPowerOfTwo(System.Int32)
  parent: Microsoft.Xna.Framework.MathHelper
  langs:
  - csharp
  - vb
  name: IsPowerOfTwo(Int32)
  nameWithType: MathHelper.IsPowerOfTwo(Int32)
  fullName: Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo(System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/MathHelper.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsPowerOfTwo
    path: ../MonoGame.Framework/MathHelper.cs
    startLine: 314
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDetermines if value is powered by two.\n"
  example: []
  syntax:
    content: public static bool IsPowerOfTwo(int value)
    parameters:
    - id: value
      type: System.Int32
      description: A value.
    return:
      type: System.Boolean
      description: <code>true</code> if <code>value</code> is powered by two; otherwise <code>false</code>.
    content.vb: Public Shared Function IsPowerOfTwo(value As Integer) As Boolean
  overload: Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.MathHelper.Barycentric*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.Barycentric
  isExternal: false
  name: Barycentric
  nameWithType: MathHelper.Barycentric
  fullName: Microsoft.Xna.Framework.MathHelper.Barycentric
- uid: Microsoft.Xna.Framework.MathHelper.CatmullRom*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.CatmullRom
  isExternal: false
  name: CatmullRom
  nameWithType: MathHelper.CatmullRom
  fullName: Microsoft.Xna.Framework.MathHelper.CatmullRom
- uid: Microsoft.Xna.Framework.MathHelper.Clamp*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.Clamp
  isExternal: false
  name: Clamp
  nameWithType: MathHelper.Clamp
  fullName: Microsoft.Xna.Framework.MathHelper.Clamp
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.MathHelper.Distance*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.Distance
  isExternal: false
  name: Distance
  nameWithType: MathHelper.Distance
  fullName: Microsoft.Xna.Framework.MathHelper.Distance
- uid: Microsoft.Xna.Framework.MathHelper.Hermite*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.Hermite
  isExternal: false
  name: Hermite
  nameWithType: MathHelper.Hermite
  fullName: Microsoft.Xna.Framework.MathHelper.Hermite
- uid: Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
- uid: Microsoft.Xna.Framework.MathHelper.Lerp*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.Lerp
  isExternal: false
  name: Lerp
  nameWithType: MathHelper.Lerp
  fullName: Microsoft.Xna.Framework.MathHelper.Lerp
- uid: Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)
- uid: Microsoft.Xna.Framework.MathHelper.LerpPrecise*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.LerpPrecise
  isExternal: false
  name: LerpPrecise
  nameWithType: MathHelper.LerpPrecise
  fullName: Microsoft.Xna.Framework.MathHelper.LerpPrecise
- uid: Microsoft.Xna.Framework.MathHelper.Max*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.Max
  isExternal: false
  name: Max
  nameWithType: MathHelper.Max
  fullName: Microsoft.Xna.Framework.MathHelper.Max
- uid: Microsoft.Xna.Framework.MathHelper.Min*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.Min
  isExternal: false
  name: Min
  nameWithType: MathHelper.Min
  fullName: Microsoft.Xna.Framework.MathHelper.Min
- uid: Microsoft.Xna.Framework.MathHelper.SmoothStep*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.SmoothStep
  isExternal: false
  name: SmoothStep
  nameWithType: MathHelper.SmoothStep
  fullName: Microsoft.Xna.Framework.MathHelper.SmoothStep
- uid: Microsoft.Xna.Framework.MathHelper.ToDegrees*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.ToDegrees
  isExternal: false
  name: ToDegrees
  nameWithType: MathHelper.ToDegrees
  fullName: Microsoft.Xna.Framework.MathHelper.ToDegrees
- uid: Microsoft.Xna.Framework.MathHelper.ToRadians*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.ToRadians
  isExternal: false
  name: ToRadians
  nameWithType: MathHelper.ToRadians
  fullName: Microsoft.Xna.Framework.MathHelper.ToRadians
- uid: Microsoft.Xna.Framework.MathHelper.WrapAngle*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.WrapAngle
  isExternal: false
  name: WrapAngle
  nameWithType: MathHelper.WrapAngle
  fullName: Microsoft.Xna.Framework.MathHelper.WrapAngle
- uid: Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo*
  commentId: Overload:Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo
  isExternal: false
  name: IsPowerOfTwo
  nameWithType: MathHelper.IsPowerOfTwo
  fullName: Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
