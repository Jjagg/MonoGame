### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffectInstance
  id: SoundEffectInstance
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  langs:
  - csharp
  - vb
  name: SoundEffectInstance
  nameWithType: SoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.OpenAL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SoundEffectInstance
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.OpenAL.cs
    startLine: 9
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Represents a single instance of a playing, paused, or stopped sound.
  remarks: "\n<p>SoundEffectInstances are created through SoundEffect.CreateInstance() and used internally by SoundEffect.Play()</p>\n"
  example: []
  syntax:
    content: 'public class SoundEffectInstance : IDisposable'
    content.vb: >-
      Public Class SoundEffectInstance
          Implements IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  id: IsLooped
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: IsLooped
  nameWithType: SoundEffectInstance.IsLooped
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsLooped
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 25
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Enables or Disables whether the SoundEffectInstance should repeat after playback.
  remarks: This value has no effect on an already playing sound.
  example: []
  syntax:
    content: public virtual bool IsLooped { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property IsLooped As Boolean
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  id: Pan
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Pan
  nameWithType: SoundEffectInstance.Pan
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Pan
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 33
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets or sets the pan, or speaker balance..
  example: []
  syntax:
    content: public float Pan { get; set; }
    parameters: []
    return:
      type: System.Single
      description: Pan value ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker). Values outside of this range will throw an exception.
    content.vb: Public Property Pan As Single
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  id: Pitch
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Pitch
  nameWithType: SoundEffectInstance.Pitch
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Pitch
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 48
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets or sets the pitch adjustment.
  example: []
  syntax:
    content: public float Pitch { get; set; }
    parameters: []
    return:
      type: System.Single
      description: Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave). Values outside of this range will throw an Exception.
    content.vb: Public Property Pitch As Single
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  id: Volume
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Volume
  nameWithType: SoundEffectInstance.Volume
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Volume
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 67
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets or sets the volume of the SoundEffectInstance.
  remarks: "\nThis is the volume relative to SoundEffect.MasterVolume. Before playback, this Volume property is multiplied by SoundEffect.MasterVolume when determining the final mix volume.\n"
  example: []
  syntax:
    content: public float Volume { get; set; }
    parameters: []
    return:
      type: System.Single
      description: Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume.
    content.vb: Public Property Volume As Single
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  id: State
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: State
  nameWithType: SoundEffectInstance.State
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: State
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 87
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets the SoundEffectInstance&apos;s current playback state.
  example: []
  syntax:
    content: public virtual SoundState State { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Audio.SoundState
    content.vb: Public Overridable ReadOnly Property State As SoundState
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  id: IsDisposed
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: SoundEffectInstance.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsDisposed
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 90
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Indicates whether the object is disposed.
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize
  id: Finalize
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: SoundEffectInstance.Finalize()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Finalize
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 109
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReleases unmanaged resources and performs other cleanup operations before the\n<xref href=\"Microsoft.Xna.Framework.Audio.SoundEffectInstance\" data-throw-if-not-resolved=\"false\"></xref> is reclaimed by garbage collection.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  id: Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Apply3D(AudioListener, AudioEmitter)
  nameWithType: SoundEffectInstance.Apply3D(AudioListener, AudioEmitter)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener, Microsoft.Xna.Framework.Audio.AudioEmitter)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Apply3D
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 117
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Applies 3D positioning to the SoundEffectInstance using a single listener.
  example: []
  syntax:
    content: public void Apply3D(AudioListener listener, AudioEmitter emitter)
    parameters:
    - id: listener
      type: Microsoft.Xna.Framework.Audio.AudioListener
      description: Data about the listener.
    - id: emitter
      type: Microsoft.Xna.Framework.Audio.AudioEmitter
      description: Data about the source of emission.
    content.vb: Public Sub Apply3D(listener As AudioListener, emitter As AudioEmitter)
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
  id: Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Apply3D(AudioListener[], AudioEmitter)
  nameWithType: SoundEffectInstance.Apply3D(AudioListener[], AudioEmitter)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[], Microsoft.Xna.Framework.Audio.AudioEmitter)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Apply3D
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 125
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Applies 3D positioning to the SoundEffectInstance using multiple listeners.
  example: []
  syntax:
    content: public void Apply3D(AudioListener[] listeners, AudioEmitter emitter)
    parameters:
    - id: listeners
      type: Microsoft.Xna.Framework.Audio.AudioListener[]
      description: Data about each listener.
    - id: emitter
      type: Microsoft.Xna.Framework.Audio.AudioEmitter
      description: Data about the source of emission.
    content.vb: Public Sub Apply3D(listeners As AudioListener(), emitter As AudioEmitter)
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D*
  nameWithType.vb: SoundEffectInstance.Apply3D(AudioListener(), AudioEmitter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener(), Microsoft.Xna.Framework.Audio.AudioEmitter)
  name.vb: Apply3D(AudioListener(), AudioEmitter)
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  id: Pause
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: SoundEffectInstance.Pause()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Pause
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 133
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Pauses playback of a SoundEffectInstance.
  remarks: Paused instances can be resumed with SoundEffectInstance.Play() or SoundEffectInstance.Resume().
  example: []
  syntax:
    content: public virtual void Pause()
    content.vb: Public Overridable Sub Pause
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  id: Play
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Play()
  nameWithType: SoundEffectInstance.Play()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Play
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 140
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Plays or resumes a SoundEffectInstance.
  remarks: Throws an exception if more sounds are playing than the platform allows.
  example: []
  syntax:
    content: public virtual void Play()
    content.vb: Public Overridable Sub Play
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  id: Resume
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Resume()
  nameWithType: SoundEffectInstance.Resume()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Resume
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 168
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Resumes playback for a SoundEffectInstance.
  remarks: Only has effect on a SoundEffectInstance in a paused state.
  example: []
  syntax:
    content: public virtual void Resume()
    content.vb: Public Overridable Sub Resume
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  id: Stop
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: SoundEffectInstance.Stop()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Stop
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 174
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Immediately stops playing a SoundEffectInstance.
  example: []
  syntax:
    content: public virtual void Stop()
    content.vb: Public Overridable Sub Stop
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  id: Stop(System.Boolean)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Stop(Boolean)
  nameWithType: SoundEffectInstance.Stop(Boolean)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Stop
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 182
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Stops playing a SoundEffectInstance, either immediately or as authored.
  remarks: Stopping a sound with the immediate argument set to false will allow it to play any release phases, such as fade, before coming to a stop.
  example: []
  syntax:
    content: public virtual void Stop(bool immediate)
    parameters:
    - id: immediate
      type: System.Boolean
      description: Determined whether the sound stops immediately, or after playing its release phase and/or transitions.
    content.vb: Public Overridable Sub Stop(immediate As Boolean)
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SoundEffectInstance.Dispose()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 188
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Releases the resources held by this <xref href="Microsoft.Xna.Framework.Audio.SoundEffectInstance" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: SoundEffectInstance.Dispose(Boolean)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Audio/SoundEffectInstance.cs
    startLine: 203
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReleases the resources held by this <xref href=\"Microsoft.Xna.Framework.Audio.SoundEffectInstance\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >-
    If the disposing parameter is true, the Dispose method was called explicitly. This

    means that managed objects referenced by this instance should be disposed or released as

    required.  If the disposing parameter is false, Dispose was called by the finalizer and

    no managed objects should be touched because we do not know if they are still valid or

    not at that time.  Unmanaged resources should always be released.
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: If set to <code>true</code>, Dispose was called explicitly.
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  isExternal: false
  name: IsLooped
  nameWithType: SoundEffectInstance.IsLooped
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  isExternal: false
  name: Pan
  nameWithType: SoundEffectInstance.Pan
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  isExternal: false
  name: Pitch
  nameWithType: SoundEffectInstance.Pitch
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  isExternal: false
  name: Volume
  nameWithType: SoundEffectInstance.Volume
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  isExternal: false
  name: State
  nameWithType: SoundEffectInstance.State
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
- uid: Microsoft.Xna.Framework.Audio.SoundState
  commentId: T:Microsoft.Xna.Framework.Audio.SoundState
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: SoundState
  nameWithType: SoundState
  fullName: Microsoft.Xna.Framework.Audio.SoundState
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  isExternal: false
  name: IsDisposed
  nameWithType: SoundEffectInstance.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffectInstance
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: SoundEffectInstance
  nameWithType: SoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize
  isExternal: false
  name: Finalize
  nameWithType: SoundEffectInstance.Finalize
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D
  isExternal: false
  name: Apply3D
  nameWithType: SoundEffectInstance.Apply3D
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D
- uid: Microsoft.Xna.Framework.Audio.AudioListener
  commentId: T:Microsoft.Xna.Framework.Audio.AudioListener
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioListener
  nameWithType: AudioListener
  fullName: Microsoft.Xna.Framework.Audio.AudioListener
- uid: Microsoft.Xna.Framework.Audio.AudioEmitter
  commentId: T:Microsoft.Xna.Framework.Audio.AudioEmitter
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioEmitter
  nameWithType: AudioEmitter
  fullName: Microsoft.Xna.Framework.Audio.AudioEmitter
- uid: Microsoft.Xna.Framework.Audio.AudioListener[]
  name: AudioListener[]
  nameWithType: AudioListener[]
  fullName: Microsoft.Xna.Framework.Audio.AudioListener[]
  nameWithType.vb: AudioListener()
  fullName.vb: Microsoft.Xna.Framework.Audio.AudioListener()
  name.vb: AudioListener()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.AudioListener
    name: AudioListener
    nameWithType: AudioListener
    fullName: Microsoft.Xna.Framework.Audio.AudioListener
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.AudioListener
    name: AudioListener
    nameWithType: AudioListener
    fullName: Microsoft.Xna.Framework.Audio.AudioListener
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  isExternal: false
  name: Pause
  nameWithType: SoundEffectInstance.Pause
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  isExternal: false
  name: Play
  nameWithType: SoundEffectInstance.Play
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  isExternal: false
  name: Resume
  nameWithType: SoundEffectInstance.Resume
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  isExternal: false
  name: Stop
  nameWithType: SoundEffectInstance.Stop
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  isExternal: false
  name: Dispose
  nameWithType: SoundEffectInstance.Dispose
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
