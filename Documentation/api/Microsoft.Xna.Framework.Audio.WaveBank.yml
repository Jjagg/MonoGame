### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.WaveBank
  commentId: T:Microsoft.Xna.Framework.Audio.WaveBank
  id: WaveBank
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)
  - Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String,System.Int32,System.Int16)
  - Microsoft.Xna.Framework.Audio.WaveBank.Dispose
  - Microsoft.Xna.Framework.Audio.WaveBank.Disposing
  - Microsoft.Xna.Framework.Audio.WaveBank.Finalize
  - Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed
  - Microsoft.Xna.Framework.Audio.WaveBank.IsInUse
  - Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared
  langs:
  - csharp
  - vb
  name: WaveBank
  nameWithType: WaveBank
  fullName: Microsoft.Xna.Framework.Audio.WaveBank
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.Default.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: WaveBank
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.Default.cs
    startLine: 8
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Represents a collection of wave files.
  example: []
  syntax:
    content: 'public class WaveBank : IDisposable'
    content.vb: >-
      Public Class WaveBank
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Xna.Framework.Audio.WaveBank.IsInUse
  commentId: P:Microsoft.Xna.Framework.Audio.WaveBank.IsInUse
  id: IsInUse
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: IsInUse
  nameWithType: WaveBank.IsInUse
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.IsInUse
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsInUse
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 64
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\n"
  example: []
  syntax:
    content: public bool IsInUse { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInUse As Boolean
  overload: Microsoft.Xna.Framework.Audio.WaveBank.IsInUse*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared
  commentId: P:Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared
  id: IsPrepared
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: IsPrepared
  nameWithType: WaveBank.IsPrepared
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsPrepared
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 68
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\n"
  example: []
  syntax:
    content: public bool IsPrepared { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPrepared As Boolean
  overload: Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)
  id: '#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)'
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: WaveBank(AudioEngine, String)
  nameWithType: WaveBank.WaveBank(AudioEngine, String)
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.WaveBank(Microsoft.Xna.Framework.Audio.AudioEngine, System.String)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 73
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  remarks: This constructor immediately loads all wave data into memory at once.
  example: []
  syntax:
    content: public WaveBank(AudioEngine audioEngine, string nonStreamingWaveBankFilename)
    parameters:
    - id: audioEngine
      type: Microsoft.Xna.Framework.Audio.AudioEngine
      description: Instance of the AudioEngine to associate this wave bank with.
    - id: nonStreamingWaveBankFilename
      type: System.String
      description: Path to the .xwb file to load.
    content.vb: Public Sub New(audioEngine As AudioEngine, nonStreamingWaveBankFilename As String)
  overload: Microsoft.Xna.Framework.Audio.WaveBank.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String,System.Int32,System.Int16)
  commentId: M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String,System.Int32,System.Int16)
  id: '#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String,System.Int32,System.Int16)'
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: WaveBank(AudioEngine, String, Int32, Int16)
  nameWithType: WaveBank.WaveBank(AudioEngine, String, Int32, Int16)
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.WaveBank(Microsoft.Xna.Framework.Audio.AudioEngine, System.String, System.Int32, System.Int16)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 355
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  remarks: "\n<p>This constructor streams wave data as needed.</p>\n<p>Note that packetsize is in sectors, which is 2048 bytes.</p>\n<p>AudioEngine.Update() must be called at least once before using data from a streaming wave bank.</p>\n"
  example: []
  syntax:
    content: public WaveBank(AudioEngine audioEngine, string streamingWaveBankFilename, int offset, short packetsize)
    parameters:
    - id: audioEngine
      type: Microsoft.Xna.Framework.Audio.AudioEngine
      description: Instance of the AudioEngine to associate this wave bank with.
    - id: streamingWaveBankFilename
      type: System.String
      description: Path to the .xwb to stream from.
    - id: offset
      type: System.Int32
      description: DVD sector-aligned offset within the wave bank data file.
    - id: packetsize
      type: System.Int16
      description: Stream packet size, in sectors, to use for each stream. The minimum value is 2.
    content.vb: Public Sub New(audioEngine As AudioEngine, streamingWaveBankFilename As String, offset As Integer, packetsize As Short)
  overload: Microsoft.Xna.Framework.Audio.WaveBank.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.WaveBank.Disposing
  commentId: E:Microsoft.Xna.Framework.Audio.WaveBank.Disposing
  id: Disposing
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: Disposing
  nameWithType: WaveBank.Disposing
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.Disposing
  type: Event
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Disposing
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 379
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nThis event is triggered when the WaveBank is disposed.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> Disposing
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event Disposing As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed
  id: IsDisposed
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: WaveBank.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsDisposed
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 384
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nIs true if the WaveBank has been disposed.\n"
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.WaveBank.Dispose
  commentId: M:Microsoft.Xna.Framework.Audio.WaveBank.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: WaveBank.Dispose()
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 389
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDisposes the WaveBank.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.Audio.WaveBank.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.WaveBank.Finalize
  commentId: M:Microsoft.Xna.Framework.Audio.WaveBank.Finalize
  id: Finalize
  parent: Microsoft.Xna.Framework.Audio.WaveBank
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: WaveBank.Finalize()
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.Finalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/WaveBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Finalize
    path: ../MonoGame.Framework/Audio/Xact/WaveBank.cs
    startLine: 395
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Xna.Framework.Audio.WaveBank.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Audio.WaveBank.IsInUse*
  commentId: Overload:Microsoft.Xna.Framework.Audio.WaveBank.IsInUse
  isExternal: false
  name: IsInUse
  nameWithType: WaveBank.IsInUse
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.IsInUse
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared*
  commentId: Overload:Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared
  isExternal: false
  name: IsPrepared
  nameWithType: WaveBank.IsPrepared
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared
- uid: Microsoft.Xna.Framework.Audio.WaveBank.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Audio.WaveBank.#ctor
  isExternal: false
  name: WaveBank
  nameWithType: WaveBank.WaveBank
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.WaveBank
- uid: Microsoft.Xna.Framework.Audio.AudioEngine
  commentId: T:Microsoft.Xna.Framework.Audio.AudioEngine
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioEngine
  nameWithType: AudioEngine
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed*
  commentId: Overload:Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed
  isExternal: false
  name: IsDisposed
  nameWithType: WaveBank.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed
- uid: Microsoft.Xna.Framework.Audio.WaveBank.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Audio.WaveBank.Dispose
  isExternal: false
  name: Dispose
  nameWithType: WaveBank.Dispose
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.WaveBank.Finalize*
  commentId: Overload:Microsoft.Xna.Framework.Audio.WaveBank.Finalize
  isExternal: false
  name: Finalize
  nameWithType: WaveBank.Finalize
  fullName: Microsoft.Xna.Framework.Audio.WaveBank.Finalize
