### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Graphics.VertexElement
  commentId: T:Microsoft.Xna.Framework.Graphics.VertexElement
  id: VertexElement
  parent: Microsoft.Xna.Framework.Graphics
  children:
  - Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)
  - Microsoft.Xna.Framework.Graphics.VertexElement.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  - Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)
  - Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode
  - Microsoft.Xna.Framework.Graphics.VertexElement.Offset
  - Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  - Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  - Microsoft.Xna.Framework.Graphics.VertexElement.ToString
  - Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex
  - Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat
  - Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage
  langs:
  - csharp
  - vb
  name: VertexElement
  nameWithType: VertexElement
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: VertexElement
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 11
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nDefines a single element in a vertex.\n"
  example: []
  syntax:
    content: 'public struct VertexElement : IEquatable<VertexElement>'
    content.vb: >-
      Public Structure VertexElement
          Implements IEquatable(Of VertexElement)
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Graphics.VertexElement}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.Offset
  commentId: P:Microsoft.Xna.Framework.Graphics.VertexElement.Offset
  id: Offset
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: VertexElement.Offset
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Offset
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Offset
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 22
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nGets or sets the offset in bytes from the beginning of the stream to the vertex element.\n"
  example: []
  syntax:
    content: public int Offset { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The offset in bytes.
    content.vb: Public Property Offset As Integer
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.Offset*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat
  commentId: P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat
  id: VertexElementFormat
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: VertexElementFormat
  nameWithType: VertexElement.VertexElementFormat
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: VertexElementFormat
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 32
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nGets or sets the data format.\n"
  example: []
  syntax:
    content: public VertexElementFormat VertexElementFormat { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.VertexElementFormat
      description: The data format.
    content.vb: Public Property VertexElementFormat As VertexElementFormat
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage
  commentId: P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage
  id: VertexElementUsage
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: VertexElementUsage
  nameWithType: VertexElement.VertexElementUsage
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: VertexElementUsage
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 42
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nGets or sets the HLSL semantic of the element in the vertex shader input.\n"
  example: []
  syntax:
    content: public VertexElementUsage VertexElementUsage { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.VertexElementUsage
      description: The HLSL semantic of the element in the vertex shader input.
    content.vb: Public Property VertexElementUsage As VertexElementUsage
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex
  commentId: P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex
  id: UsageIndex
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: UsageIndex
  nameWithType: VertexElement.UsageIndex
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: UsageIndex
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 61
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nGets or sets the semantic index.\n"
  remarks: "\nUsage indices in a vertex declaration usually start with 0. When multiple vertex buffers\nare bound to the input assembler stage (see <xref href=\"Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers(Microsoft.Xna.Framework.Graphics.VertexBufferBinding%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>),\nMonoGame internally adjusts the usage indices based on the order in which the vertex\nbuffers are bound.\n"
  example: []
  syntax:
    content: public int UsageIndex { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe semantic index, which is required if the semantic is used for more than one vertex\nelement.\n"
    content.vb: Public Property UsageIndex As Integer
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)
  id: '#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)'
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: VertexElement(Int32, VertexElementFormat, VertexElementUsage, Int32)
  nameWithType: VertexElement.VertexElement(Int32, VertexElementFormat, VertexElementUsage, Int32)
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElement(System.Int32, Microsoft.Xna.Framework.Graphics.VertexElementFormat, Microsoft.Xna.Framework.Graphics.VertexElementUsage, System.Int32)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 74
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Xna.Framework.Graphics.VertexElement\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public VertexElement(int offset, VertexElementFormat elementFormat, VertexElementUsage elementUsage, int usageIndex)
    parameters:
    - id: offset
      type: System.Int32
      description: The offset in bytes from the beginning of the stream to the vertex element.
    - id: elementFormat
      type: Microsoft.Xna.Framework.Graphics.VertexElementFormat
      description: The element format.
    - id: elementUsage
      type: Microsoft.Xna.Framework.Graphics.VertexElementUsage
      description: The HLSL semantic of the element in the vertex shader input-signature.
    - id: usageIndex
      type: System.Int32
      description: The semantic index, which is required if the semantic is used for more than one vertex element.
    content.vb: Public Sub New(offset As Integer, elementFormat As VertexElementFormat, elementUsage As VertexElementUsage, usageIndex As Integer)
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: VertexElement.GetHashCode()
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 89
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nReturns a hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance, suitable for use in hashing algorithms and data\nstructures like a hash table.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.ToString
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexElement.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: VertexElement.ToString()
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 113
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this instance.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: VertexElement.Equals(Object)
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 126
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance;\notherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  id: Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: Equals(VertexElement)
  nameWithType: VertexElement.Equals(VertexElement)
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 140
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nDetermines whether the specified <xref href=\"Microsoft.Xna.Framework.Graphics.VertexElement\" data-throw-if-not-resolved=\"false\"></xref> is equal to this\ninstance.\n"
  example: []
  syntax:
    content: public bool Equals(VertexElement other)
    parameters:
    - id: other
      type: Microsoft.Xna.Framework.Graphics.VertexElement
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified <xref href=\"Microsoft.Xna.Framework.Graphics.VertexElement\" data-throw-if-not-resolved=\"false\"></xref> is equal to this\ninstance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n"
    content.vb: Public Function Equals(other As VertexElement) As Boolean
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Graphics.VertexElement}.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  id: op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: Equality(VertexElement, VertexElement)
  nameWithType: VertexElement.Equality(VertexElement, VertexElement)
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Equality(Microsoft.Xna.Framework.Graphics.VertexElement, Microsoft.Xna.Framework.Graphics.VertexElement)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 158
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nCompares two <xref href=\"Microsoft.Xna.Framework.Graphics.VertexElement\" data-throw-if-not-resolved=\"false\"></xref> instances to determine whether they are the\nsame.\n"
  example: []
  syntax:
    content: public static bool operator ==(VertexElement left, VertexElement right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Graphics.VertexElement
      description: The first instance.
    - id: right
      type: Microsoft.Xna.Framework.Graphics.VertexElement
      description: The second instance.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">left</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">right</code> are\nthe same; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n"
    content.vb: Public Shared Operator =(left As VertexElement, right As VertexElement) As Boolean
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  id: op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)
  parent: Microsoft.Xna.Framework.Graphics.VertexElement
  langs:
  - csharp
  - vb
  name: Inequality(VertexElement, VertexElement)
  nameWithType: VertexElement.Inequality(VertexElement, VertexElement)
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Inequality(Microsoft.Xna.Framework.Graphics.VertexElement, Microsoft.Xna.Framework.Graphics.VertexElement)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexElement.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Graphics/Vertices/VertexElement.cs
    startLine: 173
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nCompares two <xref href=\"Microsoft.Xna.Framework.Graphics.VertexElement\" data-throw-if-not-resolved=\"false\"></xref> instances to determine whether they are\ndifferent.\n"
  example: []
  syntax:
    content: public static bool operator !=(VertexElement left, VertexElement right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Graphics.VertexElement
      description: The first instance.
    - id: right
      type: Microsoft.Xna.Framework.Graphics.VertexElement
      description: The second instance.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">left</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">right</code> are\nthe different; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n"
    content.vb: Public Shared Operator <>(left As VertexElement, right As VertexElement) As Boolean
  overload: Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.IEquatable{Microsoft.Xna.Framework.Graphics.VertexElement}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Graphics.VertexElement}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<VertexElement>
  nameWithType: IEquatable<VertexElement>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Graphics.VertexElement>
  nameWithType.vb: IEquatable(Of VertexElement)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Graphics.VertexElement)
  name.vb: IEquatable(Of VertexElement)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Graphics.VertexElement
    name: VertexElement
    nameWithType: VertexElement
    fullName: Microsoft.Xna.Framework.Graphics.VertexElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Graphics.VertexElement
    name: VertexElement
    nameWithType: VertexElement
    fullName: Microsoft.Xna.Framework.Graphics.VertexElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.Offset*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.Offset
  isExternal: false
  name: Offset
  nameWithType: VertexElement.Offset
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Offset
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat
  isExternal: false
  name: VertexElementFormat
  nameWithType: VertexElement.VertexElementFormat
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat
- uid: Microsoft.Xna.Framework.Graphics.VertexElementFormat
  commentId: T:Microsoft.Xna.Framework.Graphics.VertexElementFormat
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: VertexElementFormat
  nameWithType: VertexElementFormat
  fullName: Microsoft.Xna.Framework.Graphics.VertexElementFormat
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage
  isExternal: false
  name: VertexElementUsage
  nameWithType: VertexElement.VertexElementUsage
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage
- uid: Microsoft.Xna.Framework.Graphics.VertexElementUsage
  commentId: T:Microsoft.Xna.Framework.Graphics.VertexElementUsage
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: VertexElementUsage
  nameWithType: VertexElementUsage
  fullName: Microsoft.Xna.Framework.Graphics.VertexElementUsage
- uid: Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])
  commentId: M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex
  isExternal: false
  name: UsageIndex
  nameWithType: VertexElement.UsageIndex
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex
- uid: Microsoft.Xna.Framework.Graphics.VertexElement
  commentId: T:Microsoft.Xna.Framework.Graphics.VertexElement
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: VertexElement
  nameWithType: VertexElement
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor
  isExternal: false
  name: VertexElement
  nameWithType: VertexElement.VertexElement
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.VertexElement
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: VertexElement.GetHashCode
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.ToString
  isExternal: false
  name: ToString
  nameWithType: VertexElement.ToString
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.ToString
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.Equals
  isExternal: false
  name: Equals
  nameWithType: VertexElement.Equals
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{Microsoft.Xna.Framework.Graphics.VertexElement}.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Graphics.VertexElement}.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  parent: System.IEquatable{Microsoft.Xna.Framework.Graphics.VertexElement}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(VertexElement)
  nameWithType: IEquatable<VertexElement>.Equals(VertexElement)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Graphics.VertexElement>.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  nameWithType.vb: IEquatable(Of VertexElement).Equals(VertexElement)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Graphics.VertexElement).Equals(Microsoft.Xna.Framework.Graphics.VertexElement)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<VertexElement>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Graphics.VertexElement>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Graphics.VertexElement
    name: VertexElement
    nameWithType: VertexElement
    fullName: Microsoft.Xna.Framework.Graphics.VertexElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of VertexElement).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Graphics.VertexElement).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Graphics.VertexElement
    name: VertexElement
    nameWithType: VertexElement
    fullName: Microsoft.Xna.Framework.Graphics.VertexElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality
  isExternal: false
  name: Equality
  nameWithType: VertexElement.Equality
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Equality
- uid: Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: VertexElement.Inequality
  fullName: Microsoft.Xna.Framework.Graphics.VertexElement.Inequality
