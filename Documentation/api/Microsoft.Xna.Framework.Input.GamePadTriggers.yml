### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers
  commentId: T:Microsoft.Xna.Framework.Input.GamePadTriggers
  id: GamePadTriggers
  parent: Microsoft.Xna.Framework.Input
  children:
  - Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor(System.Single,System.Single)
  - Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)
  - Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode
  - Microsoft.Xna.Framework.Input.GamePadTriggers.Left
  - Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  - Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  - Microsoft.Xna.Framework.Input.GamePadTriggers.Right
  - Microsoft.Xna.Framework.Input.GamePadTriggers.ToString
  langs:
  - csharp
  - vb
  name: GamePadTriggers
  nameWithType: GamePadTriggers
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GamePadTriggers
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 9
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nA struct that countains information on the left and the right trigger buttons.\n"
  example: []
  syntax:
    content: public struct GamePadTriggers
    content.vb: Public Structure GamePadTriggers
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.Left
  commentId: P:Microsoft.Xna.Framework.Input.GamePadTriggers.Left
  id: Left
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: GamePadTriggers.Left
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Left
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Left
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 15
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the position of the left trigger.\n"
  example: []
  syntax:
    content: public float Left { get; }
    parameters: []
    return:
      type: System.Single
      description: A value from 0.0f to 1.0f representing left trigger.
    content.vb: Public ReadOnly Property Left As Single
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.Left*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.Right
  commentId: P:Microsoft.Xna.Framework.Input.GamePadTriggers.Right
  id: Right
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: GamePadTriggers.Right
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Right
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Right
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 21
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the position of the right trigger.\n"
  example: []
  syntax:
    content: public float Right { get; }
    parameters: []
    return:
      type: System.Single
      description: A value from 0.0f to 1.0f representing right trigger.
    content.vb: Public ReadOnly Property Right As Single
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.Right*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor(System.Single,System.Single)
  id: '#ctor(System.Single,System.Single)'
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: GamePadTriggers(Single, Single)
  nameWithType: GamePadTriggers.GamePadTriggers(Single, Single)
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.GamePadTriggers(System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 28
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Xna.Framework.Input.GamePadTriggers\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public GamePadTriggers(float leftTrigger, float rightTrigger)
    parameters:
    - id: leftTrigger
      type: System.Single
      description: The position of the left trigger, the value will get clamped between 0.0f and 1.0f.
    - id: rightTrigger
      type: System.Single
      description: The position of the right trigger, the value will get clamped between 0.0f and 1.0f.
    content.vb: Public Sub New(leftTrigger As Single, rightTrigger As Single)
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  id: op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: Equality(GamePadTriggers, GamePadTriggers)
  nameWithType: GamePadTriggers.Equality(GamePadTriggers, GamePadTriggers)
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Equality(Microsoft.Xna.Framework.Input.GamePadTriggers, Microsoft.Xna.Framework.Input.GamePadTriggers)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 40
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether two specified instances of <xref href=\"Microsoft.Xna.Framework.Input.GamePadTriggers\" data-throw-if-not-resolved=\"false\"></xref> are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(GamePadTriggers left, GamePadTriggers right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadTriggers
      description: The first object to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadTriggers
      description: The second object to compare.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">left</code> and <code data-dev-comment-type="paramref" class="paramref">right</code> are equal; otherwise, false.
    content.vb: Public Shared Operator =(left As GamePadTriggers, right As GamePadTriggers) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  id: op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: Inequality(GamePadTriggers, GamePadTriggers)
  nameWithType: GamePadTriggers.Inequality(GamePadTriggers, GamePadTriggers)
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers, Microsoft.Xna.Framework.Input.GamePadTriggers)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 51
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether two specified instances of <xref href=\"Microsoft.Xna.Framework.Input.GamePadTriggers\" data-throw-if-not-resolved=\"false\"></xref> are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(GamePadTriggers left, GamePadTriggers right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadTriggers
      description: The first object to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadTriggers
      description: The second object to compare.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">left</code> and <code data-dev-comment-type="paramref" class="paramref">right</code> are not equal; otherwise, false.
    content.vb: Public Shared Operator <>(left As GamePadTriggers, right As GamePadTriggers) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: GamePadTriggers.Equals(Object)
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 61
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns a value indicating whether this instance is equal to a specified object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare to this instance.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">obj</code> is a <xref href="Microsoft.Xna.Framework.Input.GamePadTriggers" data-throw-if-not-resolved="false"></xref> and has the same value as this instance; otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GamePadTriggers.GetHashCode()
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 71
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nServes as a hash function for a <xref href=\"Microsoft.Xna.Framework.Input.GamePadTriggers\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a

        hash table.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.ToString
  commentId: M:Microsoft.Xna.Framework.Input.GamePadTriggers.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Input.GamePadTriggers
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GamePadTriggers.ToString()
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadTriggers.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Input/GamePadTriggers.cs
    startLine: 83
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"Microsoft.Xna.Framework.Input.GamePadTriggers\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="Microsoft.Xna.Framework.Input.GamePadTriggers" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Input.GamePadTriggers.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: false
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.Left*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.Left
  isExternal: false
  name: Left
  nameWithType: GamePadTriggers.Left
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Left
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.Right*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.Right
  isExternal: false
  name: Right
  nameWithType: GamePadTriggers.Right
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Right
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers
  commentId: T:Microsoft.Xna.Framework.Input.GamePadTriggers
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadTriggers
  nameWithType: GamePadTriggers
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor
  isExternal: false
  name: GamePadTriggers
  nameWithType: GamePadTriggers.GamePadTriggers
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.GamePadTriggers
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality
  isExternal: false
  name: Equality
  nameWithType: GamePadTriggers.Equality
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: GamePadTriggers.Inequality
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.Equals
  isExternal: false
  name: Equals
  nameWithType: GamePadTriggers.Equals
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: GamePadTriggers.GetHashCode
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadTriggers.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadTriggers.ToString
  isExternal: false
  name: ToString
  nameWithType: GamePadTriggers.ToString
  fullName: Microsoft.Xna.Framework.Input.GamePadTriggers.ToString
