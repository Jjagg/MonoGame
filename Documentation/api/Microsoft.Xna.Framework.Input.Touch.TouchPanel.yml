### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchPanel
  id: TouchPanel
  parent: Microsoft.Xna.Framework.Input.Touch
  children:
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState(Microsoft.Xna.Framework.GameWindow)
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture
  - Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle
  langs:
  - csharp
  - vb
  name: TouchPanel
  nameWithType: TouchPanel
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TouchPanel
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 47
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nAllows retrieval of information from Touch Panel device.\n"
  example: []
  syntax:
    content: public static class TouchPanel
    content.vb: Public Module TouchPanel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState
  id: GetState
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: GetState()
  nameWithType: TouchPanel.GetState()
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetState
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 55
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nGets the current state of the touch panel.\n"
  example: []
  syntax:
    content: public static TouchCollection GetState()
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchCollection
      description: <xref href="Microsoft.Xna.Framework.Input.Touch.TouchCollection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function GetState As TouchCollection
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState(Microsoft.Xna.Framework.GameWindow)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState(Microsoft.Xna.Framework.GameWindow)
  id: GetState(Microsoft.Xna.Framework.GameWindow)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: GetState(GameWindow)
  nameWithType: TouchPanel.GetState(GameWindow)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState(Microsoft.Xna.Framework.GameWindow)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetState
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 60
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  syntax:
    content: public static TouchPanelState GetState(GameWindow window)
    parameters:
    - id: window
      type: Microsoft.Xna.Framework.GameWindow
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchPanelState
    content.vb: Public Shared Function GetState(window As GameWindow) As TouchPanelState
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities
  id: GetCapabilities
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: GetCapabilities()
  nameWithType: TouchPanel.GetCapabilities()
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetCapabilities
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 65
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  syntax:
    content: public static TouchPanelCapabilities GetCapabilities()
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities
    content.vb: Public Shared Function GetCapabilities As TouchPanelCapabilities
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture
  id: ReadGesture
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: ReadGesture()
  nameWithType: TouchPanel.ReadGesture()
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ReadGesture
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 84
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns the next available gesture on touch panel device.\n"
  example: []
  syntax:
    content: public static GestureSample ReadGesture()
    return:
      type: Microsoft.Xna.Framework.Input.Touch.GestureSample
      description: <xref href="Microsoft.Xna.Framework.Input.Touch.GestureSample" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function ReadGesture As GestureSample
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle
  id: WindowHandle
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: WindowHandle
  nameWithType: TouchPanel.WindowHandle
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: WindowHandle
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 93
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nThe window handle of the touch panel. Purely for Xna compatibility.\n"
  example: []
  syntax:
    content: public static IntPtr WindowHandle { get; set; }
    parameters: []
    return:
      type: System.IntPtr
    content.vb: Public Shared Property WindowHandle As IntPtr
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight
  id: DisplayHeight
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: DisplayHeight
  nameWithType: TouchPanel.DisplayHeight
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DisplayHeight
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 102
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nGets or sets the display height of the touch panel.\n"
  example: []
  syntax:
    content: public static int DisplayHeight { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared Property DisplayHeight As Integer
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation
  id: DisplayOrientation
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: DisplayOrientation
  nameWithType: TouchPanel.DisplayOrientation
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DisplayOrientation
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 111
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nGets or sets the display orientation of the touch panel.\n"
  example: []
  syntax:
    content: public static DisplayOrientation DisplayOrientation { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.DisplayOrientation
    content.vb: Public Shared Property DisplayOrientation As DisplayOrientation
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth
  id: DisplayWidth
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: DisplayWidth
  nameWithType: TouchPanel.DisplayWidth
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DisplayWidth
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 120
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nGets or sets the display width of the touch panel.\n"
  example: []
  syntax:
    content: public static int DisplayWidth { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared Property DisplayWidth As Integer
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures
  id: EnabledGestures
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: EnabledGestures
  nameWithType: TouchPanel.EnabledGestures
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: EnabledGestures
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 129
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nGets or sets enabled gestures.\n"
  example: []
  syntax:
    content: public static GestureType EnabledGestures { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Touch.GestureType
    content.vb: Public Shared Property EnabledGestures As GestureType
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint
  id: EnableMouseTouchPoint
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: EnableMouseTouchPoint
  nameWithType: TouchPanel.EnableMouseTouchPoint
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: EnableMouseTouchPoint
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 135
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  syntax:
    content: public static bool EnableMouseTouchPoint { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property EnableMouseTouchPoint As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures
  id: EnableMouseGestures
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: EnableMouseGestures
  nameWithType: TouchPanel.EnableMouseGestures
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: EnableMouseGestures
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 141
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  syntax:
    content: public static bool EnableMouseGestures { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property EnableMouseGestures As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable
  id: IsGestureAvailable
  parent: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  langs:
  - csharp
  - vb
  name: IsGestureAvailable
  nameWithType: TouchPanel.IsGestureAvailable
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchPanel.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsGestureAvailable
    path: ../MonoGame.Framework/Input/Touch/TouchPanel.cs
    startLine: 150
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns true if a touch gesture is available.\n"
  example: []
  syntax:
    content: public static bool IsGestureAvailable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsGestureAvailable As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Microsoft.Xna.Framework.Input.Touch
  commentId: N:Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: Microsoft.Xna.Framework.Input.Touch
  nameWithType: Microsoft.Xna.Framework.Input.Touch
  fullName: Microsoft.Xna.Framework.Input.Touch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchCollection
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: TouchCollection
  nameWithType: TouchCollection
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState
  isExternal: false
  name: GetState
  nameWithType: TouchPanel.GetState
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState
- uid: Microsoft.Xna.Framework.GameWindow
  commentId: T:Microsoft.Xna.Framework.GameWindow
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: GameWindow
  nameWithType: GameWindow
  fullName: Microsoft.Xna.Framework.GameWindow
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanelState
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchPanelState
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: TouchPanelState
  nameWithType: TouchPanelState
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanelState
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities
  isExternal: false
  name: GetCapabilities
  nameWithType: TouchPanel.GetCapabilities
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetCapabilities
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: TouchPanelCapabilities
  nameWithType: TouchPanelCapabilities
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities
- uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
  commentId: T:Microsoft.Xna.Framework.Input.Touch.GestureSample
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: GestureSample
  nameWithType: GestureSample
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureSample
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture
  isExternal: false
  name: ReadGesture
  nameWithType: TouchPanel.ReadGesture
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle
  isExternal: false
  name: WindowHandle
  nameWithType: TouchPanel.WindowHandle
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight
  isExternal: false
  name: DisplayHeight
  nameWithType: TouchPanel.DisplayHeight
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation
  isExternal: false
  name: DisplayOrientation
  nameWithType: TouchPanel.DisplayOrientation
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation
- uid: Microsoft.Xna.Framework.DisplayOrientation
  commentId: T:Microsoft.Xna.Framework.DisplayOrientation
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: DisplayOrientation
  nameWithType: DisplayOrientation
  fullName: Microsoft.Xna.Framework.DisplayOrientation
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth
  isExternal: false
  name: DisplayWidth
  nameWithType: TouchPanel.DisplayWidth
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures
  isExternal: false
  name: EnabledGestures
  nameWithType: TouchPanel.EnabledGestures
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures
- uid: Microsoft.Xna.Framework.Input.Touch.GestureType
  commentId: T:Microsoft.Xna.Framework.Input.Touch.GestureType
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: GestureType
  nameWithType: GestureType
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureType
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint
  isExternal: false
  name: EnableMouseTouchPoint
  nameWithType: TouchPanel.EnableMouseTouchPoint
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseTouchPoint
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures
  isExternal: false
  name: EnableMouseGestures
  nameWithType: TouchPanel.EnableMouseGestures
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnableMouseGestures
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable
  isExternal: false
  name: IsGestureAvailable
  nameWithType: TouchPanel.IsGestureAvailable
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable
