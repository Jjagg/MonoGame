### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.SoundEffect
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffect
  id: SoundEffect
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  - Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels,System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance
  - Microsoft.Xna.Framework.Audio.SoundEffect.Dispose
  - Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale
  - Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale
  - Microsoft.Xna.Framework.Audio.SoundEffect.Duration
  - Microsoft.Xna.Framework.Audio.SoundEffect.Finalize
  - Microsoft.Xna.Framework.Audio.SoundEffect.FromStream(System.IO.Stream)
  - Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration(System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  - Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes(System.TimeSpan,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  - Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed
  - Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume
  - Microsoft.Xna.Framework.Audio.SoundEffect.Name
  - Microsoft.Xna.Framework.Audio.SoundEffect.Play
  - Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound
  langs:
  - csharp
  - vb
  name: SoundEffect
  nameWithType: SoundEffect
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.OpenAL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SoundEffect
    path: ../MonoGame.Framework/Audio/SoundEffect.OpenAL.cs
    startLine: 17
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Represents a loaded sound resource.
  remarks: "\n<p>A SoundEffect represents the buffer used to hold audio data and metadata. SoundEffectInstances are used to play from SoundEffects. Multiple SoundEffectInstance objects can be created and played from the same SoundEffect object.</p>\n<p>The only limit on the number of loaded SoundEffects is restricted by available memory. When a SoundEffect is disposed, all SoundEffectInstances created from it will become invalid.</p>\n<p>SoundEffect.Play() can be used for &apos;fire and forget&apos; sounds. If advanced playback controls like volume or pitch is required, use SoundEffect.CreateInstance().</p>\n"
  example: []
  syntax:
    content: 'public sealed class SoundEffect : IDisposable'
    content.vb: >-
      Public NotInheritable Class SoundEffect
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  id: '#ctor(System.Byte[],System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)'
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: SoundEffect(Byte[], Int32, AudioChannels)
  nameWithType: SoundEffect.SoundEffect(Byte[], Int32, AudioChannels)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.SoundEffect(System.Byte[], System.Int32, Microsoft.Xna.Framework.Audio.AudioChannels)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 88
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nCreate a sound effect.\n"
  remarks: This only supports uncompressed 16bit PCM wav data.
  example: []
  syntax:
    content: public SoundEffect(byte[] buffer, int sampleRate, AudioChannels channels)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer with the sound data.
    - id: sampleRate
      type: System.Int32
      description: The sound data sample rate in hertz.
    - id: channels
      type: Microsoft.Xna.Framework.Audio.AudioChannels
      description: The number of channels in the sound data.
    content.vb: Public Sub New(buffer As Byte(), sampleRate As Integer, channels As AudioChannels)
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.#ctor*
  nameWithType.vb: SoundEffect.SoundEffect(Byte(), Int32, AudioChannels)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Audio.SoundEffect.SoundEffect(System.Byte(), System.Int32, Microsoft.Xna.Framework.Audio.AudioChannels)
  name.vb: SoundEffect(Byte(), Int32, AudioChannels)
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels,System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels,System.Int32,System.Int32)
  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels,System.Int32,System.Int32)'
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: SoundEffect(Byte[], Int32, Int32, Int32, AudioChannels, Int32, Int32)
  nameWithType: SoundEffect.SoundEffect(Byte[], Int32, Int32, Int32, AudioChannels, Int32, Int32)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.SoundEffect(System.Byte[], System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Audio.AudioChannels, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 104
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nCreate a sound effect.\n"
  remarks: This only supports uncompressed 16bit PCM wav data.
  example: []
  syntax:
    content: public SoundEffect(byte[] buffer, int offset, int count, int sampleRate, AudioChannels channels, int loopStart, int loopLength)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer with the sound data.
    - id: offset
      type: System.Int32
      description: The offset to the start of the sound data in bytes.
    - id: count
      type: System.Int32
      description: The length of the sound data in bytes.
    - id: sampleRate
      type: System.Int32
      description: The sound data sample rate in hertz.
    - id: channels
      type: Microsoft.Xna.Framework.Audio.AudioChannels
      description: The number of channels in the sound data.
    - id: loopStart
      type: System.Int32
      description: The position where the sound should begin looping in samples.
    - id: loopLength
      type: System.Int32
      description: The duration of the sound data loop in samples.
    content.vb: Public Sub New(buffer As Byte(), offset As Integer, count As Integer, sampleRate As Integer, channels As AudioChannels, loopStart As Integer, loopLength As Integer)
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.#ctor*
  nameWithType.vb: SoundEffect.SoundEffect(Byte(), Int32, Int32, Int32, AudioChannels, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Audio.SoundEffect.SoundEffect(System.Byte(), System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Audio.AudioChannels, System.Int32, System.Int32)
  name.vb: SoundEffect(Byte(), Int32, Int32, Int32, AudioChannels, Int32, Int32)
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Finalize
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.Finalize
  id: Finalize
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: SoundEffect.Finalize()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Finalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Finalize
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 156
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReleases unmanaged resources and performs other cleanup operations before the\n<xref href=\"Microsoft.Xna.Framework.Audio.SoundEffect\" data-throw-if-not-resolved=\"false\"></xref> is reclaimed by garbage collection.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance
  id: CreateInstance
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: CreateInstance()
  nameWithType: SoundEffect.CreateInstance()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CreateInstance
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 170
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nCreates a new SoundEffectInstance for this SoundEffect.\n"
  remarks: Creating a SoundEffectInstance before calling SoundEffectInstance.Play() allows you to access advanced playback features, such as volume, pitch, and 3D positioning.
  example: []
  syntax:
    content: public SoundEffectInstance CreateInstance()
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffectInstance
      description: A new SoundEffectInstance for this SoundEffect.
    content.vb: Public Function CreateInstance As SoundEffectInstance
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.FromStream(System.IO.Stream)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.FromStream(System.IO.Stream)
  id: FromStream(System.IO.Stream)
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: FromStream(Stream)
  nameWithType: SoundEffect.FromStream(Stream)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.FromStream(System.IO.Stream)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: FromStream
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 198
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nCreates a new SoundEffect object based on the specified data stream.\n"
  remarks: >
    The stream must point to the head of a valid wave file in the RIFF bitstream format.  The formats supported are:

    <ul><li>8-bit unsigned PCM16-bit signed PCM24-bit signed PCM32-bit IEEE float PCMMS-ADPCM 4-bit compressedIMA/ADPCM (IMA4) 4-bit compressed</li></ul>
  example: []
  syntax:
    content: public static SoundEffect FromStream(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: A stream containing the wave data.
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffect
      description: A new SoundEffect object.
    content.vb: Public Shared Function FromStream(stream As Stream) As SoundEffect
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.FromStream*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration(System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration(System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  id: GetSampleDuration(System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: GetSampleDuration(Int32, Int32, AudioChannels)
  nameWithType: SoundEffect.GetSampleDuration(Int32, Int32, AudioChannels)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration(System.Int32, System.Int32, Microsoft.Xna.Framework.Audio.AudioChannels)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetSampleDuration
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 213
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the duration for 16-bit PCM audio.\n"
  example: []
  syntax:
    content: public static TimeSpan GetSampleDuration(int sizeInBytes, int sampleRate, AudioChannels channels)
    parameters:
    - id: sizeInBytes
      type: System.Int32
      description: The length of the audio data in bytes.
    - id: sampleRate
      type: System.Int32
      description: Sample rate, in Hertz (Hz). Must be between 8000 Hz and 48000 Hz
    - id: channels
      type: Microsoft.Xna.Framework.Audio.AudioChannels
      description: Number of channels in the audio data.
    return:
      type: System.TimeSpan
      description: The duration of the audio data.
    content.vb: Public Shared Function GetSampleDuration(sizeInBytes As Integer, sampleRate As Integer, channels As AudioChannels) As TimeSpan
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes(System.TimeSpan,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes(System.TimeSpan,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  id: GetSampleSizeInBytes(System.TimeSpan,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: GetSampleSizeInBytes(TimeSpan, Int32, AudioChannels)
  nameWithType: SoundEffect.GetSampleSizeInBytes(TimeSpan, Int32, AudioChannels)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes(System.TimeSpan, System.Int32, Microsoft.Xna.Framework.Audio.AudioChannels)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetSampleSizeInBytes
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 244
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the data size in bytes for 16bit PCM audio.\n"
  example: []
  syntax:
    content: public static int GetSampleSizeInBytes(TimeSpan duration, int sampleRate, AudioChannels channels)
    parameters:
    - id: duration
      type: System.TimeSpan
      description: The total duration of the audio data.
    - id: sampleRate
      type: System.Int32
      description: Sample rate, in Hertz (Hz), of audio data. Must be between 8,000 and 48,000 Hz.
    - id: channels
      type: Microsoft.Xna.Framework.Audio.AudioChannels
      description: Number of channels in the audio data.
    return:
      type: System.Int32
      description: The size in bytes of a single sample of audio data.
    content.vb: Public Shared Function GetSampleSizeInBytes(duration As TimeSpan, sampleRate As Integer, channels As AudioChannels) As Integer
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Play
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.Play
  id: Play
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: Play()
  nameWithType: SoundEffect.Play()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Play()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Play
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 274
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets an internal SoundEffectInstance and plays it.
  remarks: "\n<p>Play returns false if more SoundEffectInstances are currently playing then the platform allows.</p>\n<p>To loop a sound or apply 3D effects, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead.</p>\n<p>SoundEffectInstances used by SoundEffect.Play() are pooled internally.</p>\n"
  example: []
  syntax:
    content: public bool Play()
    return:
      type: System.Boolean
      description: True if a SoundEffectInstance was successfully played, false if not.
    content.vb: Public Function Play As Boolean
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.Play*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single,System.Single,System.Single)
  id: Play(System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: Play(Single, Single, Single)
  nameWithType: SoundEffect.Play(Single, Single, Single)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Play
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 295
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets an internal SoundEffectInstance and plays it with the specified volume, pitch, and panning.
  remarks: "\n<p>Play returns false if more SoundEffectInstances are currently playing then the platform allows.</p>\n<p>To apply looping or simulate 3D audio, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead.</p>\n<p>SoundEffectInstances used by SoundEffect.Play() are pooled internally.</p>\n"
  example: []
  syntax:
    content: public bool Play(float volume, float pitch, float pan)
    parameters:
    - id: volume
      type: System.Single
      description: Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume.
    - id: pitch
      type: System.Single
      description: Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave).
    - id: pan
      type: System.Single
      description: Panning, ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker).
    return:
      type: System.Boolean
      description: True if a SoundEffectInstance was successfully created and played, false if not.
    content.vb: Public Function Play(volume As Single, pitch As Single, pan As Single) As Boolean
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.Play*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Duration
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffect.Duration
  id: Duration
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: SoundEffect.Duration
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Duration
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Duration
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 330
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets the duration of the SoundEffect.
  example: []
  syntax:
    content: public TimeSpan Duration { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property Duration As TimeSpan
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.Duration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Name
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffect.Name
  id: Name
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: SoundEffect.Name
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Name
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Name
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 333
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets or sets the asset name of the SoundEffect.
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume
  id: MasterVolume
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: MasterVolume
  nameWithType: SoundEffect.MasterVolume
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: MasterVolume
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 351
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets or sets the master volume scale applied to all SoundEffectInstances.\n"
  remarks: "\n<p>Each SoundEffectInstance has its own Volume property that is independent to SoundEffect.MasterVolume. During playback SoundEffectInstance.Volume is multiplied by SoundEffect.MasterVolume.</p>\n<p>This property is used to adjust the volume on all current and newly created SoundEffectInstances. The volume of an individual SoundEffectInstance can be adjusted on its own.</p>\n"
  example: []
  syntax:
    content: public static float MasterVolume { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared Property MasterVolume As Single
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale
  id: DistanceScale
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: DistanceScale
  nameWithType: SoundEffect.DistanceScale
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DistanceScale
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 375
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets or sets the scale of distance calculations.\n"
  remarks: "\n<p>DistanceScale defaults to 1.0 and must be greater than 0.0.</p>\n<p>Higher values reduce the rate of falloff between the sound and listener.</p>\n"
  example: []
  syntax:
    content: public static float DistanceScale { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared Property DistanceScale As Single
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale
  id: DopplerScale
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: DopplerScale
  nameWithType: SoundEffect.DopplerScale
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DopplerScale
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 396
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets or sets the scale of Doppler calculations applied to sounds.\n"
  remarks: "\n<p>DopplerScale defaults to 1.0 and must be greater or equal to 0.0</p>\n<p>Affects the relative velocity of emitters and listeners.</p>\n<p>Higher values more dramatically shift the pitch for the given relative velocity of the emitter and listener.</p>\n"
  example: []
  syntax:
    content: public static float DopplerScale { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared Property DopplerScale As Single
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound
  id: SpeedOfSound
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: SpeedOfSound
  nameWithType: SoundEffect.SpeedOfSound
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SpeedOfSound
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 417
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Returns the speed of sound used when calculating the Doppler effect..
  remarks: "\n<p>Defaults to 343.5. Value is measured in meters per second.</p>\n<p>Has no effect on distance attenuation.</p>\n"
  example: []
  syntax:
    content: public static float SpeedOfSound { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared Property SpeedOfSound As Single
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed
  id: IsDisposed
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: SoundEffect.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsDisposed
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 434
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Indicates whether the object is disposed.
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Dispose
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffect.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.Audio.SoundEffect
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SoundEffect.Dispose()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/SoundEffect.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Audio/SoundEffect.cs
    startLine: 437
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Releases the resources held by this <xref href="Microsoft.Xna.Framework.Audio.SoundEffect" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.Audio.SoundEffect.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.#ctor
  isExternal: false
  name: SoundEffect
  nameWithType: SoundEffect.SoundEffect
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.SoundEffect
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Audio.AudioChannels
  commentId: T:Microsoft.Xna.Framework.Audio.AudioChannels
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioChannels
  nameWithType: AudioChannels
  fullName: Microsoft.Xna.Framework.Audio.AudioChannels
- uid: Microsoft.Xna.Framework.Audio.SoundEffect
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffect
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: SoundEffect
  nameWithType: SoundEffect
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Finalize*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.Finalize
  isExternal: false
  name: Finalize
  nameWithType: SoundEffect.Finalize
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Finalize
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance
  isExternal: false
  name: CreateInstance
  nameWithType: SoundEffect.CreateInstance
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffectInstance
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: SoundEffectInstance
  nameWithType: SoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.FromStream*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.FromStream
  isExternal: false
  name: FromStream
  nameWithType: SoundEffect.FromStream
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.FromStream
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration
  isExternal: false
  name: GetSampleDuration
  nameWithType: SoundEffect.GetSampleDuration
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes
  isExternal: false
  name: GetSampleSizeInBytes
  nameWithType: SoundEffect.GetSampleSizeInBytes
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Play*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.Play
  isExternal: false
  name: Play
  nameWithType: SoundEffect.Play
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Play
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Duration*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.Duration
  isExternal: false
  name: Duration
  nameWithType: SoundEffect.Duration
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Duration
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Name*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.Name
  isExternal: false
  name: Name
  nameWithType: SoundEffect.Name
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume
  isExternal: false
  name: MasterVolume
  nameWithType: SoundEffect.MasterVolume
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale
  isExternal: false
  name: DistanceScale
  nameWithType: SoundEffect.DistanceScale
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale
  isExternal: false
  name: DopplerScale
  nameWithType: SoundEffect.DopplerScale
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound
  isExternal: false
  name: SpeedOfSound
  nameWithType: SoundEffect.SpeedOfSound
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed
  isExternal: false
  name: IsDisposed
  nameWithType: SoundEffect.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed
- uid: Microsoft.Xna.Framework.Audio.SoundEffect.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundEffect.Dispose
  isExternal: false
  name: Dispose
  nameWithType: SoundEffect.Dispose
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
