### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  id: Rectangle
  parent: Microsoft.Xna.Framework
  children:
  - Microsoft.Xna.Framework.Rectangle.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Rectangle.Bottom
  - Microsoft.Xna.Framework.Rectangle.Center
  - Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)
  - Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)
  - Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  - Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2@,System.Boolean@)
  - Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Rectangle.Contains(System.Single,System.Single)
  - Microsoft.Xna.Framework.Rectangle.Empty
  - Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)
  - Microsoft.Xna.Framework.Rectangle.Equals(System.Object)
  - Microsoft.Xna.Framework.Rectangle.GetHashCode
  - Microsoft.Xna.Framework.Rectangle.Height
  - Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Rectangle.Inflate(System.Single,System.Single)
  - Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  - Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  - Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)
  - Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  - Microsoft.Xna.Framework.Rectangle.IsEmpty
  - Microsoft.Xna.Framework.Rectangle.Left
  - Microsoft.Xna.Framework.Rectangle.Location
  - Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Rectangle.Offset(System.Single,System.Single)
  - Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  - Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  - Microsoft.Xna.Framework.Rectangle.Right
  - Microsoft.Xna.Framework.Rectangle.Size
  - Microsoft.Xna.Framework.Rectangle.Top
  - Microsoft.Xna.Framework.Rectangle.ToString
  - Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  - Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  - Microsoft.Xna.Framework.Rectangle.Width
  - Microsoft.Xna.Framework.Rectangle.X
  - Microsoft.Xna.Framework.Rectangle.Y
  langs:
  - csharp
  - vb
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Rectangle
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDescribes a 2D-rectangle. \n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public struct Rectangle : IEquatable<Rectangle>
    content.vb: >-
      <DataContract>

      Public Structure Rectangle
          Implements IEquatable(Of Rectangle)
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Rectangle}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Rectangle.X
  commentId: F:Microsoft.Xna.Framework.Rectangle.X
  id: X
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Rectangle.X
  fullName: Microsoft.Xna.Framework.Rectangle.X
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: X
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 29
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe x coordinate of the top-left corner of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int X
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public X As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Y
  commentId: F:Microsoft.Xna.Framework.Rectangle.Y
  id: Y
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Rectangle.Y
  fullName: Microsoft.Xna.Framework.Rectangle.Y
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Y
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 35
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe y coordinate of the top-left corner of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int Y
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public Y As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Width
  commentId: F:Microsoft.Xna.Framework.Rectangle.Width
  id: Width
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: Rectangle.Width
  fullName: Microsoft.Xna.Framework.Rectangle.Width
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Width
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 41
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe width of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int Width
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public Width As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Height
  commentId: F:Microsoft.Xna.Framework.Rectangle.Height
  id: Height
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: Rectangle.Height
  fullName: Microsoft.Xna.Framework.Rectangle.Height
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Height
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 47
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe height of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int Height
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public Height As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Empty
  commentId: P:Microsoft.Xna.Framework.Rectangle.Empty
  id: Empty
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Rectangle.Empty
  fullName: Microsoft.Xna.Framework.Rectangle.Empty
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Empty
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 56
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> with X=0, Y=0, Width=0, Height=0.\n"
  example: []
  syntax:
    content: public static Rectangle Empty { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: Public Shared ReadOnly Property Empty As Rectangle
  overload: Microsoft.Xna.Framework.Rectangle.Empty*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Rectangle.Left
  commentId: P:Microsoft.Xna.Framework.Rectangle.Left
  id: Left
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: Rectangle.Left
  fullName: Microsoft.Xna.Framework.Rectangle.Left
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Left
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 64
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the x coordinate of the left edge of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Left { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Left As Integer
  overload: Microsoft.Xna.Framework.Rectangle.Left*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Rectangle.Right
  commentId: P:Microsoft.Xna.Framework.Rectangle.Right
  id: Right
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: Rectangle.Right
  fullName: Microsoft.Xna.Framework.Rectangle.Right
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Right
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 72
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the x coordinate of the right edge of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Right { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Right As Integer
  overload: Microsoft.Xna.Framework.Rectangle.Right*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Rectangle.Top
  commentId: P:Microsoft.Xna.Framework.Rectangle.Top
  id: Top
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Top
  nameWithType: Rectangle.Top
  fullName: Microsoft.Xna.Framework.Rectangle.Top
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Top
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 80
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the y coordinate of the top edge of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Top { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Top As Integer
  overload: Microsoft.Xna.Framework.Rectangle.Top*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Rectangle.Bottom
  commentId: P:Microsoft.Xna.Framework.Rectangle.Bottom
  id: Bottom
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Bottom
  nameWithType: Rectangle.Bottom
  fullName: Microsoft.Xna.Framework.Rectangle.Bottom
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Bottom
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 88
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the y coordinate of the bottom edge of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Bottom { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Bottom As Integer
  overload: Microsoft.Xna.Framework.Rectangle.Bottom*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Rectangle.IsEmpty
  commentId: P:Microsoft.Xna.Framework.Rectangle.IsEmpty
  id: IsEmpty
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Rectangle.IsEmpty
  fullName: Microsoft.Xna.Framework.Rectangle.IsEmpty
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsEmpty
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 97
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nWhether or not this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> has a <xref href=\"Microsoft.Xna.Framework.Rectangle.Width\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Microsoft.Xna.Framework.Rectangle.Height\" data-throw-if-not-resolved=\"false\"></xref> of 0, and a <xref href=\"Microsoft.Xna.Framework.Rectangle.Location\" data-throw-if-not-resolved=\"false\"></xref> of (0, 0).\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.IsEmpty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Rectangle.Location
  commentId: P:Microsoft.Xna.Framework.Rectangle.Location
  id: Location
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Rectangle.Location
  fullName: Microsoft.Xna.Framework.Rectangle.Location
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Location
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 108
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe top-left coordinates of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Point Location { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public Property Location As Point
  overload: Microsoft.Xna.Framework.Rectangle.Location*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Size
  commentId: P:Microsoft.Xna.Framework.Rectangle.Size
  id: Size
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Rectangle.Size
  fullName: Microsoft.Xna.Framework.Rectangle.Size
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Size
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 124
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe width-height coordinates of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Point Size { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public Property Size As Point
  overload: Microsoft.Xna.Framework.Rectangle.Size*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Center
  commentId: P:Microsoft.Xna.Framework.Rectangle.Center
  id: Center
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: Rectangle.Center
  fullName: Microsoft.Xna.Framework.Rectangle.Center
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Center
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 144
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nA <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> located in the center of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIf <xref href=\"Microsoft.Xna.Framework.Rectangle.Width\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Xna.Framework.Rectangle.Height\" data-throw-if-not-resolved=\"false\"></xref> is an odd number,\nthe center point will be rounded down.\n"
  example: []
  syntax:
    content: public Point Center { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property Center As Point
  overload: Microsoft.Xna.Framework.Rectangle.Center*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Rectangle(Int32, Int32, Int32, Int32)
  nameWithType: Rectangle.Rectangle(Int32, Int32, Int32, Int32)
  fullName: Microsoft.Xna.Framework.Rectangle.Rectangle(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 181
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new instance of <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> struct, with the specified\nposition, width, and height.\n"
  example: []
  syntax:
    content: public Rectangle(int x, int y, int width, int height)
    parameters:
    - id: x
      type: System.Int32
      description: The x coordinate of the top-left corner of the created <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: y
      type: System.Int32
      description: The y coordinate of the top-left corner of the created <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: width
      type: System.Int32
      description: The width of the created <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: height
      type: System.Int32
      description: The height of the created <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(x As Integer, y As Integer, width As Integer, height As Integer)
  overload: Microsoft.Xna.Framework.Rectangle.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Rectangle.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: '#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)'
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Rectangle(Point, Point)
  nameWithType: Rectangle.Rectangle(Point, Point)
  fullName: Microsoft.Xna.Framework.Rectangle.Rectangle(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 195
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new instance of <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> struct, with the specified\nlocation and size.\n"
  example: []
  syntax:
    content: public Rectangle(Point location, Point size)
    parameters:
    - id: location
      type: Microsoft.Xna.Framework.Point
      description: The x and y coordinates of the top-left corner of the created <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: size
      type: Microsoft.Xna.Framework.Point
      description: The width and height of the created <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(location As Point, size As Point)
  overload: Microsoft.Xna.Framework.Rectangle.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  commentId: M:Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  id: op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Equality(Rectangle, Rectangle)
  nameWithType: Rectangle.Equality(Rectangle, Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Equality(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Rectangle)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 213
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Rectangle a, Rectangle b)
    parameters:
    - id: a
      type: Microsoft.Xna.Framework.Rectangle
      description: <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> instance on the left of the equal sign.
    - id: b
      type: Microsoft.Xna.Framework.Rectangle
      description: <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> instance on the right of the equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator =(a As Rectangle, b As Rectangle) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  commentId: M:Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  id: op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Inequality(Rectangle, Rectangle)
  nameWithType: Rectangle.Inequality(Rectangle, Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Inequality(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Rectangle)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 224
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Rectangle a, Rectangle b)
    parameters:
    - id: a
      type: Microsoft.Xna.Framework.Rectangle
      description: <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> instance on the left of the not equal sign.
    - id: b
      type: Microsoft.Xna.Framework.Rectangle
      description: <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> instance on the right of the not equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are not equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator <>(a As Rectangle, b As Rectangle) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)
  id: Contains(System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(Int32, Int32)
  nameWithType: Rectangle.Contains(Int32, Int32)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 239
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided coordinates lie within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Contains(int x, int y)
    parameters:
    - id: x
      type: System.Int32
      description: The x coordinate of the point to check for containment.
    - id: y
      type: System.Int32
      description: The y coordinate of the point to check for containment.
    return:
      type: System.Boolean
      description: <code>true</code> if the provided coordinates lie inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise.
    content.vb: Public Function Contains(x As Integer, y As Integer) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Contains(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(System.Single,System.Single)
  id: Contains(System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(Single, Single)
  nameWithType: Rectangle.Contains(Single, Single)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 250
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided coordinates lie within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Contains(float x, float y)
    parameters:
    - id: x
      type: System.Single
      description: The x coordinate of the point to check for containment.
    - id: y
      type: System.Single
      description: The y coordinate of the point to check for containment.
    return:
      type: System.Boolean
      description: <code>true</code> if the provided coordinates lie inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise.
    content.vb: Public Function Contains(x As Single, y As Single) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)
  id: Contains(Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(Point)
  nameWithType: Rectangle.Contains(Point)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 260
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> lies within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Contains(Point value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Point
      description: The coordinates to check for inclusion in this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <code>true</code> if the provided <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> lies inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise.
    content.vb: Public Function Contains(value As Point) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)
  id: Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(ref Point, out Boolean)
  nameWithType: Rectangle.Contains(ref Point, out Boolean)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(ref Microsoft.Xna.Framework.Point, out System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 270
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> lies within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Contains(ref Point value, out bool result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Point
      description: The coordinates to check for inclusion in this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: System.Boolean
      description: <code>true</code> if the provided <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> lies inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise. As an output parameter.
    content.vb: Public Sub Contains(ByRef value As Point, ByRef result As Boolean)
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  nameWithType.vb: Rectangle.Contains(ByRef Point, ByRef Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Rectangle.Contains(ByRef Microsoft.Xna.Framework.Point, ByRef System.Boolean)
  name.vb: Contains(ByRef Point, ByRef Boolean)
- uid: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2)
  id: Contains(Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(Vector2)
  nameWithType: Rectangle.Contains(Vector2)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 280
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> lies within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Contains(Vector2 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: The coordinates to check for inclusion in this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <code>true</code> if the provided <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> lies inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise.
    content.vb: Public Function Contains(value As Vector2) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2@,System.Boolean@)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2@,System.Boolean@)
  id: Contains(Microsoft.Xna.Framework.Vector2@,System.Boolean@)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(ref Vector2, out Boolean)
  nameWithType: Rectangle.Contains(ref Vector2, out Boolean)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(ref Microsoft.Xna.Framework.Vector2, out System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 290
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> lies within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Contains(ref Vector2 value, out bool result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: The coordinates to check for inclusion in this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: System.Boolean
      description: <code>true</code> if the provided <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> lies inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise. As an output parameter.
    content.vb: Public Sub Contains(ByRef value As Vector2, ByRef result As Boolean)
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  nameWithType.vb: Rectangle.Contains(ByRef Vector2, ByRef Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Rectangle.Contains(ByRef Microsoft.Xna.Framework.Vector2, ByRef System.Boolean)
  name.vb: Contains(ByRef Vector2, ByRef Boolean)
- uid: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)
  id: Contains(Microsoft.Xna.Framework.Rectangle)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(Rectangle)
  nameWithType: Rectangle.Contains(Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 300
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> lies within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Contains(Rectangle value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Rectangle
      description: The <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> to check for inclusion in this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <code>true</code> if the provided <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>&apos;s bounds lie entirely inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise.
    content.vb: Public Function Contains(value As Rectangle) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  id: Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Contains(ref Rectangle, out Boolean)
  nameWithType: Rectangle.Contains(ref Rectangle, out Boolean)
  fullName: Microsoft.Xna.Framework.Rectangle.Contains(ref Microsoft.Xna.Framework.Rectangle, out System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 310
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the provided <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> lies within the bounds of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Contains(ref Rectangle value, out bool result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Rectangle
      description: The <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> to check for inclusion in this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: System.Boolean
      description: <code>true</code> if the provided <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>&apos;s bounds lie entirely inside this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise. As an output parameter.
    content.vb: Public Sub Contains(ByRef value As Rectangle, ByRef result As Boolean)
  overload: Microsoft.Xna.Framework.Rectangle.Contains*
  nameWithType.vb: Rectangle.Contains(ByRef Rectangle, ByRef Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Rectangle.Contains(ByRef Microsoft.Xna.Framework.Rectangle, ByRef System.Boolean)
  name.vb: Contains(ByRef Rectangle, ByRef Boolean)
- uid: Microsoft.Xna.Framework.Rectangle.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Rectangle.Equals(Object)
  fullName: Microsoft.Xna.Framework.Rectangle.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 320
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Rectangle.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)
  id: Equals(Microsoft.Xna.Framework.Rectangle)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Equals(Rectangle)
  nameWithType: Rectangle.Equals(Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 330
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(Rectangle other)
    parameters:
    - id: other
      type: Microsoft.Xna.Framework.Rectangle
      description: The <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Function Equals(other As Rectangle) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Rectangle}.Equals(Microsoft.Xna.Framework.Rectangle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Rectangle.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Rectangle.GetHashCode()
  fullName: Microsoft.Xna.Framework.Rectangle.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 339
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets the hash code of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code of this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Rectangle.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)
  id: Inflate(System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Inflate(Int32, Int32)
  nameWithType: Rectangle.Inflate(Int32, Int32)
  fullName: Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Inflate
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 357
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAdjusts the edges of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> by specified horizontal and vertical amounts. \n"
  example: []
  syntax:
    content: public void Inflate(int horizontalAmount, int verticalAmount)
    parameters:
    - id: horizontalAmount
      type: System.Int32
      description: Value to adjust the left and right edges.
    - id: verticalAmount
      type: System.Int32
      description: Value to adjust the top and bottom edges.
    content.vb: Public Sub Inflate(horizontalAmount As Integer, verticalAmount As Integer)
  overload: Microsoft.Xna.Framework.Rectangle.Inflate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Inflate(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Single,System.Single)
  id: Inflate(System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Inflate(Single, Single)
  nameWithType: Rectangle.Inflate(Single, Single)
  fullName: Microsoft.Xna.Framework.Rectangle.Inflate(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Inflate
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 370
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAdjusts the edges of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> by specified horizontal and vertical amounts. \n"
  example: []
  syntax:
    content: public void Inflate(float horizontalAmount, float verticalAmount)
    parameters:
    - id: horizontalAmount
      type: System.Single
      description: Value to adjust the left and right edges.
    - id: verticalAmount
      type: System.Single
      description: Value to adjust the top and bottom edges.
    content.vb: Public Sub Inflate(horizontalAmount As Single, verticalAmount As Single)
  overload: Microsoft.Xna.Framework.Rectangle.Inflate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)
  id: Intersects(Microsoft.Xna.Framework.Rectangle)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Intersects(Rectangle)
  nameWithType: Rectangle.Intersects(Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Intersects
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 383
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the other <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> intersects with this rectangle.\n"
  example: []
  syntax:
    content: public bool Intersects(Rectangle value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Rectangle
      description: The other rectangle for testing.
    return:
      type: System.Boolean
      description: <code>true</code> if other <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> intersects with this rectangle; <code>false</code> otherwise.
    content.vb: Public Function Intersects(value As Rectangle) As Boolean
  overload: Microsoft.Xna.Framework.Rectangle.Intersects*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  id: Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Intersects(ref Rectangle, out Boolean)
  nameWithType: Rectangle.Intersects(ref Rectangle, out Boolean)
  fullName: Microsoft.Xna.Framework.Rectangle.Intersects(ref Microsoft.Xna.Framework.Rectangle, out System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Intersects
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 397
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets whether or not the other <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> intersects with this rectangle.\n"
  example: []
  syntax:
    content: public void Intersects(ref Rectangle value, out bool result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Rectangle
      description: The other rectangle for testing.
    - id: result
      type: System.Boolean
      description: <code>true</code> if other <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> intersects with this rectangle; <code>false</code> otherwise. As an output parameter.
    content.vb: Public Sub Intersects(ByRef value As Rectangle, ByRef result As Boolean)
  overload: Microsoft.Xna.Framework.Rectangle.Intersects*
  nameWithType.vb: Rectangle.Intersects(ByRef Rectangle, ByRef Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Rectangle.Intersects(ByRef Microsoft.Xna.Framework.Rectangle, ByRef System.Boolean)
  name.vb: Intersects(ByRef Rectangle, ByRef Boolean)
- uid: Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  id: Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Intersect(Rectangle, Rectangle)
  nameWithType: Rectangle.Intersect(Rectangle, Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Intersect
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 411
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> that contains overlapping region of two other rectangles.\n"
  example: []
  syntax:
    content: public static Rectangle Intersect(Rectangle value1, Rectangle value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Rectangle
      description: The first <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Rectangle
      description: The second <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Rectangle
      description: Overlapping region of the two rectangles.
    content.vb: Public Shared Function Intersect(value1 As Rectangle, value2 As Rectangle) As Rectangle
  overload: Microsoft.Xna.Framework.Rectangle.Intersect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  id: Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Intersect(ref Rectangle, ref Rectangle, out Rectangle)
  nameWithType: Rectangle.Intersect(ref Rectangle, ref Rectangle, out Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Intersect(ref Microsoft.Xna.Framework.Rectangle, ref Microsoft.Xna.Framework.Rectangle, out Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Intersect
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 424
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> that contains overlapping region of two other rectangles.\n"
  example: []
  syntax:
    content: public static void Intersect(ref Rectangle value1, ref Rectangle value2, out Rectangle result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Rectangle
      description: The first <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Rectangle
      description: The second <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Rectangle
      description: Overlapping region of the two rectangles as an output parameter.
    content.vb: Public Shared Sub Intersect(ByRef value1 As Rectangle, ByRef value2 As Rectangle, ByRef result As Rectangle)
  overload: Microsoft.Xna.Framework.Rectangle.Intersect*
  nameWithType.vb: Rectangle.Intersect(ByRef Rectangle, ByRef Rectangle, ByRef Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Rectangle.Intersect(ByRef Microsoft.Xna.Framework.Rectangle, ByRef Microsoft.Xna.Framework.Rectangle, ByRef Microsoft.Xna.Framework.Rectangle)
  name.vb: Intersect(ByRef Rectangle, ByRef Rectangle, ByRef Rectangle)
- uid: Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)
  id: Offset(System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Offset(Int32, Int32)
  nameWithType: Rectangle.Offset(Int32, Int32)
  fullName: Microsoft.Xna.Framework.Rectangle.Offset(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Offset
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 445
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nChanges the <xref href=\"Microsoft.Xna.Framework.Rectangle.Location\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Offset(int offsetX, int offsetY)
    parameters:
    - id: offsetX
      type: System.Int32
      description: The x coordinate to add to this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: offsetY
      type: System.Int32
      description: The y coordinate to add to this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Offset(offsetX As Integer, offsetY As Integer)
  overload: Microsoft.Xna.Framework.Rectangle.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Offset(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Offset(System.Single,System.Single)
  id: Offset(System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Offset(Single, Single)
  nameWithType: Rectangle.Offset(Single, Single)
  fullName: Microsoft.Xna.Framework.Rectangle.Offset(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Offset
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 456
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nChanges the <xref href=\"Microsoft.Xna.Framework.Rectangle.Location\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Offset(float offsetX, float offsetY)
    parameters:
    - id: offsetX
      type: System.Single
      description: The x coordinate to add to this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: offsetY
      type: System.Single
      description: The y coordinate to add to this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Offset(offsetX As Single, offsetY As Single)
  overload: Microsoft.Xna.Framework.Rectangle.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)
  id: Offset(Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Offset(Point)
  nameWithType: Rectangle.Offset(Point)
  fullName: Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Offset
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 466
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nChanges the <xref href=\"Microsoft.Xna.Framework.Rectangle.Location\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Offset(Point amount)
    parameters:
    - id: amount
      type: Microsoft.Xna.Framework.Point
      description: The x and y components to add to this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Offset(amount As Point)
  overload: Microsoft.Xna.Framework.Rectangle.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Vector2)
  id: Offset(Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Offset(Vector2)
  nameWithType: Rectangle.Offset(Vector2)
  fullName: Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Offset
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 476
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nChanges the <xref href=\"Microsoft.Xna.Framework.Rectangle.Location\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Offset(Vector2 amount)
    parameters:
    - id: amount
      type: Microsoft.Xna.Framework.Vector2
      description: The x and y components to add to this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Offset(amount As Vector2)
  overload: Microsoft.Xna.Framework.Rectangle.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Rectangle.ToString
  commentId: M:Microsoft.Xna.Framework.Rectangle.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Rectangle.ToString()
  fullName: Microsoft.Xna.Framework.Rectangle.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 487
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of this <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> in the format:\n{X:[<xref href=\"Microsoft.Xna.Framework.Rectangle.X\" data-throw-if-not-resolved=\"false\"></xref>] Y:[<xref href=\"Microsoft.Xna.Framework.Rectangle.Y\" data-throw-if-not-resolved=\"false\"></xref>] Width:[<xref href=\"Microsoft.Xna.Framework.Rectangle.Width\" data-throw-if-not-resolved=\"false\"></xref>] Height:[<xref href=\"Microsoft.Xna.Framework.Rectangle.Height\" data-throw-if-not-resolved=\"false\"></xref>]}\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of this <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Rectangle.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  id: Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Union(Rectangle, Rectangle)
  nameWithType: Rectangle.Union(Rectangle, Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Union
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 498
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> that completely contains two other rectangles.\n"
  example: []
  syntax:
    content: public static Rectangle Union(Rectangle value1, Rectangle value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Rectangle
      description: The first <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Rectangle
      description: The second <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Rectangle
      description: The union of the two rectangles.
    content.vb: Public Shared Function Union(value1 As Rectangle, value2 As Rectangle) As Rectangle
  overload: Microsoft.Xna.Framework.Rectangle.Union*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  commentId: M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  id: Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)
  parent: Microsoft.Xna.Framework.Rectangle
  langs:
  - csharp
  - vb
  name: Union(ref Rectangle, ref Rectangle, out Rectangle)
  nameWithType: Rectangle.Union(ref Rectangle, ref Rectangle, out Rectangle)
  fullName: Microsoft.Xna.Framework.Rectangle.Union(ref Microsoft.Xna.Framework.Rectangle, ref Microsoft.Xna.Framework.Rectangle, out Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Rectangle.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Union
    path: ../MonoGame.Framework/Rectangle.cs
    startLine: 513
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> that completely contains two other rectangles.\n"
  example: []
  syntax:
    content: public static void Union(ref Rectangle value1, ref Rectangle value2, out Rectangle result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Rectangle
      description: The first <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Rectangle
      description: The second <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Rectangle
      description: The union of the two rectangles as an output parameter.
    content.vb: Public Shared Sub Union(ByRef value1 As Rectangle, ByRef value2 As Rectangle, ByRef result As Rectangle)
  overload: Microsoft.Xna.Framework.Rectangle.Union*
  nameWithType.vb: Rectangle.Union(ByRef Rectangle, ByRef Rectangle, ByRef Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Rectangle.Union(ByRef Microsoft.Xna.Framework.Rectangle, ByRef Microsoft.Xna.Framework.Rectangle, ByRef Microsoft.Xna.Framework.Rectangle)
  name.vb: Union(ByRef Rectangle, ByRef Rectangle, ByRef Rectangle)
references:
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.IEquatable{Microsoft.Xna.Framework.Rectangle}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Rectangle}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Rectangle>
  nameWithType: IEquatable<Rectangle>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Rectangle>
  nameWithType.vb: IEquatable(Of Rectangle)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Rectangle)
  name.vb: IEquatable(Of Rectangle)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: Microsoft.Xna.Framework.Rectangle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: Microsoft.Xna.Framework.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Rectangle.Empty*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Empty
  isExternal: false
  name: Empty
  nameWithType: Rectangle.Empty
  fullName: Microsoft.Xna.Framework.Rectangle.Empty
- uid: Microsoft.Xna.Framework.Rectangle.Left*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Left
  isExternal: false
  name: Left
  nameWithType: Rectangle.Left
  fullName: Microsoft.Xna.Framework.Rectangle.Left
- uid: Microsoft.Xna.Framework.Rectangle.Right*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Right
  isExternal: false
  name: Right
  nameWithType: Rectangle.Right
  fullName: Microsoft.Xna.Framework.Rectangle.Right
- uid: Microsoft.Xna.Framework.Rectangle.Top*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Top
  isExternal: false
  name: Top
  nameWithType: Rectangle.Top
  fullName: Microsoft.Xna.Framework.Rectangle.Top
- uid: Microsoft.Xna.Framework.Rectangle.Bottom*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Bottom
  isExternal: false
  name: Bottom
  nameWithType: Rectangle.Bottom
  fullName: Microsoft.Xna.Framework.Rectangle.Bottom
- uid: Microsoft.Xna.Framework.Rectangle.Width
  commentId: F:Microsoft.Xna.Framework.Rectangle.Width
- uid: Microsoft.Xna.Framework.Rectangle.Height
  commentId: F:Microsoft.Xna.Framework.Rectangle.Height
- uid: Microsoft.Xna.Framework.Rectangle.Location
  commentId: P:Microsoft.Xna.Framework.Rectangle.Location
- uid: Microsoft.Xna.Framework.Rectangle.IsEmpty*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: Rectangle.IsEmpty
  fullName: Microsoft.Xna.Framework.Rectangle.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Rectangle.Location*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Location
  isExternal: false
  name: Location
  nameWithType: Rectangle.Location
  fullName: Microsoft.Xna.Framework.Rectangle.Location
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework.Rectangle.Size*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Size
  isExternal: false
  name: Size
  nameWithType: Rectangle.Size
  fullName: Microsoft.Xna.Framework.Rectangle.Size
- uid: Microsoft.Xna.Framework.Rectangle.Center*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Center
  isExternal: false
  name: Center
  nameWithType: Rectangle.Center
  fullName: Microsoft.Xna.Framework.Rectangle.Center
- uid: Microsoft.Xna.Framework.Rectangle.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.#ctor
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle.Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle.Rectangle
- uid: Microsoft.Xna.Framework.Rectangle.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Rectangle.Equality
  fullName: Microsoft.Xna.Framework.Rectangle.Equality
- uid: Microsoft.Xna.Framework.Rectangle.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Rectangle.Inequality
  fullName: Microsoft.Xna.Framework.Rectangle.Inequality
- uid: Microsoft.Xna.Framework.Rectangle.Contains*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Contains
  isExternal: false
  name: Contains
  nameWithType: Rectangle.Contains
  fullName: Microsoft.Xna.Framework.Rectangle.Contains
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Rectangle.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Equals
  isExternal: false
  name: Equals
  nameWithType: Rectangle.Equals
  fullName: Microsoft.Xna.Framework.Rectangle.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{Microsoft.Xna.Framework.Rectangle}.Equals(Microsoft.Xna.Framework.Rectangle)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Rectangle}.Equals(Microsoft.Xna.Framework.Rectangle)
  parent: System.IEquatable{Microsoft.Xna.Framework.Rectangle}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Rectangle)
  nameWithType: IEquatable<Rectangle>.Equals(Rectangle)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Rectangle>.Equals(Microsoft.Xna.Framework.Rectangle)
  nameWithType.vb: IEquatable(Of Rectangle).Equals(Rectangle)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Rectangle).Equals(Microsoft.Xna.Framework.Rectangle)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Rectangle>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Rectangle>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: Microsoft.Xna.Framework.Rectangle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Rectangle).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Rectangle).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: Microsoft.Xna.Framework.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Rectangle.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Rectangle.GetHashCode
  fullName: Microsoft.Xna.Framework.Rectangle.GetHashCode
- uid: Microsoft.Xna.Framework.Rectangle.Inflate*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Inflate
  isExternal: false
  name: Inflate
  nameWithType: Rectangle.Inflate
  fullName: Microsoft.Xna.Framework.Rectangle.Inflate
- uid: Microsoft.Xna.Framework.Rectangle.Intersects*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Intersects
  isExternal: false
  name: Intersects
  nameWithType: Rectangle.Intersects
  fullName: Microsoft.Xna.Framework.Rectangle.Intersects
- uid: Microsoft.Xna.Framework.Rectangle.Intersect*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Intersect
  isExternal: false
  name: Intersect
  nameWithType: Rectangle.Intersect
  fullName: Microsoft.Xna.Framework.Rectangle.Intersect
- uid: Microsoft.Xna.Framework.Rectangle.Offset*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Offset
  isExternal: false
  name: Offset
  nameWithType: Rectangle.Offset
  fullName: Microsoft.Xna.Framework.Rectangle.Offset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Rectangle.X
  commentId: F:Microsoft.Xna.Framework.Rectangle.X
- uid: Microsoft.Xna.Framework.Rectangle.Y
  commentId: F:Microsoft.Xna.Framework.Rectangle.Y
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Rectangle.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.ToString
  isExternal: false
  name: ToString
  nameWithType: Rectangle.ToString
  fullName: Microsoft.Xna.Framework.Rectangle.ToString
- uid: Microsoft.Xna.Framework.Rectangle.Union*
  commentId: Overload:Microsoft.Xna.Framework.Rectangle.Union
  isExternal: false
  name: Union
  nameWithType: Rectangle.Union
  fullName: Microsoft.Xna.Framework.Rectangle.Union
