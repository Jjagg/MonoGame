### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  id: Point
  parent: Microsoft.Xna.Framework
  children:
  - Microsoft.Xna.Framework.Point.#ctor(System.Int32)
  - Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Point.Equals(System.Object)
  - Microsoft.Xna.Framework.Point.GetHashCode
  - Microsoft.Xna.Framework.Point.op_Addition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Point.op_Division(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Point.op_Multiply(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Point.op_Subtraction(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - Microsoft.Xna.Framework.Point.ToString
  - Microsoft.Xna.Framework.Point.ToVector2
  - Microsoft.Xna.Framework.Point.X
  - Microsoft.Xna.Framework.Point.Y
  - Microsoft.Xna.Framework.Point.Zero
  langs:
  - csharp
  - vb
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Point
    path: ../MonoGame.Framework/Point.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDescribes a 2D-point.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public struct Point : IEquatable<Point>
    content.vb: >-
      <DataContract>

      Public Structure Point
          Implements IEquatable(Of Point)
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Point}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Point.X
  commentId: F:Microsoft.Xna.Framework.Point.X
  id: X
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Point.X
  fullName: Microsoft.Xna.Framework.Point.X
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: X
    path: ../MonoGame.Framework/Point.cs
    startLine: 29
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe x coordinate of this <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int X
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public X As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Point.Y
  commentId: F:Microsoft.Xna.Framework.Point.Y
  id: Y
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Point.Y
  fullName: Microsoft.Xna.Framework.Point.Y
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Y
    path: ../MonoGame.Framework/Point.cs
    startLine: 35
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe y coordinate of this <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int Y
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public Y As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Point.Zero
  commentId: P:Microsoft.Xna.Framework.Point.Zero
  id: Zero
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Point.Zero
  fullName: Microsoft.Xna.Framework.Point.Zero
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Zero
    path: ../MonoGame.Framework/Point.cs
    startLine: 44
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> with coordinates 0, 0.\n"
  example: []
  syntax:
    content: public static Point Zero { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public Shared ReadOnly Property Zero As Point
  overload: Microsoft.Xna.Framework.Point.Zero*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Point(Int32, Int32)
  nameWithType: Point.Point(Int32, Int32)
  fullName: Microsoft.Xna.Framework.Point.Point(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Point.cs
    startLine: 73
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a point with X and Y from two values.\n"
  example: []
  syntax:
    content: public Point(int x, int y)
    parameters:
    - id: x
      type: System.Int32
      description: The x coordinate in 2d-space.
    - id: y
      type: System.Int32
      description: The y coordinate in 2d-space.
    content.vb: Public Sub New(x As Integer, y As Integer)
  overload: Microsoft.Xna.Framework.Point.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Point.#ctor(System.Int32)
  commentId: M:Microsoft.Xna.Framework.Point.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Point(Int32)
  nameWithType: Point.Point(Int32)
  fullName: Microsoft.Xna.Framework.Point.Point(System.Int32)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Point.cs
    startLine: 83
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a point with X and Y set to the same value.\n"
  example: []
  syntax:
    content: public Point(int value)
    parameters:
    - id: value
      type: System.Int32
      description: The x and y coordinates in 2d-space.
    content.vb: Public Sub New(value As Integer)
  overload: Microsoft.Xna.Framework.Point.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Point.op_Addition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Point.op_Addition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: op_Addition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Addition(Point, Point)
  nameWithType: Point.Addition(Point, Point)
  fullName: Microsoft.Xna.Framework.Point.Addition(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Addition
    path: ../MonoGame.Framework/Point.cs
    startLine: 99
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAdds two points.\n"
  example: []
  syntax:
    content: public static Point operator +(Point value1, Point value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Point
      description: Source <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the left of the add sign.
    - id: value2
      type: Microsoft.Xna.Framework.Point
      description: Source <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the right of the add sign.
    return:
      type: Microsoft.Xna.Framework.Point
      description: Sum of the points.
    content.vb: Public Shared Operator +(value1 As Point, value2 As Point) As Point
  overload: Microsoft.Xna.Framework.Point.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Point.op_Subtraction(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Point.op_Subtraction(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: op_Subtraction(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Subtraction(Point, Point)
  nameWithType: Point.Subtraction(Point, Point)
  fullName: Microsoft.Xna.Framework.Point.Subtraction(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Subtraction
    path: ../MonoGame.Framework/Point.cs
    startLine: 110
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nSubtracts a <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Point operator -(Point value1, Point value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Point
      description: Source <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the left of the sub sign.
    - id: value2
      type: Microsoft.Xna.Framework.Point
      description: Source <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the right of the sub sign.
    return:
      type: Microsoft.Xna.Framework.Point
      description: Result of the subtraction.
    content.vb: Public Shared Operator -(value1 As Point, value2 As Point) As Point
  overload: Microsoft.Xna.Framework.Point.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Point.op_Multiply(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Point.op_Multiply(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: op_Multiply(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Multiply(Point, Point)
  nameWithType: Point.Multiply(Point, Point)
  fullName: Microsoft.Xna.Framework.Point.Multiply(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Point.cs
    startLine: 121
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of two points by each other.\n"
  example: []
  syntax:
    content: public static Point operator *(Point value1, Point value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Point
      description: Source <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the left of the mul sign.
    - id: value2
      type: Microsoft.Xna.Framework.Point
      description: Source <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Point
      description: Result of the multiplication.
    content.vb: Public Shared Operator *(value1 As Point, value2 As Point) As Point
  overload: Microsoft.Xna.Framework.Point.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Point.op_Division(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Point.op_Division(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: op_Division(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Division(Point, Point)
  nameWithType: Point.Division(Point, Point)
  fullName: Microsoft.Xna.Framework.Point.Division(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Division
    path: ../MonoGame.Framework/Point.cs
    startLine: 132
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> by the components of another <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Point operator /(Point source, Point divisor)
    parameters:
    - id: source
      type: Microsoft.Xna.Framework.Point
      description: Source <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the left of the div sign.
    - id: divisor
      type: Microsoft.Xna.Framework.Point
      description: Divisor <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> on the right of the div sign.
    return:
      type: Microsoft.Xna.Framework.Point
      description: The result of dividing the points.
    content.vb: Public Shared Operator /(source As Point, divisor As Point) As Point
  overload: Microsoft.Xna.Framework.Point.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Equality(Point, Point)
  nameWithType: Point.Equality(Point, Point)
  fullName: Microsoft.Xna.Framework.Point.Equality(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Point.cs
    startLine: 143
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Point a, Point b)
    parameters:
    - id: a
      type: Microsoft.Xna.Framework.Point
      description: <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> instance on the left of the equal sign.
    - id: b
      type: Microsoft.Xna.Framework.Point
      description: <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> instance on the right of the equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator =(a As Point, b As Point) As Boolean
  overload: Microsoft.Xna.Framework.Point.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Inequality(Point, Point)
  nameWithType: Point.Inequality(Point, Point)
  fullName: Microsoft.Xna.Framework.Point.Inequality(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Point.cs
    startLine: 154
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Point a, Point b)
    parameters:
    - id: a
      type: Microsoft.Xna.Framework.Point
      description: <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> instance on the left of the not equal sign.
    - id: b
      type: Microsoft.Xna.Framework.Point
      description: <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> instance on the right of the not equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are not equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator <>(a As Point, b As Point) As Boolean
  overload: Microsoft.Xna.Framework.Point.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Point.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Point.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: Microsoft.Xna.Framework.Point.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Point.cs
    startLine: 168
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Point.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)
  commentId: M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)
  id: Equals(Microsoft.Xna.Framework.Point)
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: Equals(Point)
  nameWithType: Point.Equals(Point)
  fullName: Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Point.cs
    startLine: 178
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(Point other)
    parameters:
    - id: other
      type: Microsoft.Xna.Framework.Point
      description: The <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Function Equals(other As Point) As Boolean
  overload: Microsoft.Xna.Framework.Point.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Point}.Equals(Microsoft.Xna.Framework.Point)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Point.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Point.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: Microsoft.Xna.Framework.Point.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Point.cs
    startLine: 187
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets the hash code of this <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code of this <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Point.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Point.ToString
  commentId: M:Microsoft.Xna.Framework.Point.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Point.ToString()
  fullName: Microsoft.Xna.Framework.Point.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Point.cs
    startLine: 204
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of this <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> in the format:\n{X:[<xref href=\"Microsoft.Xna.Framework.Point.X\" data-throw-if-not-resolved=\"false\"></xref>] Y:[<xref href=\"Microsoft.Xna.Framework.Point.Y\" data-throw-if-not-resolved=\"false\"></xref>]}\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of this <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Point.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Point.ToVector2
  commentId: M:Microsoft.Xna.Framework.Point.ToVector2
  id: ToVector2
  parent: Microsoft.Xna.Framework.Point
  langs:
  - csharp
  - vb
  name: ToVector2()
  nameWithType: Point.ToVector2()
  fullName: Microsoft.Xna.Framework.Point.ToVector2()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Point.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToVector2
    path: ../MonoGame.Framework/Point.cs
    startLine: 213
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> representation for this object.\n"
  example: []
  syntax:
    content: public Vector2 ToVector2()
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: A <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> representation for this object.
    content.vb: Public Function ToVector2 As Vector2
  overload: Microsoft.Xna.Framework.Point.ToVector2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.IEquatable{Microsoft.Xna.Framework.Point}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Point}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Point>
  nameWithType: IEquatable<Point>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEquatable(Of Point)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEquatable(Of Point)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Point.Zero*
  commentId: Overload:Microsoft.Xna.Framework.Point.Zero
  isExternal: false
  name: Zero
  nameWithType: Point.Zero
  fullName: Microsoft.Xna.Framework.Point.Zero
- uid: Microsoft.Xna.Framework.Point.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Point.#ctor
  isExternal: false
  name: Point
  nameWithType: Point.Point
  fullName: Microsoft.Xna.Framework.Point.Point
- uid: Microsoft.Xna.Framework.Point.op_Addition*
  commentId: Overload:Microsoft.Xna.Framework.Point.op_Addition
  isExternal: false
  name: Addition
  nameWithType: Point.Addition
  fullName: Microsoft.Xna.Framework.Point.Addition
- uid: Microsoft.Xna.Framework.Point.op_Subtraction*
  commentId: Overload:Microsoft.Xna.Framework.Point.op_Subtraction
  isExternal: false
  name: Subtraction
  nameWithType: Point.Subtraction
  fullName: Microsoft.Xna.Framework.Point.Subtraction
- uid: Microsoft.Xna.Framework.Point.op_Multiply*
  commentId: Overload:Microsoft.Xna.Framework.Point.op_Multiply
  isExternal: false
  name: Multiply
  nameWithType: Point.Multiply
  fullName: Microsoft.Xna.Framework.Point.Multiply
- uid: Microsoft.Xna.Framework.Point.op_Division*
  commentId: Overload:Microsoft.Xna.Framework.Point.op_Division
  isExternal: false
  name: Division
  nameWithType: Point.Division
  fullName: Microsoft.Xna.Framework.Point.Division
- uid: Microsoft.Xna.Framework.Point.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Point.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Point.Equality
  fullName: Microsoft.Xna.Framework.Point.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Point.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Point.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Point.Inequality
  fullName: Microsoft.Xna.Framework.Point.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Point.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Point.Equals
  isExternal: false
  name: Equals
  nameWithType: Point.Equals
  fullName: Microsoft.Xna.Framework.Point.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{Microsoft.Xna.Framework.Point}.Equals(Microsoft.Xna.Framework.Point)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Point}.Equals(Microsoft.Xna.Framework.Point)
  parent: System.IEquatable{Microsoft.Xna.Framework.Point}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Point)
  nameWithType: IEquatable<Point>.Equals(Point)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Point>.Equals(Microsoft.Xna.Framework.Point)
  nameWithType.vb: IEquatable(Of Point).Equals(Point)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Point).Equals(Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Point>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Point>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Point).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Point).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Point.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Point.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Point.GetHashCode
  fullName: Microsoft.Xna.Framework.Point.GetHashCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Point.X
  commentId: F:Microsoft.Xna.Framework.Point.X
- uid: Microsoft.Xna.Framework.Point.Y
  commentId: F:Microsoft.Xna.Framework.Point.Y
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Point.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Point.ToString
  isExternal: false
  name: ToString
  nameWithType: Point.ToString
  fullName: Microsoft.Xna.Framework.Point.ToString
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework.Point.ToVector2*
  commentId: Overload:Microsoft.Xna.Framework.Point.ToVector2
  isExternal: false
  name: ToVector2
  nameWithType: Point.ToVector2
  fullName: Microsoft.Xna.Framework.Point.ToVector2
