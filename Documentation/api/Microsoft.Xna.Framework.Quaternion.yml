### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Quaternion
  commentId: T:Microsoft.Xna.Framework.Quaternion
  id: Quaternion
  parent: Microsoft.Xna.Framework
  children:
  - Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector4)
  - Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Conjugate
  - Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)
  - Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)
  - Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Equals(System.Object)
  - Microsoft.Xna.Framework.Quaternion.GetHashCode
  - Microsoft.Xna.Framework.Quaternion.Identity
  - Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Length
  - Microsoft.Xna.Framework.Quaternion.LengthSquared
  - Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  - Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  - Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Normalize
  - Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  - Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  - Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  - Microsoft.Xna.Framework.Quaternion.ToString
  - Microsoft.Xna.Framework.Quaternion.ToVector4
  - Microsoft.Xna.Framework.Quaternion.W
  - Microsoft.Xna.Framework.Quaternion.X
  - Microsoft.Xna.Framework.Quaternion.Y
  - Microsoft.Xna.Framework.Quaternion.Z
  langs:
  - csharp
  - vb
  name: Quaternion
  nameWithType: Quaternion
  fullName: Microsoft.Xna.Framework.Quaternion
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Quaternion
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAn efficient mathematical representation for three dimensional rotations.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public struct Quaternion : IEquatable<Quaternion>
    content.vb: >-
      <DataContract>

      Public Structure Quaternion
          Implements IEquatable(Of Quaternion)
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Quaternion}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Quaternion.X
  commentId: F:Microsoft.Xna.Framework.Quaternion.X
  id: X
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Quaternion.X
  fullName: Microsoft.Xna.Framework.Quaternion.X
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: X
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 29
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe x coordinate of this <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float X
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public X As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.Y
  commentId: F:Microsoft.Xna.Framework.Quaternion.Y
  id: Y
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Quaternion.Y
  fullName: Microsoft.Xna.Framework.Quaternion.Y
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Y
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 35
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe y coordinate of this <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Y
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Y As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.Z
  commentId: F:Microsoft.Xna.Framework.Quaternion.Z
  id: Z
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Quaternion.Z
  fullName: Microsoft.Xna.Framework.Quaternion.Z
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Z
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 41
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe z coordinate of this <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Z
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Z As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.W
  commentId: F:Microsoft.Xna.Framework.Quaternion.W
  id: W
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: W
  nameWithType: Quaternion.W
  fullName: Microsoft.Xna.Framework.Quaternion.W
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: W
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 47
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe rotation component of this <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float W
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public W As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Quaternion(Single, Single, Single, Single)
  nameWithType: Quaternion.Quaternion(Single, Single, Single, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.Quaternion(System.Single, System.Single, System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 60
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a quaternion with X, Y, Z and W from four values.\n"
  example: []
  syntax:
    content: public Quaternion(float x, float y, float z, float w)
    parameters:
    - id: x
      type: System.Single
      description: The x coordinate in 3d-space.
    - id: y
      type: System.Single
      description: The y coordinate in 3d-space.
    - id: z
      type: System.Single
      description: The z coordinate in 3d-space.
    - id: w
      type: System.Single
      description: The rotation component.
    content.vb: Public Sub New(x As Single, y As Single, z As Single, w As Single)
  overload: Microsoft.Xna.Framework.Quaternion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)
  id: '#ctor(Microsoft.Xna.Framework.Vector3,System.Single)'
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Quaternion(Vector3, Single)
  nameWithType: Quaternion.Quaternion(Vector3, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.Quaternion(Microsoft.Xna.Framework.Vector3, System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 73
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a quaternion with X, Y, Z from <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> and rotation component from a scalar.\n"
  example: []
  syntax:
    content: public Quaternion(Vector3 value, float w)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: The x, y, z coordinates in 3d-space.
    - id: w
      type: System.Single
      description: The rotation component.
    content.vb: Public Sub New(value As Vector3, w As Single)
  overload: Microsoft.Xna.Framework.Quaternion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector4)
  commentId: M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector4)
  id: '#ctor(Microsoft.Xna.Framework.Vector4)'
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Quaternion(Vector4)
  nameWithType: Quaternion.Quaternion(Vector4)
  fullName: Microsoft.Xna.Framework.Quaternion.Quaternion(Microsoft.Xna.Framework.Vector4)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 85
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a quaternion from <xref href=\"Microsoft.Xna.Framework.Vector4\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Quaternion(Vector4 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector4
      description: The x, y, z coordinates in 3d-space and the rotation component.
    content.vb: Public Sub New(value As Vector4)
  overload: Microsoft.Xna.Framework.Quaternion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.Identity
  commentId: P:Microsoft.Xna.Framework.Quaternion.Identity
  id: Identity
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: Quaternion.Identity
  fullName: Microsoft.Xna.Framework.Quaternion.Identity
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Identity
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 100
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a quaternion representing no rotation.\n"
  example: []
  syntax:
    content: public static Quaternion Identity { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Quaternion
    content.vb: Public Shared ReadOnly Property Identity As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Identity*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Add(Quaternion, Quaternion)
  nameWithType: Quaternion.Add(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 139
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains the sum of two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion Add(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion addition.
    content.vb: Public Shared Function Add(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Add(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Add(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Add(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 155
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains the sum of two quaternions.\n"
  example: []
  syntax:
    content: public static void Add(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion addition as an output parameter.
    content.vb: Public Shared Sub Add(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Add*
  nameWithType.vb: Quaternion.Add(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Add(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Add(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Concatenate(Quaternion, Quaternion)
  nameWithType: Quaternion.Concatenate(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Concatenate
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 173
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains concatenation between two quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Concatenate(Quaternion value1, Quaternion value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Quaternion
      description: The first <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> to concatenate.
    - id: value2
      type: Microsoft.Xna.Framework.Quaternion
      description: The second <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> to concatenate.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of rotation of <code data-dev-comment-type="paramref" class="paramref">value1</code> followed by <code data-dev-comment-type="paramref" class="paramref">value2</code> rotation.
    content.vb: Public Shared Function Concatenate(value1 As Quaternion, value2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Concatenate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Concatenate(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Concatenate(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Concatenate(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Concatenate
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 201
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains concatenation between two quaternion.\n"
  example: []
  syntax:
    content: public static void Concatenate(ref Quaternion value1, ref Quaternion value2, out Quaternion result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Quaternion
      description: The first <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> to concatenate.
    - id: value2
      type: Microsoft.Xna.Framework.Quaternion
      description: The second <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> to concatenate.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of rotation of <code data-dev-comment-type="paramref" class="paramref">value1</code> followed by <code data-dev-comment-type="paramref" class="paramref">value2</code> rotation as an output parameter.
    content.vb: Public Shared Sub Concatenate(ByRef value1 As Quaternion, ByRef value2 As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Concatenate*
  nameWithType.vb: Quaternion.Concatenate(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Concatenate(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Concatenate(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Conjugate
  commentId: M:Microsoft.Xna.Framework.Quaternion.Conjugate
  id: Conjugate
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Conjugate()
  nameWithType: Quaternion.Conjugate()
  fullName: Microsoft.Xna.Framework.Quaternion.Conjugate()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Conjugate
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 226
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nTransforms this quaternion into its conjugated version.\n"
  example: []
  syntax:
    content: public void Conjugate()
    content.vb: Public Sub Conjugate
  overload: Microsoft.Xna.Framework.Quaternion.Conjugate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)
  id: Conjugate(Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Conjugate(Quaternion)
  nameWithType: Quaternion.Conjugate(Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Conjugate
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 238
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains conjugated version of the specified quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Conjugate(Quaternion value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Quaternion
      description: The quaternion which values will be used to create the conjugated version.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The conjugate version of the specified quaternion.
    content.vb: Public Shared Function Conjugate(value As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Conjugate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Conjugate(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Conjugate(ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Conjugate(ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Conjugate
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 248
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains conjugated version of the specified quaternion.\n"
  example: []
  syntax:
    content: public static void Conjugate(ref Quaternion value, out Quaternion result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Quaternion
      description: The quaternion which values will be used to create the conjugated version.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The conjugated version of the specified quaternion as an output parameter.
    content.vb: Public Shared Sub Conjugate(ByRef value As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Conjugate*
  nameWithType.vb: Quaternion.Conjugate(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Conjugate(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Conjugate(ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)
  id: CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromAxisAngle(Vector3, Single)
  nameWithType: Quaternion.CreateFromAxisAngle(Vector3, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CreateFromAxisAngle
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 266
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from the specified axis and angle.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle)
    parameters:
    - id: axis
      type: Microsoft.Xna.Framework.Vector3
      description: The axis of rotation.
    - id: angle
      type: System.Single
      description: The angle in radians.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The new quaternion builded from axis and angle.
    content.vb: Public Shared Function CreateFromAxisAngle(axis As Vector3, angle As Single) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  id: CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromAxisAngle(ref Vector3, Single, out Quaternion)
  nameWithType: Quaternion.CreateFromAxisAngle(ref Vector3, Single, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CreateFromAxisAngle
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 280
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from the specified axis and angle.\n"
  example: []
  syntax:
    content: public static void CreateFromAxisAngle(ref Vector3 axis, float angle, out Quaternion result)
    parameters:
    - id: axis
      type: Microsoft.Xna.Framework.Vector3
      description: The axis of rotation.
    - id: angle
      type: System.Single
      description: The angle in radians.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The new quaternion builded from axis and angle as an output parameter.
    content.vb: Public Shared Sub CreateFromAxisAngle(ByRef axis As Vector3, angle As Single, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle*
  nameWithType.vb: Quaternion.CreateFromAxisAngle(ByRef Vector3, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: CreateFromAxisAngle(ByRef Vector3, Single, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)
  commentId: M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)
  id: CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromRotationMatrix(Matrix)
  nameWithType: Quaternion.CreateFromRotationMatrix(Matrix)
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CreateFromRotationMatrix
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 300
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromRotationMatrix(Matrix matrix)
    parameters:
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The rotation matrix.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: A quaternion composed from the rotation part of the matrix.
    content.vb: Public Shared Function CreateFromRotationMatrix(matrix As Matrix) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)
  id: CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromRotationMatrix(ref Matrix, out Quaternion)
  nameWithType: Quaternion.CreateFromRotationMatrix(ref Matrix, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(ref Microsoft.Xna.Framework.Matrix, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CreateFromRotationMatrix
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 359
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void CreateFromRotationMatrix(ref Matrix matrix, out Quaternion result)
    parameters:
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The rotation matrix.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: A quaternion composed from the rotation part of the matrix as an output parameter.
    content.vb: Public Shared Sub CreateFromRotationMatrix(ByRef matrix As Matrix, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix*
  nameWithType.vb: Quaternion.CreateFromRotationMatrix(ByRef Matrix, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(ByRef Microsoft.Xna.Framework.Matrix, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: CreateFromRotationMatrix(ByRef Matrix, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromYawPitchRoll(Single, Single, Single)
  nameWithType: Quaternion.CreateFromYawPitchRoll(Single, Single, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CreateFromYawPitchRoll
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 419
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from the specified yaw, pitch and roll angles.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll)
    parameters:
    - id: yaw
      type: System.Single
      description: Yaw around the y axis in radians.
    - id: pitch
      type: System.Single
      description: Pitch around the x axis in radians.
    - id: roll
      type: System.Single
      description: Roll around the z axis in radians.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: A new quaternion from the concatenated yaw, pitch, and roll angles.
    content.vb: Public Shared Function CreateFromYawPitchRoll(yaw As Single, pitch As Single, roll As Single) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)
  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromYawPitchRoll(Single, Single, Single, out Quaternion)
  nameWithType: Quaternion.CreateFromYawPitchRoll(Single, Single, Single, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single, System.Single, System.Single, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CreateFromYawPitchRoll
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 445
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from the specified yaw, pitch and roll angles.\n"
  example: []
  syntax:
    content: public static void CreateFromYawPitchRoll(float yaw, float pitch, float roll, out Quaternion result)
    parameters:
    - id: yaw
      type: System.Single
      description: Yaw around the y axis in radians.
    - id: pitch
      type: System.Single
      description: Pitch around the x axis in radians.
    - id: roll
      type: System.Single
      description: Roll around the z axis in radians.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: A new quaternion from the concatenated yaw, pitch, and roll angles as an output parameter.
    content.vb: Public Shared Sub CreateFromYawPitchRoll(yaw As Single, pitch As Single, roll As Single, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll*
  nameWithType.vb: Quaternion.CreateFromYawPitchRoll(Single, Single, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single, System.Single, System.Single, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: CreateFromYawPitchRoll(Single, Single, Single, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Divide(Quaternion, Quaternion)
  nameWithType: Quaternion.Divide(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 474
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides a <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> by the other <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Quaternion Divide(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Divisor <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of dividing the quaternions.
    content.vb: Public Shared Function Divide(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Divide(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Divide(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Divide(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 504
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides a <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> by the other <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Divide(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Divisor <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of dividing the quaternions as an output parameter.
    content.vb: Public Shared Sub Divide(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Divide*
  nameWithType.vb: Quaternion.Divide(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Divide(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Divide(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Dot(Quaternion, Quaternion)
  nameWithType: Quaternion.Dot(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dot
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 536
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a dot product of two quaternions.\n"
  example: []
  syntax:
    content: public static float Dot(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: The second quaternion.
    return:
      type: System.Single
      description: The dot product of two quaternions.
    content.vb: Public Shared Function Dot(quaternion1 As Quaternion, quaternion2 As Quaternion) As Single
  overload: Microsoft.Xna.Framework.Quaternion.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)
  id: Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Dot(ref Quaternion, ref Quaternion, out Single)
  nameWithType: Quaternion.Dot(ref Quaternion, ref Quaternion, out Single)
  fullName: Microsoft.Xna.Framework.Quaternion.Dot(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, out System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dot
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 547
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a dot product of two quaternions.\n"
  example: []
  syntax:
    content: public static void Dot(ref Quaternion quaternion1, ref Quaternion quaternion2, out float result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: The second quaternion.
    - id: result
      type: System.Single
      description: The dot product of two quaternions as an output parameter.
    content.vb: Public Shared Sub Dot(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Single)
  overload: Microsoft.Xna.Framework.Quaternion.Dot*
  nameWithType.vb: Quaternion.Dot(ByRef Quaternion, ByRef Quaternion, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Dot(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, ByRef System.Single)
  name.vb: Dot(ByRef Quaternion, ByRef Quaternion, ByRef Single)
- uid: Microsoft.Xna.Framework.Quaternion.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Quaternion.Equals(Object)
  fullName: Microsoft.Xna.Framework.Quaternion.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 561
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Quaternion.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)
  id: Equals(Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Equals(Quaternion)
  nameWithType: Quaternion.Equals(Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 573
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(Quaternion other)
    parameters:
    - id: other
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Function Equals(other As Quaternion) As Boolean
  overload: Microsoft.Xna.Framework.Quaternion.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Quaternion}.Equals(Microsoft.Xna.Framework.Quaternion)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Quaternion.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Quaternion.GetHashCode()
  fullName: Microsoft.Xna.Framework.Quaternion.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 587
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets the hash code of this <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code of this <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Quaternion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)
  id: Inverse(Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Inverse(Quaternion)
  nameWithType: Quaternion.Inverse(Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Inverse
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 599
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the inverse quaternion which represents the opposite rotation.\n"
  example: []
  syntax:
    content: public static Quaternion Inverse(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The inverse quaternion.
    content.vb: Public Shared Function Inverse(quaternion As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Inverse(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Inverse(ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Inverse(ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Inverse
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 616
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the inverse quaternion which represents the opposite rotation.\n"
  example: []
  syntax:
    content: public static void Inverse(ref Quaternion quaternion, out Quaternion result)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The inverse quaternion as an output parameter.
    content.vb: Public Shared Sub Inverse(ByRef quaternion As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Inverse*
  nameWithType.vb: Quaternion.Inverse(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Inverse(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Inverse(ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Length
  commentId: M:Microsoft.Xna.Framework.Quaternion.Length
  id: Length
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Quaternion.Length()
  fullName: Microsoft.Xna.Framework.Quaternion.Length()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Length
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 632
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the magnitude of the quaternion components.\n"
  example: []
  syntax:
    content: public float Length()
    return:
      type: System.Single
      description: The magnitude of the quaternion components.
    content.vb: Public Function Length As Single
  overload: Microsoft.Xna.Framework.Quaternion.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.LengthSquared
  commentId: M:Microsoft.Xna.Framework.Quaternion.LengthSquared
  id: LengthSquared
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: LengthSquared()
  nameWithType: Quaternion.LengthSquared()
  fullName: Microsoft.Xna.Framework.Quaternion.LengthSquared()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LengthSquared
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 641
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the squared magnitude of the quaternion components.\n"
  example: []
  syntax:
    content: public float LengthSquared()
    return:
      type: System.Single
      description: The squared magnitude of the quaternion components.
    content.vb: Public Function LengthSquared As Single
  overload: Microsoft.Xna.Framework.Quaternion.LengthSquared*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  id: Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Lerp(Quaternion, Quaternion, Single)
  nameWithType: Quaternion.Lerp(Quaternion, Quaternion, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Lerp
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 655
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms a linear blend between two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: The blend amount where 0 returns <code data-dev-comment-type="paramref" class="paramref">quaternion1</code> and 1 <code data-dev-comment-type="paramref" class="paramref">quaternion2</code>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of linear blending between two quaternions.
    content.vb: Public Shared Function Lerp(quaternion1 As Quaternion, quaternion2 As Quaternion, amount As Single) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  id: Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Lerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  nameWithType: Quaternion.Lerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Lerp(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, System.Single, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Lerp
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 691
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms a linear blend between two quaternions.\n"
  example: []
  syntax:
    content: public static void Lerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: The blend amount where 0 returns <code data-dev-comment-type="paramref" class="paramref">quaternion1</code> and 1 <code data-dev-comment-type="paramref" class="paramref">quaternion2</code>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of linear blending between two quaternions as an output parameter.
    content.vb: Public Shared Sub Lerp(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, amount As Single, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Lerp*
  nameWithType.vb: Quaternion.Lerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Lerp(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, System.Single, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Lerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  id: Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Slerp(Quaternion, Quaternion, Single)
  nameWithType: Quaternion.Slerp(Quaternion, Quaternion, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Slerp
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 730
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms a spherical linear blend between two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: The blend amount where 0 returns <code data-dev-comment-type="paramref" class="paramref">quaternion1</code> and 1 <code data-dev-comment-type="paramref" class="paramref">quaternion2</code>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of spherical linear blending between two quaternions.
    content.vb: Public Shared Function Slerp(quaternion1 As Quaternion, quaternion2 As Quaternion, amount As Single) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Slerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  id: Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Slerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  nameWithType: Quaternion.Slerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Slerp(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, System.Single, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Slerp
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 769
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms a spherical linear blend between two quaternions.\n"
  example: []
  syntax:
    content: public static void Slerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: The blend amount where 0 returns <code data-dev-comment-type="paramref" class="paramref">quaternion1</code> and 1 <code data-dev-comment-type="paramref" class="paramref">quaternion2</code>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of spherical linear blending between two quaternions as an output parameter.
    content.vb: Public Shared Sub Slerp(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, amount As Single, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Slerp*
  nameWithType.vb: Quaternion.Slerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Slerp(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, System.Single, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Slerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Subtract(Quaternion, Quaternion)
  nameWithType: Quaternion.Subtract(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Subtract
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 809
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains subtraction of one <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from another.\n"
  example: []
  syntax:
    content: public static Quaternion Subtract(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion subtraction.
    content.vb: Public Shared Function Subtract(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Subtract(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Subtract(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Subtract(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Subtract
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 825
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains subtraction of one <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from another.\n"
  example: []
  syntax:
    content: public static void Subtract(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion subtraction as an output parameter.
    content.vb: Public Shared Sub Subtract(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Subtract*
  nameWithType.vb: Quaternion.Subtract(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Subtract(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Subtract(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Quaternion)
  nameWithType: Quaternion.Multiply(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 843
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion Multiply(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion multiplication.
    content.vb: Public Shared Function Multiply(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  id: Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Single)
  nameWithType: Quaternion.Multiply(Quaternion, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 871
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> and a scalar.\n"
  example: []
  syntax:
    content: public static Quaternion Multiply(Quaternion quaternion1, float scaleFactor)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: scaleFactor
      type: System.Single
      description: Scalar value.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion multiplication with a scalar.
    content.vb: Public Shared Function Multiply(quaternion1 As Quaternion, scaleFactor As Single) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  id: Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(ref Quaternion, Single, out Quaternion)
  nameWithType: Quaternion.Multiply(ref Quaternion, Single, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply(ref Microsoft.Xna.Framework.Quaternion, System.Single, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 887
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> and a scalar.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Quaternion quaternion1, float scaleFactor, out Quaternion result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: scaleFactor
      type: System.Single
      description: Scalar value.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion multiplication with a scalar as an output parameter.
    content.vb: Public Shared Sub Multiply(ByRef quaternion1 As Quaternion, scaleFactor As Single, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Multiply*
  nameWithType.vb: Quaternion.Multiply(ByRef Quaternion, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Multiply(ByRef Microsoft.Xna.Framework.Quaternion, System.Single, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Multiply(ByRef Quaternion, Single, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Multiply(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply(ref Microsoft.Xna.Framework.Quaternion, ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 901
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of two quaternions.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion multiplication as an output parameter.
    content.vb: Public Shared Sub Multiply(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Multiply*
  nameWithType.vb: Quaternion.Multiply(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Multiply(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Multiply(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)
  id: Negate(Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Negate(Quaternion)
  nameWithType: Quaternion.Negate(Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Negate
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 930
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nFlips the sign of the all the quaternion components.\n"
  example: []
  syntax:
    content: public static Quaternion Negate(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion negation.
    content.vb: Public Shared Function Negate(quaternion As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Negate(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Negate(ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Negate(ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Negate
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 940
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nFlips the sign of the all the quaternion components.\n"
  example: []
  syntax:
    content: public static void Negate(ref Quaternion quaternion, out Quaternion result)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion negation as an output parameter.
    content.vb: Public Shared Sub Negate(ByRef quaternion As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Negate*
  nameWithType.vb: Quaternion.Negate(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Negate(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Negate(ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.Normalize
  commentId: M:Microsoft.Xna.Framework.Quaternion.Normalize
  id: Normalize
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Quaternion.Normalize()
  fullName: Microsoft.Xna.Framework.Quaternion.Normalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 955
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nScales the quaternion magnitude to unit length.\n"
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize
  overload: Microsoft.Xna.Framework.Quaternion.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)
  id: Normalize(Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Normalize(Quaternion)
  nameWithType: Quaternion.Normalize(Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 969
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nScales the quaternion magnitude to unit length.\n"
  example: []
  syntax:
    content: public static Quaternion Normalize(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The unit length quaternion.
    content.vb: Public Shared Function Normalize(quaternion As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  commentId: M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  id: Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Normalize(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Normalize(ref Quaternion, out Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Normalize(ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 985
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nScales the quaternion magnitude to unit length.\n"
  example: []
  syntax:
    content: public static void Normalize(ref Quaternion quaternion, out Quaternion result)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Quaternion
      description: The unit length quaternion an output parameter.
    content.vb: Public Shared Sub Normalize(ByRef quaternion As Quaternion, ByRef result As Quaternion)
  overload: Microsoft.Xna.Framework.Quaternion.Normalize*
  nameWithType.vb: Quaternion.Normalize(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Quaternion.Normalize(ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Quaternion)
  name.vb: Normalize(ByRef Quaternion, ByRef Quaternion)
- uid: Microsoft.Xna.Framework.Quaternion.ToString
  commentId: M:Microsoft.Xna.Framework.Quaternion.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Quaternion.ToString()
  fullName: Microsoft.Xna.Framework.Quaternion.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1001
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of this <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> in the format:\n{X:[<xref href=\"Microsoft.Xna.Framework.Quaternion.X\" data-throw-if-not-resolved=\"false\"></xref>] Y:[<xref href=\"Microsoft.Xna.Framework.Quaternion.Y\" data-throw-if-not-resolved=\"false\"></xref>] Z:[<xref href=\"Microsoft.Xna.Framework.Quaternion.Z\" data-throw-if-not-resolved=\"false\"></xref>] W:[<xref href=\"Microsoft.Xna.Framework.Quaternion.W\" data-throw-if-not-resolved=\"false\"></xref>]}\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of this <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Quaternion.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Quaternion.ToVector4
  commentId: M:Microsoft.Xna.Framework.Quaternion.ToVector4
  id: ToVector4
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: ToVector4()
  nameWithType: Quaternion.ToVector4()
  fullName: Microsoft.Xna.Framework.Quaternion.ToVector4()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToVector4
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1010
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets a <xref href=\"Microsoft.Xna.Framework.Vector4\" data-throw-if-not-resolved=\"false\"></xref> representation for this object.\n"
  example: []
  syntax:
    content: public Vector4 ToVector4()
    return:
      type: Microsoft.Xna.Framework.Vector4
      description: A <xref href="Microsoft.Xna.Framework.Vector4" data-throw-if-not-resolved="false"></xref> representation for this object.
    content.vb: Public Function ToVector4 As Vector4
  overload: Microsoft.Xna.Framework.Quaternion.ToVector4*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Addition(Quaternion, Quaternion)
  nameWithType: Quaternion.Addition(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Addition(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Addition
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1025
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAdds two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion operator +(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> on the left of the add sign.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> on the right of the add sign.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: Sum of the vectors.
    content.vb: Public Shared Operator +(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Division(Quaternion, Quaternion)
  nameWithType: Quaternion.Division(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Division(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Division
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1041
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides a <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> by the other <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Quaternion operator /(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> on the left of the div sign.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Divisor <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> on the right of the div sign.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of dividing the quaternions.
    content.vb: Public Shared Operator /(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Equality(Quaternion, Quaternion)
  nameWithType: Quaternion.Equality(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Equality(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1071
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> instance on the left of the equal sign.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> instance on the right of the equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator =(quaternion1 As Quaternion, quaternion2 As Quaternion) As Boolean
  overload: Microsoft.Xna.Framework.Quaternion.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Inequality(Quaternion, Quaternion)
  nameWithType: Quaternion.Inequality(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Inequality(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1082
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> instance on the left of the not equal sign.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> instance on the right of the not equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are not equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator <>(quaternion1 As Quaternion, quaternion2 As Quaternion) As Boolean
  overload: Microsoft.Xna.Framework.Quaternion.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Quaternion)
  nameWithType: Quaternion.Multiply(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1097
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion operator *(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> on the left of the mul sign.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: Result of the quaternions multiplication.
    content.vb: Public Shared Operator *(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  id: op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Single)
  nameWithType: Quaternion.Multiply(Quaternion, Single)
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion, System.Single)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1125
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of quaternion by a scalar.\n"
  example: []
  syntax:
    content: public static Quaternion operator *(Quaternion quaternion1, float scaleFactor)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the mul sign.
    - id: scaleFactor
      type: System.Single
      description: Scalar value on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: Result of the quaternion multiplication with a scalar.
    content.vb: Public Shared Operator *(quaternion1 As Quaternion, scaleFactor As Single) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  id: op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: Subtraction(Quaternion, Quaternion)
  nameWithType: Quaternion.Subtraction(Quaternion, Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.Subtraction(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Subtraction
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1141
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nSubtracts a <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Quaternion operator -(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the sub sign.
    - id: quaternion2
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the right of the sub sign.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: Result of the quaternion subtraction.
    content.vb: Public Shared Operator -(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)
  id: op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Quaternion
  langs:
  - csharp
  - vb
  name: UnaryNegation(Quaternion)
  nameWithType: Quaternion.UnaryNegation(Quaternion)
  fullName: Microsoft.Xna.Framework.Quaternion.UnaryNegation(Microsoft.Xna.Framework.Quaternion)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Quaternion.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_UnaryNegation
    path: ../MonoGame.Framework/Quaternion.cs
    startLine: 1157
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nFlips the sign of the all the quaternion components.\n"
  example: []
  syntax:
    content: public static Quaternion operator -(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: Source <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> on the right of the sub sign.
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The result of the quaternion negation.
    content.vb: Public Shared Operator -(quaternion As Quaternion) As Quaternion
  overload: Microsoft.Xna.Framework.Quaternion.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.IEquatable{Microsoft.Xna.Framework.Quaternion}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Quaternion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Quaternion>
  nameWithType: IEquatable<Quaternion>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Quaternion>
  nameWithType.vb: IEquatable(Of Quaternion)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Quaternion)
  name.vb: IEquatable(Of Quaternion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Microsoft.Xna.Framework.Quaternion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Microsoft.Xna.Framework.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Quaternion
  commentId: T:Microsoft.Xna.Framework.Quaternion
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: Microsoft.Xna.Framework.Quaternion
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Quaternion.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.#ctor
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion.Quaternion
  fullName: Microsoft.Xna.Framework.Quaternion.Quaternion
- uid: Microsoft.Xna.Framework.Vector3
  commentId: T:Microsoft.Xna.Framework.Vector3
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector3
  nameWithType: Vector3
  fullName: Microsoft.Xna.Framework.Vector3
- uid: Microsoft.Xna.Framework.Vector4
  commentId: T:Microsoft.Xna.Framework.Vector4
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector4
  nameWithType: Vector4
  fullName: Microsoft.Xna.Framework.Vector4
- uid: Microsoft.Xna.Framework.Quaternion.Identity*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Identity
  isExternal: false
  name: Identity
  nameWithType: Quaternion.Identity
  fullName: Microsoft.Xna.Framework.Quaternion.Identity
- uid: Microsoft.Xna.Framework.Quaternion.Add*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Add
  isExternal: false
  name: Add
  nameWithType: Quaternion.Add
  fullName: Microsoft.Xna.Framework.Quaternion.Add
- uid: Microsoft.Xna.Framework.Quaternion.Concatenate*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Concatenate
  isExternal: false
  name: Concatenate
  nameWithType: Quaternion.Concatenate
  fullName: Microsoft.Xna.Framework.Quaternion.Concatenate
- uid: Microsoft.Xna.Framework.Quaternion.Conjugate*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Conjugate
  isExternal: false
  name: Conjugate
  nameWithType: Quaternion.Conjugate
  fullName: Microsoft.Xna.Framework.Quaternion.Conjugate
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle
  isExternal: false
  name: CreateFromAxisAngle
  nameWithType: Quaternion.CreateFromAxisAngle
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle
- uid: Microsoft.Xna.Framework.Matrix
  commentId: T:Microsoft.Xna.Framework.Matrix
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: Microsoft.Xna.Framework.Matrix
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix
  isExternal: false
  name: CreateFromRotationMatrix
  nameWithType: Quaternion.CreateFromRotationMatrix
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix
- uid: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll
  isExternal: false
  name: CreateFromYawPitchRoll
  nameWithType: Quaternion.CreateFromYawPitchRoll
  fullName: Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll
- uid: Microsoft.Xna.Framework.Quaternion.Divide*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Divide
  isExternal: false
  name: Divide
  nameWithType: Quaternion.Divide
  fullName: Microsoft.Xna.Framework.Quaternion.Divide
- uid: Microsoft.Xna.Framework.Quaternion.Dot*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Dot
  isExternal: false
  name: Dot
  nameWithType: Quaternion.Dot
  fullName: Microsoft.Xna.Framework.Quaternion.Dot
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Quaternion.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Equals
  isExternal: false
  name: Equals
  nameWithType: Quaternion.Equals
  fullName: Microsoft.Xna.Framework.Quaternion.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{Microsoft.Xna.Framework.Quaternion}.Equals(Microsoft.Xna.Framework.Quaternion)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Quaternion}.Equals(Microsoft.Xna.Framework.Quaternion)
  parent: System.IEquatable{Microsoft.Xna.Framework.Quaternion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Quaternion)
  nameWithType: IEquatable<Quaternion>.Equals(Quaternion)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Quaternion>.Equals(Microsoft.Xna.Framework.Quaternion)
  nameWithType.vb: IEquatable(Of Quaternion).Equals(Quaternion)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Quaternion).Equals(Microsoft.Xna.Framework.Quaternion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Quaternion>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Quaternion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Microsoft.Xna.Framework.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Quaternion).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Quaternion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Microsoft.Xna.Framework.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Quaternion.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Quaternion.GetHashCode
  fullName: Microsoft.Xna.Framework.Quaternion.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Quaternion.Inverse*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Inverse
  isExternal: false
  name: Inverse
  nameWithType: Quaternion.Inverse
  fullName: Microsoft.Xna.Framework.Quaternion.Inverse
- uid: Microsoft.Xna.Framework.Quaternion.Length*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Length
  isExternal: false
  name: Length
  nameWithType: Quaternion.Length
  fullName: Microsoft.Xna.Framework.Quaternion.Length
- uid: Microsoft.Xna.Framework.Quaternion.LengthSquared*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.LengthSquared
  isExternal: false
  name: LengthSquared
  nameWithType: Quaternion.LengthSquared
  fullName: Microsoft.Xna.Framework.Quaternion.LengthSquared
- uid: Microsoft.Xna.Framework.Quaternion.Lerp*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Lerp
  isExternal: false
  name: Lerp
  nameWithType: Quaternion.Lerp
  fullName: Microsoft.Xna.Framework.Quaternion.Lerp
- uid: Microsoft.Xna.Framework.Quaternion.Slerp*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Slerp
  isExternal: false
  name: Slerp
  nameWithType: Quaternion.Slerp
  fullName: Microsoft.Xna.Framework.Quaternion.Slerp
- uid: Microsoft.Xna.Framework.Quaternion.Subtract*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Subtract
  isExternal: false
  name: Subtract
  nameWithType: Quaternion.Subtract
  fullName: Microsoft.Xna.Framework.Quaternion.Subtract
- uid: Microsoft.Xna.Framework.Quaternion.Multiply*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Multiply
  isExternal: false
  name: Multiply
  nameWithType: Quaternion.Multiply
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply
- uid: Microsoft.Xna.Framework.Quaternion.Negate*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Negate
  isExternal: false
  name: Negate
  nameWithType: Quaternion.Negate
  fullName: Microsoft.Xna.Framework.Quaternion.Negate
- uid: Microsoft.Xna.Framework.Quaternion.Normalize*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.Normalize
  isExternal: false
  name: Normalize
  nameWithType: Quaternion.Normalize
  fullName: Microsoft.Xna.Framework.Quaternion.Normalize
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Quaternion.X
  commentId: F:Microsoft.Xna.Framework.Quaternion.X
- uid: Microsoft.Xna.Framework.Quaternion.Y
  commentId: F:Microsoft.Xna.Framework.Quaternion.Y
- uid: Microsoft.Xna.Framework.Quaternion.Z
  commentId: F:Microsoft.Xna.Framework.Quaternion.Z
- uid: Microsoft.Xna.Framework.Quaternion.W
  commentId: F:Microsoft.Xna.Framework.Quaternion.W
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Quaternion.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.ToString
  isExternal: false
  name: ToString
  nameWithType: Quaternion.ToString
  fullName: Microsoft.Xna.Framework.Quaternion.ToString
- uid: Microsoft.Xna.Framework.Quaternion.ToVector4*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.ToVector4
  isExternal: false
  name: ToVector4
  nameWithType: Quaternion.ToVector4
  fullName: Microsoft.Xna.Framework.Quaternion.ToVector4
- uid: Microsoft.Xna.Framework.Quaternion.op_Addition*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.op_Addition
  isExternal: false
  name: Addition
  nameWithType: Quaternion.Addition
  fullName: Microsoft.Xna.Framework.Quaternion.Addition
- uid: Microsoft.Xna.Framework.Quaternion.op_Division*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.op_Division
  isExternal: false
  name: Division
  nameWithType: Quaternion.Division
  fullName: Microsoft.Xna.Framework.Quaternion.Division
- uid: Microsoft.Xna.Framework.Quaternion.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Quaternion.Equality
  fullName: Microsoft.Xna.Framework.Quaternion.Equality
- uid: Microsoft.Xna.Framework.Quaternion.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Quaternion.Inequality
  fullName: Microsoft.Xna.Framework.Quaternion.Inequality
- uid: Microsoft.Xna.Framework.Quaternion.op_Multiply*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.op_Multiply
  isExternal: false
  name: Multiply
  nameWithType: Quaternion.Multiply
  fullName: Microsoft.Xna.Framework.Quaternion.Multiply
- uid: Microsoft.Xna.Framework.Quaternion.op_Subtraction*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.op_Subtraction
  isExternal: false
  name: Subtraction
  nameWithType: Quaternion.Subtraction
  fullName: Microsoft.Xna.Framework.Quaternion.Subtraction
- uid: Microsoft.Xna.Framework.Quaternion.op_UnaryNegation*
  commentId: Overload:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation
  isExternal: false
  name: UnaryNegation
  nameWithType: Quaternion.UnaryNegation
  fullName: Microsoft.Xna.Framework.Quaternion.UnaryNegation
