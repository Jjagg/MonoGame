### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities
  commentId: T:Microsoft.Xna.Framework.Input.GamePadCapabilities
  id: GamePadCapabilities
  parent: Microsoft.Xna.Framework.Input
  children:
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals(System.Object)
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Equality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Inequality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  - Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString
  langs:
  - csharp
  - vb
  name: GamePadCapabilities
  nameWithType: GamePadCapabilities
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GamePadCapabilities
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 9
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nA stuct that represents the controller capabilities.\n"
  example: []
  syntax:
    content: public struct GamePadCapabilities
    content.vb: Public Structure GamePadCapabilities
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected
  id: IsConnected
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: GamePadCapabilities.IsConnected
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsConnected
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 15
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the controller is connected.\n"
  example: []
  syntax:
    content: public bool IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it is connected; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsConnected As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName
  id: DisplayName
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: GamePadCapabilities.DisplayName
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DisplayName
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 23
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the gamepad display name.\n\nThis property is not available in XNA.\n"
  example: []
  syntax:
    content: public string DisplayName { get; }
    parameters: []
    return:
      type: System.String
      description: String representing the display name of the gamepad.
    content.vb: Public ReadOnly Property DisplayName As String
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier
  id: Identifier
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: Identifier
  nameWithType: GamePadCapabilities.Identifier
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Identifier
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 31
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the unique identifier of the gamepad.\n\nThis property is not available in XNA.\n"
  example: []
  syntax:
    content: public string Identifier { get; }
    parameters: []
    return:
      type: System.String
      description: String representing the unique identifier of the gamepad.
    content.vb: Public ReadOnly Property Identifier As String
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton
  id: HasAButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasAButton
  nameWithType: GamePadCapabilities.HasAButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasAButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 37
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the button A.\n"
  example: []
  syntax:
    content: public bool HasAButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the button A; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasAButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton
  id: HasBackButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasBackButton
  nameWithType: GamePadCapabilities.HasBackButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasBackButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 43
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the button Back.\n"
  example: []
  syntax:
    content: public bool HasBackButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the button Back; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasBackButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton
  id: HasBButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasBButton
  nameWithType: GamePadCapabilities.HasBButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasBButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 49
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the button B.\n"
  example: []
  syntax:
    content: public bool HasBButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the button B; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasBButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton
  id: HasDPadDownButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasDPadDownButton
  nameWithType: GamePadCapabilities.HasDPadDownButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasDPadDownButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 55
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the directional pad down button.\n"
  example: []
  syntax:
    content: public bool HasDPadDownButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the directional pad down button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasDPadDownButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton
  id: HasDPadLeftButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasDPadLeftButton
  nameWithType: GamePadCapabilities.HasDPadLeftButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasDPadLeftButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 61
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the directional pad left button.\n"
  example: []
  syntax:
    content: public bool HasDPadLeftButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the directional pad left button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasDPadLeftButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton
  id: HasDPadRightButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasDPadRightButton
  nameWithType: GamePadCapabilities.HasDPadRightButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasDPadRightButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 67
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the directional pad right button.\n"
  example: []
  syntax:
    content: public bool HasDPadRightButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the directional pad right button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasDPadRightButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton
  id: HasDPadUpButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasDPadUpButton
  nameWithType: GamePadCapabilities.HasDPadUpButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasDPadUpButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 73
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the directional pad up button.\n"
  example: []
  syntax:
    content: public bool HasDPadUpButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the directional pad up button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasDPadUpButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton
  id: HasLeftShoulderButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasLeftShoulderButton
  nameWithType: GamePadCapabilities.HasLeftShoulderButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasLeftShoulderButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 79
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the left shoulder button.\n"
  example: []
  syntax:
    content: public bool HasLeftShoulderButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the left shoulder button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasLeftShoulderButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton
  id: HasLeftStickButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasLeftStickButton
  nameWithType: GamePadCapabilities.HasLeftStickButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasLeftStickButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 85
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the left stick button.\n"
  example: []
  syntax:
    content: public bool HasLeftStickButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the left stick button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasLeftStickButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton
  id: HasRightShoulderButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasRightShoulderButton
  nameWithType: GamePadCapabilities.HasRightShoulderButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasRightShoulderButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 91
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the right shoulder button.\n"
  example: []
  syntax:
    content: public bool HasRightShoulderButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the right shoulder button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasRightShoulderButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton
  id: HasRightStickButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasRightStickButton
  nameWithType: GamePadCapabilities.HasRightStickButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasRightStickButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 97
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the right stick button.\n"
  example: []
  syntax:
    content: public bool HasRightStickButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the right stick button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasRightStickButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton
  id: HasStartButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasStartButton
  nameWithType: GamePadCapabilities.HasStartButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasStartButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 103
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the button Start.\n"
  example: []
  syntax:
    content: public bool HasStartButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the button Start; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasStartButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton
  id: HasXButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasXButton
  nameWithType: GamePadCapabilities.HasXButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasXButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 109
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the button X.\n"
  example: []
  syntax:
    content: public bool HasXButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the button X; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasXButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton
  id: HasYButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasYButton
  nameWithType: GamePadCapabilities.HasYButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasYButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 115
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the button Y.\n"
  example: []
  syntax:
    content: public bool HasYButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the button Y; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasYButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton
  id: HasBigButton
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasBigButton
  nameWithType: GamePadCapabilities.HasBigButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasBigButton
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 121
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the guide button.\n"
  example: []
  syntax:
    content: public bool HasBigButton { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the guide button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasBigButton As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick
  id: HasLeftXThumbStick
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasLeftXThumbStick
  nameWithType: GamePadCapabilities.HasLeftXThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasLeftXThumbStick
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 127
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has X axis for the left stick (thumbstick) button.\n"
  example: []
  syntax:
    content: public bool HasLeftXThumbStick { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has X axis for the left stick (thumbstick) button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasLeftXThumbStick As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick
  id: HasLeftYThumbStick
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasLeftYThumbStick
  nameWithType: GamePadCapabilities.HasLeftYThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasLeftYThumbStick
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 133
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has Y axis for the left stick (thumbstick) button.\n"
  example: []
  syntax:
    content: public bool HasLeftYThumbStick { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has Y axis for the left stick (thumbstick) button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasLeftYThumbStick As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick
  id: HasRightXThumbStick
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasRightXThumbStick
  nameWithType: GamePadCapabilities.HasRightXThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasRightXThumbStick
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 139
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has X axis for the right stick (thumbstick) button.\n"
  example: []
  syntax:
    content: public bool HasRightXThumbStick { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has X axis for the right stick (thumbstick) button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasRightXThumbStick As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick
  id: HasRightYThumbStick
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasRightYThumbStick
  nameWithType: GamePadCapabilities.HasRightYThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasRightYThumbStick
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 145
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has Y axis for the right stick (thumbstick) button.\n"
  example: []
  syntax:
    content: public bool HasRightYThumbStick { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has Y axis for the right stick (thumbstick) button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasRightYThumbStick As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger
  id: HasLeftTrigger
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasLeftTrigger
  nameWithType: GamePadCapabilities.HasLeftTrigger
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasLeftTrigger
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 151
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the left trigger button.\n"
  example: []
  syntax:
    content: public bool HasLeftTrigger { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the left trigger button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasLeftTrigger As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger
  id: HasRightTrigger
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasRightTrigger
  nameWithType: GamePadCapabilities.HasRightTrigger
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasRightTrigger
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 157
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the right trigger button.\n"
  example: []
  syntax:
    content: public bool HasRightTrigger { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the right trigger button; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasRightTrigger As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor
  id: HasLeftVibrationMotor
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasLeftVibrationMotor
  nameWithType: GamePadCapabilities.HasLeftVibrationMotor
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasLeftVibrationMotor
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 163
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the left vibration motor.\n"
  example: []
  syntax:
    content: public bool HasLeftVibrationMotor { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the left vibration motor; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasLeftVibrationMotor As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor
  id: HasRightVibrationMotor
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasRightVibrationMotor
  nameWithType: GamePadCapabilities.HasRightVibrationMotor
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasRightVibrationMotor
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 169
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has the right vibration motor.\n"
  example: []
  syntax:
    content: public bool HasRightVibrationMotor { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has the right vibration motor; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasRightVibrationMotor As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport
  id: HasVoiceSupport
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: HasVoiceSupport
  nameWithType: GamePadCapabilities.HasVoiceSupport
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HasVoiceSupport
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 175
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating whether the controller has a microphone.\n"
  example: []
  syntax:
    content: public bool HasVoiceSupport { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if it has a microphone; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasVoiceSupport As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
  id: GamePadType
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: GamePadType
  nameWithType: GamePadCapabilities.GamePadType
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GamePadType
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 181
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets the type of the controller.\n"
  example: []
  syntax:
    content: public GamePadType GamePadType { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.GamePadType
      description: A <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType" data-throw-if-not-resolved="false"></xref> representing the controller type..
    content.vb: Public ReadOnly Property GamePadType As GamePadType
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Equality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Equality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  id: op_Equality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: Equality(GamePadCapabilities, GamePadCapabilities)
  nameWithType: GamePadCapabilities.Equality(GamePadCapabilities, GamePadCapabilities)
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Equality(Microsoft.Xna.Framework.Input.GamePadCapabilities, Microsoft.Xna.Framework.Input.GamePadCapabilities)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 190
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether a specified instance of <xref href=\"Microsoft.Xna.Framework.Input.GamePadCapabilities\" data-throw-if-not-resolved=\"false\"></xref>\nis equal to another specified <xref href=\"Microsoft.Xna.Framework.Input.GamePadCapabilities\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool operator ==(GamePadCapabilities left, GamePadCapabilities right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadCapabilities
      description: The first <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadCapabilities
      description: The second <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if <code>left</code> and <code>right</code> are equal; otherwise, <code>false</code>.
    content.vb: Public Shared Operator =(left As GamePadCapabilities, right As GamePadCapabilities) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Inequality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Inequality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  id: op_Inequality(Microsoft.Xna.Framework.Input.GamePadCapabilities,Microsoft.Xna.Framework.Input.GamePadCapabilities)
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: Inequality(GamePadCapabilities, GamePadCapabilities)
  nameWithType: GamePadCapabilities.Inequality(GamePadCapabilities, GamePadCapabilities)
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Inequality(Microsoft.Xna.Framework.Input.GamePadCapabilities, Microsoft.Xna.Framework.Input.GamePadCapabilities)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 233
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether a specified instance of <xref href=\"Microsoft.Xna.Framework.Input.GamePadCapabilities\" data-throw-if-not-resolved=\"false\"></xref>\nis not equal to another specified <xref href=\"Microsoft.Xna.Framework.Input.GamePadCapabilities\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool operator !=(GamePadCapabilities left, GamePadCapabilities right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadCapabilities
      description: The first <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadCapabilities
      description: The second <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As GamePadCapabilities, right As GamePadCapabilities) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: GamePadCapabilities.Equals(Object)
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 244
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"Microsoft.Xna.Framework.Input.GamePadCapabilities\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with the current <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to the current

        <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities" data-throw-if-not-resolved="false"></xref>; otherwise, <code>false</code>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GamePadCapabilities.GetHashCode()
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 254
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nServes as a hash function for a <xref href=\"Microsoft.Xna.Framework.Input.GamePadCapabilities\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a

        hash table.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString
  commentId: M:Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Input.GamePadCapabilities
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GamePadCapabilities.ToString()
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadCapabilities.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Input/GamePadCapabilities.cs
    startLine: 263
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"Microsoft.Xna.Framework.Input.GamePadCapabilities\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="Microsoft.Xna.Framework.Input.GamePadCapabilities" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: false
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected
  isExternal: false
  name: IsConnected
  nameWithType: GamePadCapabilities.IsConnected
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName
  isExternal: false
  name: DisplayName
  nameWithType: GamePadCapabilities.DisplayName
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.DisplayName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier
  isExternal: false
  name: Identifier
  nameWithType: GamePadCapabilities.Identifier
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Identifier
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton
  isExternal: false
  name: HasAButton
  nameWithType: GamePadCapabilities.HasAButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton
  isExternal: false
  name: HasBackButton
  nameWithType: GamePadCapabilities.HasBackButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton
  isExternal: false
  name: HasBButton
  nameWithType: GamePadCapabilities.HasBButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton
  isExternal: false
  name: HasDPadDownButton
  nameWithType: GamePadCapabilities.HasDPadDownButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton
  isExternal: false
  name: HasDPadLeftButton
  nameWithType: GamePadCapabilities.HasDPadLeftButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton
  isExternal: false
  name: HasDPadRightButton
  nameWithType: GamePadCapabilities.HasDPadRightButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton
  isExternal: false
  name: HasDPadUpButton
  nameWithType: GamePadCapabilities.HasDPadUpButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton
  isExternal: false
  name: HasLeftShoulderButton
  nameWithType: GamePadCapabilities.HasLeftShoulderButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton
  isExternal: false
  name: HasLeftStickButton
  nameWithType: GamePadCapabilities.HasLeftStickButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton
  isExternal: false
  name: HasRightShoulderButton
  nameWithType: GamePadCapabilities.HasRightShoulderButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton
  isExternal: false
  name: HasRightStickButton
  nameWithType: GamePadCapabilities.HasRightStickButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton
  isExternal: false
  name: HasStartButton
  nameWithType: GamePadCapabilities.HasStartButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton
  isExternal: false
  name: HasXButton
  nameWithType: GamePadCapabilities.HasXButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton
  isExternal: false
  name: HasYButton
  nameWithType: GamePadCapabilities.HasYButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton
  isExternal: false
  name: HasBigButton
  nameWithType: GamePadCapabilities.HasBigButton
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick
  isExternal: false
  name: HasLeftXThumbStick
  nameWithType: GamePadCapabilities.HasLeftXThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick
  isExternal: false
  name: HasLeftYThumbStick
  nameWithType: GamePadCapabilities.HasLeftYThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick
  isExternal: false
  name: HasRightXThumbStick
  nameWithType: GamePadCapabilities.HasRightXThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick
  isExternal: false
  name: HasRightYThumbStick
  nameWithType: GamePadCapabilities.HasRightYThumbStick
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger
  isExternal: false
  name: HasLeftTrigger
  nameWithType: GamePadCapabilities.HasLeftTrigger
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger
  isExternal: false
  name: HasRightTrigger
  nameWithType: GamePadCapabilities.HasRightTrigger
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor
  isExternal: false
  name: HasLeftVibrationMotor
  nameWithType: GamePadCapabilities.HasLeftVibrationMotor
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor
  isExternal: false
  name: HasRightVibrationMotor
  nameWithType: GamePadCapabilities.HasRightVibrationMotor
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport
  isExternal: false
  name: HasVoiceSupport
  nameWithType: GamePadCapabilities.HasVoiceSupport
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
  commentId: P:Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
  isExternal: false
  name: GamePadType
  nameWithType: GamePadCapabilities.GamePadType
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType
- uid: Microsoft.Xna.Framework.Input.GamePadType
  commentId: T:Microsoft.Xna.Framework.Input.GamePadType
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadType
  nameWithType: GamePadType
  fullName: Microsoft.Xna.Framework.Input.GamePadType
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities
  commentId: T:Microsoft.Xna.Framework.Input.GamePadCapabilities
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadCapabilities
  nameWithType: GamePadCapabilities
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Equality
  isExternal: false
  name: Equality
  nameWithType: GamePadCapabilities.Equality
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Equality
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: GamePadCapabilities.Inequality
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals
  isExternal: false
  name: Equals
  nameWithType: GamePadCapabilities.Equals
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: GamePadCapabilities.GetHashCode
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString
  isExternal: false
  name: ToString
  nameWithType: GamePadCapabilities.ToString
  fullName: Microsoft.Xna.Framework.Input.GamePadCapabilities.ToString
