### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection
  commentId: T:Microsoft.Xna.Framework.Media.PlaylistCollection
  id: PlaylistCollection
  parent: Microsoft.Xna.Framework.Media
  children:
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Add(Microsoft.Xna.Framework.Media.Playlist)
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Clear
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Clone
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Contains(Microsoft.Xna.Framework.Media.Playlist)
  - Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo(Microsoft.Xna.Framework.Media.Playlist[],System.Int32)
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Count
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose
  - Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator
  - Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf(Microsoft.Xna.Framework.Media.Playlist)
  - Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Item(System.Int32)
  - Microsoft.Xna.Framework.Media.PlaylistCollection.Remove(Microsoft.Xna.Framework.Media.Playlist)
  - Microsoft.Xna.Framework.Media.PlaylistCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: PlaylistCollection
  nameWithType: PlaylistCollection
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PlaylistCollection
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 11
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: 'public sealed class PlaylistCollection : ICollection<Playlist>, IEnumerable<Playlist>, IEnumerable, IDisposable'
    content.vb: >-
      Public NotInheritable Class PlaylistCollection
          Implements ICollection(Of Playlist), IEnumerable(Of Playlist), IEnumerable, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  - System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Media.Playlist}
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PlaylistCollection.Dispose()
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 16
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: PlaylistCollection.GetEnumerator()
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetEnumerator
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 20
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public IEnumerator<Playlist> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Microsoft.Xna.Framework.Media.Playlist}
    content.vb: Public Function GetEnumerator As IEnumerator(Of Playlist)
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Media.Playlist}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: PlaylistCollection.IEnumerable.GetEnumerator()
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 25
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: PlaylistCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Count
  commentId: P:Microsoft.Xna.Framework.Media.PlaylistCollection.Count
  id: Count
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: PlaylistCollection.Count
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Count
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Count
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 30
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly
  commentId: P:Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: PlaylistCollection.IsReadOnly
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsReadOnly
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 38
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Item(System.Int32)
  commentId: P:Microsoft.Xna.Framework.Media.PlaylistCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: PlaylistCollection.Item[Int32]
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: this[]
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 43
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public Playlist this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: Microsoft.Xna.Framework.Media.Playlist
    content.vb: Public ReadOnly Property Item(index As Integer) As Playlist
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Item*
  nameWithType.vb: PlaylistCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Xna.Framework.Media.PlaylistCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Add(Microsoft.Xna.Framework.Media.Playlist)
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.Add(Microsoft.Xna.Framework.Media.Playlist)
  id: Add(Microsoft.Xna.Framework.Media.Playlist)
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Add(Playlist)
  nameWithType: PlaylistCollection.Add(Playlist)
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Add(Microsoft.Xna.Framework.Media.Playlist)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 51
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public void Add(Playlist item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Media.Playlist
    content.vb: Public Sub Add(item As Playlist)
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Add*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Add(Microsoft.Xna.Framework.Media.Playlist)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Clear
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.Clear
  id: Clear
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: PlaylistCollection.Clear()
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Clear()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clear
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 74
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Clear*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Clone
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.Clone
  id: Clone
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: PlaylistCollection.Clone()
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Clone()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clone
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 79
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public PlaylistCollection Clone()
    return:
      type: Microsoft.Xna.Framework.Media.PlaylistCollection
    content.vb: Public Function Clone As PlaylistCollection
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Contains(Microsoft.Xna.Framework.Media.Playlist)
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.Contains(Microsoft.Xna.Framework.Media.Playlist)
  id: Contains(Microsoft.Xna.Framework.Media.Playlist)
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Contains(Playlist)
  nameWithType: PlaylistCollection.Contains(Playlist)
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Contains(Microsoft.Xna.Framework.Media.Playlist)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 87
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public bool Contains(Playlist item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Media.Playlist
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As Playlist) As Boolean
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Contains(Microsoft.Xna.Framework.Media.Playlist)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo(Microsoft.Xna.Framework.Media.Playlist[],System.Int32)
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo(Microsoft.Xna.Framework.Media.Playlist[],System.Int32)
  id: CopyTo(Microsoft.Xna.Framework.Media.Playlist[],System.Int32)
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: CopyTo(Playlist[], Int32)
  nameWithType: PlaylistCollection.CopyTo(Playlist[], Int32)
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo(Microsoft.Xna.Framework.Media.Playlist[], System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CopyTo
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 92
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public void CopyTo(Playlist[] array, int arrayIndex)
    parameters:
    - id: array
      type: Microsoft.Xna.Framework.Media.Playlist[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As Playlist(), arrayIndex As Integer)
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.CopyTo(Microsoft.Xna.Framework.Media.Playlist[],System.Int32)
  nameWithType.vb: PlaylistCollection.CopyTo(Playlist(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo(Microsoft.Xna.Framework.Media.Playlist(), System.Int32)
  name.vb: CopyTo(Playlist(), Int32)
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf(Microsoft.Xna.Framework.Media.Playlist)
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf(Microsoft.Xna.Framework.Media.Playlist)
  id: IndexOf(Microsoft.Xna.Framework.Media.Playlist)
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: IndexOf(Playlist)
  nameWithType: PlaylistCollection.IndexOf(Playlist)
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf(Microsoft.Xna.Framework.Media.Playlist)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IndexOf
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 97
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public int IndexOf(Playlist item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Media.Playlist
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As Playlist) As Integer
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Remove(Microsoft.Xna.Framework.Media.Playlist)
  commentId: M:Microsoft.Xna.Framework.Media.PlaylistCollection.Remove(Microsoft.Xna.Framework.Media.Playlist)
  id: Remove(Microsoft.Xna.Framework.Media.Playlist)
  parent: Microsoft.Xna.Framework.Media.PlaylistCollection
  langs:
  - csharp
  - vb
  name: Remove(Playlist)
  nameWithType: PlaylistCollection.Remove(Playlist)
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Remove(Microsoft.Xna.Framework.Media.Playlist)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/PlaylistCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Remove
    path: ../MonoGame.Framework/Media/PlaylistCollection.cs
    startLine: 102
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public bool Remove(Playlist item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Media.Playlist
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As Playlist) As Boolean
  overload: Microsoft.Xna.Framework.Media.PlaylistCollection.Remove*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Remove(Microsoft.Xna.Framework.Media.Playlist)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Xna.Framework.Media
  commentId: N:Microsoft.Xna.Framework.Media
  isExternal: false
  name: Microsoft.Xna.Framework.Media
  nameWithType: Microsoft.Xna.Framework.Media
  fullName: Microsoft.Xna.Framework.Media
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Playlist>
  nameWithType: ICollection<Playlist>
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>
  nameWithType.vb: ICollection(Of Playlist)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist)
  name.vb: ICollection(Of Playlist)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Media.Playlist}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Media.Playlist}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Playlist>
  nameWithType: IEnumerable<Playlist>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Media.Playlist>
  nameWithType.vb: IEnumerable(Of Playlist)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Media.Playlist)
  name.vb: IEnumerable(Of Playlist)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose
  isExternal: false
  name: Dispose
  nameWithType: PlaylistCollection.Dispose
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: PlaylistCollection.GetEnumerator
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Media.Playlist}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Media.Playlist}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Playlist>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Media.Playlist>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Playlist).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Media.Playlist).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Playlist>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Media.Playlist>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Playlist).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Media.Playlist).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Microsoft.Xna.Framework.Media.Playlist}
  commentId: T:System.Collections.Generic.IEnumerator{Microsoft.Xna.Framework.Media.Playlist}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Playlist>
  nameWithType: IEnumerator<Playlist>
  fullName: System.Collections.Generic.IEnumerator<Microsoft.Xna.Framework.Media.Playlist>
  nameWithType.vb: IEnumerator(Of Playlist)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Microsoft.Xna.Framework.Media.Playlist)
  name.vb: IEnumerator(Of Playlist)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: PlaylistCollection.IEnumerable.GetEnumerator
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: PlaylistCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Count*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Count
  isExternal: false
  name: Count
  nameWithType: PlaylistCollection.Count
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Count
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Count
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Count
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<Playlist>.Count
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Count
  nameWithType.vb: ICollection(Of Playlist).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: PlaylistCollection.IsReadOnly
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.IsReadOnly
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<Playlist>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.IsReadOnly
  nameWithType.vb: ICollection(Of Playlist).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Item*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Item
  isExternal: false
  name: Item
  nameWithType: PlaylistCollection.Item
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Item
- uid: Microsoft.Xna.Framework.Media.Playlist
  commentId: T:Microsoft.Xna.Framework.Media.Playlist
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: Playlist
  nameWithType: Playlist
  fullName: Microsoft.Xna.Framework.Media.Playlist
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Add*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Add
  isExternal: false
  name: Add
  nameWithType: PlaylistCollection.Add
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Add
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Add(Microsoft.Xna.Framework.Media.Playlist)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Add(Microsoft.Xna.Framework.Media.Playlist)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(Playlist)
  nameWithType: ICollection<Playlist>.Add(Playlist)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Add(Microsoft.Xna.Framework.Media.Playlist)
  nameWithType.vb: ICollection(Of Playlist).Add(Playlist)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Add(Microsoft.Xna.Framework.Media.Playlist)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<Playlist>.Add
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of Playlist).Add
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Clear*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Clear
  isExternal: false
  name: Clear
  nameWithType: PlaylistCollection.Clear
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Clear
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Clear
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Clear
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<Playlist>.Clear()
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Clear()
  nameWithType.vb: ICollection(Of Playlist).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<Playlist>.Clear
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of Playlist).Clear
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Clone*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Clone
  isExternal: false
  name: Clone
  nameWithType: PlaylistCollection.Clone
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Clone
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection
  commentId: T:Microsoft.Xna.Framework.Media.PlaylistCollection
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: PlaylistCollection
  nameWithType: PlaylistCollection
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Contains*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Contains
  isExternal: false
  name: Contains
  nameWithType: PlaylistCollection.Contains
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Contains
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Contains(Microsoft.Xna.Framework.Media.Playlist)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Contains(Microsoft.Xna.Framework.Media.Playlist)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(Playlist)
  nameWithType: ICollection<Playlist>.Contains(Playlist)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Contains(Microsoft.Xna.Framework.Media.Playlist)
  nameWithType.vb: ICollection(Of Playlist).Contains(Playlist)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Contains(Microsoft.Xna.Framework.Media.Playlist)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<Playlist>.Contains
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of Playlist).Contains
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: PlaylistCollection.CopyTo
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.CopyTo
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.CopyTo(Microsoft.Xna.Framework.Media.Playlist[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.CopyTo(Microsoft.Xna.Framework.Media.Playlist[],System.Int32)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Playlist[], Int32)
  nameWithType: ICollection<Playlist>.CopyTo(Playlist[], Int32)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.CopyTo(Microsoft.Xna.Framework.Media.Playlist[], System.Int32)
  nameWithType.vb: ICollection(Of Playlist).CopyTo(Playlist(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).CopyTo(Microsoft.Xna.Framework.Media.Playlist(), System.Int32)
  name.vb: CopyTo(Playlist(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<Playlist>.CopyTo
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of Playlist).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.Playlist[]
  name: Playlist[]
  nameWithType: Playlist[]
  fullName: Microsoft.Xna.Framework.Media.Playlist[]
  nameWithType.vb: Playlist()
  fullName.vb: Microsoft.Xna.Framework.Media.Playlist()
  name.vb: Playlist()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: PlaylistCollection.IndexOf
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.IndexOf
- uid: Microsoft.Xna.Framework.Media.PlaylistCollection.Remove*
  commentId: Overload:Microsoft.Xna.Framework.Media.PlaylistCollection.Remove
  isExternal: false
  name: Remove
  nameWithType: PlaylistCollection.Remove
  fullName: Microsoft.Xna.Framework.Media.PlaylistCollection.Remove
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Remove(Microsoft.Xna.Framework.Media.Playlist)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}.Remove(Microsoft.Xna.Framework.Media.Playlist)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Media.Playlist}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(Playlist)
  nameWithType: ICollection<Playlist>.Remove(Playlist)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Remove(Microsoft.Xna.Framework.Media.Playlist)
  nameWithType.vb: ICollection(Of Playlist).Remove(Playlist)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Remove(Microsoft.Xna.Framework.Media.Playlist)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<Playlist>.Remove
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Media.Playlist>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of Playlist).Remove
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Media.Playlist).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Playlist
    name: Playlist
    nameWithType: Playlist
    fullName: Microsoft.Xna.Framework.Media.Playlist
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
