### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.Microphone
  commentId: T:Microsoft.Xna.Framework.Audio.Microphone
  id: Microphone
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.Microphone.All
  - Microsoft.Xna.Framework.Audio.Microphone.BufferDuration
  - Microsoft.Xna.Framework.Audio.Microphone.BufferReady
  - Microsoft.Xna.Framework.Audio.Microphone.Default
  - Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[])
  - Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration(System.Int32)
  - Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes(System.TimeSpan)
  - Microsoft.Xna.Framework.Audio.Microphone.IsHeadset
  - Microsoft.Xna.Framework.Audio.Microphone.Name
  - Microsoft.Xna.Framework.Audio.Microphone.SampleRate
  - Microsoft.Xna.Framework.Audio.Microphone.Start
  - Microsoft.Xna.Framework.Audio.Microphone.State
  - Microsoft.Xna.Framework.Audio.Microphone.Stop
  langs:
  - csharp
  - vb
  name: Microphone
  nameWithType: Microphone
  fullName: Microsoft.Xna.Framework.Audio.Microphone
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.OpenAL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Microphone
    path: ../MonoGame.Framework/Audio/Microphone.OpenAL.cs
    startLine: 26
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nProvides microphones capture features. \n"
  example: []
  syntax:
    content: public sealed class Microphone
    content.vb: Public NotInheritable Class Microphone
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Xna.Framework.Audio.Microphone.Name
  commentId: F:Microsoft.Xna.Framework.Audio.Microphone.Name
  id: Name
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Microphone.Name
  fullName: Microsoft.Xna.Framework.Audio.Microphone.Name
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Name
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 43
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the friendly name of the microphone.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.Microphone.BufferDuration
  commentId: P:Microsoft.Xna.Framework.Audio.Microphone.BufferDuration
  id: BufferDuration
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: BufferDuration
  nameWithType: Microphone.BufferDuration
  fullName: Microsoft.Xna.Framework.Audio.Microphone.BufferDuration
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: BufferDuration
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 54
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets or sets the capture buffer duration. This value must be greater than 100 milliseconds, lower than 1000 milliseconds, and must be 10 milliseconds aligned (BufferDuration % 10 == 10).\n"
  example: []
  syntax:
    content: public TimeSpan BufferDuration { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property BufferDuration As TimeSpan
  overload: Microsoft.Xna.Framework.Audio.Microphone.BufferDuration*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.Microphone.IsHeadset
  commentId: P:Microsoft.Xna.Framework.Audio.Microphone.IsHeadset
  id: IsHeadset
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: IsHeadset
  nameWithType: Microphone.IsHeadset
  fullName: Microsoft.Xna.Framework.Audio.Microphone.IsHeadset
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsHeadset
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 78
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDetermines if the microphone is a wired headset.\nNote: XNA could know if a headset microphone was plugged in an Xbox 360 controller but MonoGame can&apos;t.\nHence, this is always true on mobile platforms, and always false otherwise.\n"
  example: []
  syntax:
    content: public bool IsHeadset { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsHeadset As Boolean
  overload: Microsoft.Xna.Framework.Audio.Microphone.IsHeadset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.Microphone.SampleRate
  commentId: P:Microsoft.Xna.Framework.Audio.Microphone.SampleRate
  id: SampleRate
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: SampleRate
  nameWithType: Microphone.SampleRate
  fullName: Microsoft.Xna.Framework.Audio.Microphone.SampleRate
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SampleRate
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 89
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the sample rate of the captured audio.\nNote: default value is 44100hz\n"
  example: []
  syntax:
    content: public int SampleRate { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SampleRate As Integer
  overload: Microsoft.Xna.Framework.Audio.Microphone.SampleRate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.Microphone.State
  commentId: P:Microsoft.Xna.Framework.Audio.Microphone.State
  id: State
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: State
  nameWithType: Microphone.State
  fullName: Microsoft.Xna.Framework.Audio.Microphone.State
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: State
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 99
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the state of the Microphone. \n"
  example: []
  syntax:
    content: public MicrophoneState State { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Audio.MicrophoneState
    content.vb: Public ReadOnly Property State As MicrophoneState
  overload: Microsoft.Xna.Framework.Audio.Microphone.State*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.Microphone.All
  commentId: P:Microsoft.Xna.Framework.Audio.Microphone.All
  id: All
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: All
  nameWithType: Microphone.All
  fullName: Microsoft.Xna.Framework.Audio.Microphone.All
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: All
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 113
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns all compatible microphones.\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<Microphone> All { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Audio.Microphone}
    content.vb: Public Shared ReadOnly Property All As ReadOnlyCollection(Of Microphone)
  overload: Microsoft.Xna.Framework.Audio.Microphone.All*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.Microphone.Default
  commentId: P:Microsoft.Xna.Framework.Audio.Microphone.Default
  id: Default
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: Microphone.Default
  fullName: Microsoft.Xna.Framework.Audio.Microphone.Default
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Default
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 128
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the default microphone.\n"
  example: []
  syntax:
    content: public static Microphone Default { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Audio.Microphone
    content.vb: Public Shared ReadOnly Property Default As Microphone
  overload: Microsoft.Xna.Framework.Audio.Microphone.Default*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration(System.Int32)
  commentId: M:Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration(System.Int32)
  id: GetSampleDuration(System.Int32)
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: GetSampleDuration(Int32)
  nameWithType: Microphone.GetSampleDuration(Int32)
  fullName: Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration(System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetSampleDuration
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 142
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the duration based on the size of the buffer (assuming 16-bit PCM data).\n"
  example: []
  syntax:
    content: public TimeSpan GetSampleDuration(int sizeInBytes)
    parameters:
    - id: sizeInBytes
      type: System.Int32
      description: Size, in bytes
    return:
      type: System.TimeSpan
      description: TimeSpan of the duration.
    content.vb: Public Function GetSampleDuration(sizeInBytes As Integer) As TimeSpan
  overload: Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes(System.TimeSpan)
  commentId: M:Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes(System.TimeSpan)
  id: GetSampleSizeInBytes(System.TimeSpan)
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: GetSampleSizeInBytes(TimeSpan)
  nameWithType: Microphone.GetSampleSizeInBytes(TimeSpan)
  fullName: Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes(System.TimeSpan)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetSampleSizeInBytes
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 154
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the size, in bytes, of the array required to hold the specified duration of 16-bit PCM data. \n"
  example: []
  syntax:
    content: public int GetSampleSizeInBytes(TimeSpan duration)
    parameters:
    - id: duration
      type: System.TimeSpan
      description: TimeSpan of the duration of the sample.
    return:
      type: System.Int32
      description: Size, in bytes, of the buffer.
    content.vb: Public Function GetSampleSizeInBytes(duration As TimeSpan) As Integer
  overload: Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.Microphone.Start
  commentId: M:Microsoft.Xna.Framework.Audio.Microphone.Start
  id: Start
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: Microphone.Start()
  fullName: Microsoft.Xna.Framework.Audio.Microphone.Start()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Start
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 164
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nStarts microphone capture.\n"
  example: []
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: Microsoft.Xna.Framework.Audio.Microphone.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.Microphone.Stop
  commentId: M:Microsoft.Xna.Framework.Audio.Microphone.Stop
  id: Stop
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: Microphone.Stop()
  fullName: Microsoft.Xna.Framework.Audio.Microphone.Stop()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Stop
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 172
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nStops microphone capture.\n"
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: Microsoft.Xna.Framework.Audio.Microphone.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[])
  commentId: M:Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[])
  id: GetData(System.Byte[])
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: GetData(Byte[])
  nameWithType: Microphone.GetData(Byte[])
  fullName: Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetData
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 182
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets the latest available data from the microphone.\n"
  example: []
  syntax:
    content: public int GetData(byte[] buffer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: Buffer, in bytes, of the captured data (16-bit PCM).
    return:
      type: System.Int32
      description: The buffer size, in bytes, of the captured data.
    content.vb: Public Function GetData(buffer As Byte()) As Integer
  overload: Microsoft.Xna.Framework.Audio.Microphone.GetData*
  nameWithType.vb: Microphone.GetData(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte())
  name.vb: GetData(Byte())
- uid: Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[],System.Int32,System.Int32)
  id: GetData(System.Byte[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: GetData(Byte[], Int32, Int32)
  nameWithType: Microphone.GetData(Byte[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetData
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 194
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets the latest available data from the microphone.\n"
  example: []
  syntax:
    content: public int GetData(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: Buffer, in bytes, of the captured data (16-bit PCM).
    - id: offset
      type: System.Int32
      description: Byte offset.
    - id: count
      type: System.Int32
      description: Amount, in bytes.
    return:
      type: System.Int32
      description: The buffer size, in bytes, of the captured data.
    content.vb: Public Function GetData(buffer As Byte(), offset As Integer, count As Integer) As Integer
  overload: Microsoft.Xna.Framework.Audio.Microphone.GetData*
  nameWithType.vb: Microphone.GetData(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte(), System.Int32, System.Int32)
  name.vb: GetData(Byte(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Audio.Microphone.BufferReady
  commentId: E:Microsoft.Xna.Framework.Audio.Microphone.BufferReady
  id: BufferReady
  parent: Microsoft.Xna.Framework.Audio.Microphone
  langs:
  - csharp
  - vb
  name: BufferReady
  nameWithType: Microphone.BufferReady
  fullName: Microsoft.Xna.Framework.Audio.Microphone.BufferReady
  type: Event
  source:
    remote:
      path: MonoGame.Framework/Audio/Microphone.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: BufferReady
    path: ../MonoGame.Framework/Audio/Microphone.cs
    startLine: 206
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nEvent fired when the audio data are available.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> BufferReady
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event BufferReady As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Audio.Microphone.BufferDuration*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.BufferDuration
  isExternal: false
  name: BufferDuration
  nameWithType: Microphone.BufferDuration
  fullName: Microsoft.Xna.Framework.Audio.Microphone.BufferDuration
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework.Audio.Microphone.IsHeadset*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.IsHeadset
  isExternal: false
  name: IsHeadset
  nameWithType: Microphone.IsHeadset
  fullName: Microsoft.Xna.Framework.Audio.Microphone.IsHeadset
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Audio.Microphone.SampleRate*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.SampleRate
  isExternal: false
  name: SampleRate
  nameWithType: Microphone.SampleRate
  fullName: Microsoft.Xna.Framework.Audio.Microphone.SampleRate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Audio.Microphone.State*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.State
  isExternal: false
  name: State
  nameWithType: Microphone.State
  fullName: Microsoft.Xna.Framework.Audio.Microphone.State
- uid: Microsoft.Xna.Framework.Audio.MicrophoneState
  commentId: T:Microsoft.Xna.Framework.Audio.MicrophoneState
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: MicrophoneState
  nameWithType: MicrophoneState
  fullName: Microsoft.Xna.Framework.Audio.MicrophoneState
- uid: Microsoft.Xna.Framework.Audio.Microphone.All*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.All
  isExternal: false
  name: All
  nameWithType: Microphone.All
  fullName: Microsoft.Xna.Framework.Audio.Microphone.All
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Audio.Microphone}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Audio.Microphone}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Microphone>
  nameWithType: ReadOnlyCollection<Microphone>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Audio.Microphone>
  nameWithType.vb: ReadOnlyCollection(Of Microphone)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Xna.Framework.Audio.Microphone)
  name.vb: ReadOnlyCollection(Of Microphone)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Audio.Microphone
    name: Microphone
    nameWithType: Microphone
    fullName: Microsoft.Xna.Framework.Audio.Microphone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Audio.Microphone
    name: Microphone
    nameWithType: Microphone
    fullName: Microsoft.Xna.Framework.Audio.Microphone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Xna.Framework.Audio.Microphone.Default*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.Default
  isExternal: false
  name: Default
  nameWithType: Microphone.Default
  fullName: Microsoft.Xna.Framework.Audio.Microphone.Default
- uid: Microsoft.Xna.Framework.Audio.Microphone
  commentId: T:Microsoft.Xna.Framework.Audio.Microphone
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microphone
  nameWithType: Microphone
  fullName: Microsoft.Xna.Framework.Audio.Microphone
- uid: Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration
  isExternal: false
  name: GetSampleDuration
  nameWithType: Microphone.GetSampleDuration
  fullName: Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration
- uid: Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes
  isExternal: false
  name: GetSampleSizeInBytes
  nameWithType: Microphone.GetSampleSizeInBytes
  fullName: Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes
- uid: Microsoft.Xna.Framework.Audio.Microphone.Start*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.Start
  isExternal: false
  name: Start
  nameWithType: Microphone.Start
  fullName: Microsoft.Xna.Framework.Audio.Microphone.Start
- uid: Microsoft.Xna.Framework.Audio.Microphone.Stop*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.Stop
  isExternal: false
  name: Stop
  nameWithType: Microphone.Stop
  fullName: Microsoft.Xna.Framework.Audio.Microphone.Stop
- uid: Microsoft.Xna.Framework.Audio.Microphone.GetData*
  commentId: Overload:Microsoft.Xna.Framework.Audio.Microphone.GetData
  isExternal: false
  name: GetData
  nameWithType: Microphone.GetData
  fullName: Microsoft.Xna.Framework.Audio.Microphone.GetData
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
