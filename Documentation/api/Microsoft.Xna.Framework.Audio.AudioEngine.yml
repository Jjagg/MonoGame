### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.AudioEngine
  commentId: T:Microsoft.Xna.Framework.Audio.AudioEngine
  id: AudioEngine
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String)
  - Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String,System.TimeSpan,System.String)
  - Microsoft.Xna.Framework.Audio.AudioEngine.ContentVersion
  - Microsoft.Xna.Framework.Audio.AudioEngine.Dispose
  - Microsoft.Xna.Framework.Audio.AudioEngine.Disposing
  - Microsoft.Xna.Framework.Audio.AudioEngine.Finalize
  - Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory(System.String)
  - Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable(System.String)
  - Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed
  - Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable(System.String,System.Single)
  - Microsoft.Xna.Framework.Audio.AudioEngine.Update
  langs:
  - csharp
  - vb
  name: AudioEngine
  nameWithType: AudioEngine
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: AudioEngine
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 14
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nClass used to create and manipulate code audio objects.\n"
  example: []
  syntax:
    content: 'public class AudioEngine : IDisposable'
    content.vb: >-
      Public Class AudioEngine
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.ContentVersion
  commentId: F:Microsoft.Xna.Framework.Audio.AudioEngine.ContentVersion
  id: ContentVersion
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: ContentVersion
  nameWithType: AudioEngine.ContentVersion
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.ContentVersion
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ContentVersion
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 50
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nThe current content version.\n"
  example: []
  syntax:
    content: public const int ContentVersion = 39
    return:
      type: System.Int32
    content.vb: Public Const ContentVersion As Integer = 39
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: AudioEngine(String)
  nameWithType: AudioEngine.AudioEngine(String)
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.AudioEngine(System.String)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 53
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  example: []
  syntax:
    content: public AudioEngine(string settingsFile)
    parameters:
    - id: settingsFile
      type: System.String
      description: Path to a XACT settings file.
    content.vb: Public Sub New(settingsFile As String)
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String,System.TimeSpan,System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String,System.TimeSpan,System.String)
  id: '#ctor(System.String,System.TimeSpan,System.String)'
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: AudioEngine(String, TimeSpan, String)
  nameWithType: AudioEngine.AudioEngine(String, TimeSpan, String)
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.AudioEngine(System.String, System.TimeSpan, System.String)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 84
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  remarks: For the best results, use a lookAheadTime of 250 milliseconds or greater.
  example: []
  syntax:
    content: public AudioEngine(string settingsFile, TimeSpan lookAheadTime, string rendererId)
    parameters:
    - id: settingsFile
      type: System.String
      description: Path to a XACT settings file.
    - id: lookAheadTime
      type: System.TimeSpan
      description: Determines how many milliseconds the engine will look ahead when determing when to transition to another sound.
    - id: rendererId
      type: System.String
      description: A string that specifies the audio renderer to use.
    content.vb: Public Sub New(settingsFile As String, lookAheadTime As TimeSpan, rendererId As String)
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.Update
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.Update
  id: Update
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: AudioEngine.Update()
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.Update()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Update
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 269
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nPerforms periodic work required by the audio engine.\n"
  remarks: Must be called at least once per frame.
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory(System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory(System.String)
  id: GetCategory(System.String)
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: GetCategory(String)
  nameWithType: AudioEngine.GetCategory(String)
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory(System.String)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetCategory
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 313
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Returns an audio category by name.
  example: []
  syntax:
    content: public AudioCategory GetCategory(string name)
    parameters:
    - id: name
      type: System.String
      description: Friendly name of the category to get.
    return:
      type: Microsoft.Xna.Framework.Audio.AudioCategory
      description: The AudioCategory with a matching name. Throws an exception if not found.
    content.vb: Public Function GetCategory(name As String) As AudioCategory
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable(System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable(System.String)
  id: GetGlobalVariable(System.String)
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: GetGlobalVariable(String)
  nameWithType: AudioEngine.GetGlobalVariable(String)
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable(System.String)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetGlobalVariable
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 329
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Gets the value of a global variable.
  remarks: A global variable has global scope. It can be accessed by all code within a project.
  example: []
  syntax:
    content: public float GetGlobalVariable(string name)
    parameters:
    - id: name
      type: System.String
      description: Friendly name of the variable.
    return:
      type: System.Single
      description: float value of the queried variable.
    content.vb: Public Function GetGlobalVariable(name As String) As Single
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable(System.String,System.Single)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable(System.String,System.Single)
  id: SetGlobalVariable(System.String,System.Single)
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: SetGlobalVariable(String, Single)
  nameWithType: AudioEngine.SetGlobalVariable(String, Single)
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable(System.String, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetGlobalVariable
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 351
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Sets the value of a global variable.
  example: []
  syntax:
    content: public void SetGlobalVariable(string name, float value)
    parameters:
    - id: name
      type: System.String
      description: Friendly name of the variable.
    - id: value
      type: System.Single
      description: Value of the global variable.
    content.vb: Public Sub SetGlobalVariable(name As String, value As Single)
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.Disposing
  commentId: E:Microsoft.Xna.Framework.Audio.AudioEngine.Disposing
  id: Disposing
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: Disposing
  nameWithType: AudioEngine.Disposing
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.Disposing
  type: Event
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Disposing
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 367
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nThis event is triggered when the AudioEngine is disposed.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> Disposing
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event Disposing As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed
  id: IsDisposed
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: AudioEngine.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsDisposed
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 372
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nIs true if the AudioEngine has been disposed.\n"
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.Dispose
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: AudioEngine.Dispose()
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 377
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDisposes the AudioEngine.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.Finalize
  commentId: M:Microsoft.Xna.Framework.Audio.AudioEngine.Finalize
  id: Finalize
  parent: Microsoft.Xna.Framework.Audio.AudioEngine
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: AudioEngine.Finalize()
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.Finalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioEngine.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Finalize
    path: ../MonoGame.Framework/Audio/Xact/AudioEngine.cs
    startLine: 383
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Xna.Framework.Audio.AudioEngine.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor
  isExternal: false
  name: AudioEngine
  nameWithType: AudioEngine.AudioEngine
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.AudioEngine
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.Update*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.Update
  isExternal: false
  name: Update
  nameWithType: AudioEngine.Update
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.Update
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory
  isExternal: false
  name: GetCategory
  nameWithType: AudioEngine.GetCategory
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory
- uid: Microsoft.Xna.Framework.Audio.AudioCategory
  commentId: T:Microsoft.Xna.Framework.Audio.AudioCategory
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioCategory
  nameWithType: AudioCategory
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable
  isExternal: false
  name: GetGlobalVariable
  nameWithType: AudioEngine.GetGlobalVariable
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable
  isExternal: false
  name: SetGlobalVariable
  nameWithType: AudioEngine.SetGlobalVariable
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed
  isExternal: false
  name: IsDisposed
  nameWithType: AudioEngine.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.Dispose
  isExternal: false
  name: Dispose
  nameWithType: AudioEngine.Dispose
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.AudioEngine.Finalize*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioEngine.Finalize
  isExternal: false
  name: Finalize
  nameWithType: AudioEngine.Finalize
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine.Finalize
