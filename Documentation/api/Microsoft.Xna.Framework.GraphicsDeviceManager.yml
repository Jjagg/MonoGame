### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager
  commentId: T:Microsoft.Xna.Framework.GraphicsDeviceManager
  id: GraphicsDeviceManager
  parent: Microsoft.Xna.Framework
  children:
  - Microsoft.Xna.Framework.GraphicsDeviceManager.#ctor(Microsoft.Xna.Framework.Game)
  - Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges
  - Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw
  - Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferHeight
  - Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferWidth
  - Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceCreated
  - Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceDisposing
  - Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceReset
  - Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceResetting
  - Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose
  - Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose(System.Boolean)
  - Microsoft.Xna.Framework.GraphicsDeviceManager.Disposed
  - Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw
  - Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize
  - Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice
  - Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile
  - Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch
  - Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen
  - Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft#Xna#Framework#IGraphicsDeviceManager#CreateDevice
  - Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing(System.EventArgs)
  - Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting(System.EventArgs)
  - Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling
  - Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat
  - Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight
  - Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth
  - Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat
  - Microsoft.Xna.Framework.GraphicsDeviceManager.PreparingDeviceSettings
  - Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations
  - Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace
  - Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen
  langs:
  - csharp
  - vb
  name: GraphicsDeviceManager
  nameWithType: GraphicsDeviceManager
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager
  type: Class
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.SDL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GraphicsDeviceManager
    path: ../MonoGame.Framework/GraphicsDeviceManager.SDL.cs
    startLine: 8
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nUsed to initialize and control the presentation of the graphics device.\n"
  example: []
  syntax:
    content: 'public class GraphicsDeviceManager : IGraphicsDeviceService, IDisposable, IGraphicsDeviceManager'
    content.vb: >-
      Public Class GraphicsDeviceManager
          Implements IGraphicsDeviceService, IDisposable, IGraphicsDeviceManager
  inheritance:
  - System.Object
  implements:
  - Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  - System.IDisposable
  - Microsoft.Xna.Framework.IGraphicsDeviceManager
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferWidth
  commentId: F:Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferWidth
  id: DefaultBackBufferWidth
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: DefaultBackBufferWidth
  nameWithType: GraphicsDeviceManager.DefaultBackBufferWidth
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferWidth
  type: Field
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DefaultBackBufferWidth
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 37
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe default back buffer width.\n"
  example: []
  syntax:
    content: public static readonly int DefaultBackBufferWidth
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly DefaultBackBufferWidth As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferHeight
  commentId: F:Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferHeight
  id: DefaultBackBufferHeight
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: DefaultBackBufferHeight
  nameWithType: GraphicsDeviceManager.DefaultBackBufferHeight
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferHeight
  type: Field
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DefaultBackBufferHeight
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 42
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe default back buffer height.\n"
  example: []
  syntax:
    content: public static readonly int DefaultBackBufferHeight
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly DefaultBackBufferHeight As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.#ctor(Microsoft.Xna.Framework.Game)
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.#ctor(Microsoft.Xna.Framework.Game)
  id: '#ctor(Microsoft.Xna.Framework.Game)'
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: GraphicsDeviceManager(Game)
  nameWithType: GraphicsDeviceManager.GraphicsDeviceManager(Game)
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDeviceManager(Microsoft.Xna.Framework.Game)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 53
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAssociates this graphics device manager to a game instances.\n"
  example: []
  syntax:
    content: public GraphicsDeviceManager(Game game)
    parameters:
    - id: game
      type: Microsoft.Xna.Framework.Game
      description: The game instance to attach.
    content.vb: Public Sub New(game As Game)
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize
  id: Finalize
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: GraphicsDeviceManager.Finalize()
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Finalize
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 97
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft#Xna#Framework#IGraphicsDeviceManager#CreateDevice
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft#Xna#Framework#IGraphicsDeviceManager#CreateDevice
  id: Microsoft#Xna#Framework#IGraphicsDeviceManager#CreateDevice
  isEii: true
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: IGraphicsDeviceManager.CreateDevice()
  nameWithType: GraphicsDeviceManager.IGraphicsDeviceManager.CreateDevice()
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 144
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: void IGraphicsDeviceManager.CreateDevice()
    content.vb: Sub Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice Implements IGraphicsDeviceManager.CreateDevice
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft#Xna#Framework#IGraphicsDeviceManager#CreateDevice*
  implements:
  - Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
  nameWithType.vb: GraphicsDeviceManager.Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice()
  name.vb: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice()
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw
  id: BeginDraw
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: BeginDraw()
  nameWithType: GraphicsDeviceManager.BeginDraw()
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: BeginDraw
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 149
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public bool BeginDraw()
    return:
      type: System.Boolean
    content.vb: Public Function BeginDraw As Boolean
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw*
  implements:
  - Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw
  id: EndDraw
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: EndDraw()
  nameWithType: GraphicsDeviceManager.EndDraw()
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: EndDraw
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 158
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public void EndDraw()
    content.vb: Public Sub
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw*
  implements:
  - Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceCreated
  commentId: E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceCreated
  id: DeviceCreated
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: DeviceCreated
  nameWithType: GraphicsDeviceManager.DeviceCreated
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceCreated
  type: Event
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DeviceCreated
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 169
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public event EventHandler<EventArgs> DeviceCreated
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event DeviceCreated As EventHandler(Of EventArgs)
  implements:
  - Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceDisposing
  commentId: E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceDisposing
  id: DeviceDisposing
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: DeviceDisposing
  nameWithType: GraphicsDeviceManager.DeviceDisposing
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceDisposing
  type: Event
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DeviceDisposing
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 170
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public event EventHandler<EventArgs> DeviceDisposing
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event DeviceDisposing As EventHandler(Of EventArgs)
  implements:
  - Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceReset
  commentId: E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceReset
  id: DeviceReset
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: DeviceReset
  nameWithType: GraphicsDeviceManager.DeviceReset
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceReset
  type: Event
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DeviceReset
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 171
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public event EventHandler<EventArgs> DeviceReset
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event DeviceReset As EventHandler(Of EventArgs)
  implements:
  - Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceResetting
  commentId: E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceResetting
  id: DeviceResetting
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: DeviceResetting
  nameWithType: GraphicsDeviceManager.DeviceResetting
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceResetting
  type: Event
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DeviceResetting
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 172
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public event EventHandler<EventArgs> DeviceResetting
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event DeviceResetting As EventHandler(Of EventArgs)
  implements:
  - Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreparingDeviceSettings
  commentId: E:Microsoft.Xna.Framework.GraphicsDeviceManager.PreparingDeviceSettings
  id: PreparingDeviceSettings
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: PreparingDeviceSettings
  nameWithType: GraphicsDeviceManager.PreparingDeviceSettings
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreparingDeviceSettings
  type: Event
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PreparingDeviceSettings
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 173
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public event EventHandler<PreparingDeviceSettingsEventArgs> PreparingDeviceSettings
    return:
      type: System.EventHandler{Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs}
    content.vb: Public Event PreparingDeviceSettings As EventHandler(Of PreparingDeviceSettingsEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Disposed
  commentId: E:Microsoft.Xna.Framework.GraphicsDeviceManager.Disposed
  id: Disposed
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: Disposed
  nameWithType: GraphicsDeviceManager.Disposed
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Disposed
  type: Event
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Disposed
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 174
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public event EventHandler<EventArgs> Disposed
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event Disposed As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing(System.EventArgs)
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing(System.EventArgs)
  id: OnDeviceDisposing(System.EventArgs)
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: OnDeviceDisposing(EventArgs)
  nameWithType: GraphicsDeviceManager.OnDeviceDisposing(EventArgs)
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing(System.EventArgs)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: OnDeviceDisposing
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 176
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: protected void OnDeviceDisposing(EventArgs e)
    parameters:
    - id: e
      type: System.EventArgs
    content.vb: Protected Sub OnDeviceDisposing(e As EventArgs)
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting(System.EventArgs)
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting(System.EventArgs)
  id: OnDeviceResetting(System.EventArgs)
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: OnDeviceResetting(EventArgs)
  nameWithType: GraphicsDeviceManager.OnDeviceResetting(EventArgs)
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting(System.EventArgs)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: OnDeviceResetting
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 181
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: protected void OnDeviceResetting(EventArgs e)
    parameters:
    - id: e
      type: System.EventArgs
    content.vb: Protected Sub OnDeviceResetting(e As EventArgs)
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: GraphicsDeviceManager.Dispose()
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 224
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: GraphicsDeviceManager.Dispose(Boolean)
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 230
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges
  id: ApplyChanges
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: ApplyChanges()
  nameWithType: GraphicsDeviceManager.ApplyChanges()
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ApplyChanges
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 294
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApplies any pending property changes to the graphics device.\n"
  example: []
  syntax:
    content: public void ApplyChanges()
    content.vb: Public Sub ApplyChanges
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen
  commentId: M:Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen
  id: ToggleFullScreen
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: ToggleFullScreen()
  nameWithType: GraphicsDeviceManager.ToggleFullScreen()
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToggleFullScreen
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 360
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nToggles between windowed and fullscreen modes.\n"
  remarks: "\nNote that on platforms that do not support windowed modes this has no affect.\n"
  example: []
  syntax:
    content: public void ToggleFullScreen()
    content.vb: Public Sub ToggleFullScreen
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile
  id: GraphicsProfile
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: GraphicsProfile
  nameWithType: GraphicsDeviceManager.GraphicsProfile
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GraphicsProfile
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 374
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe profile which determines the graphics feature level.\n"
  example: []
  syntax:
    content: public GraphicsProfile GraphicsProfile { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.GraphicsProfile
    content.vb: Public Property GraphicsProfile As GraphicsProfile
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice
  id: GraphicsDevice
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: GraphicsDevice
  nameWithType: GraphicsDeviceManager.GraphicsDevice
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GraphicsDevice
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 390
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the graphics device for this manager.\n"
  example: []
  syntax:
    content: public GraphicsDevice GraphicsDevice { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.GraphicsDevice
    content.vb: Public ReadOnly Property GraphicsDevice As GraphicsDevice
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice*
  implements:
  - Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen
  id: IsFullScreen
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: IsFullScreen
  nameWithType: GraphicsDeviceManager.IsFullScreen
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsFullScreen
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 406
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desire to switch into fullscreen mode.\n"
  remarks: "\nWhen called at startup this will automatically set fullscreen mode during initialization.  If\nset after startup you must call ApplyChanges() for the fullscreen mode to be changed.\nNote that for some platforms that do not support windowed modes this property has no affect.\n"
  example: []
  syntax:
    content: public bool IsFullScreen { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsFullScreen As Boolean
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch
  id: HardwareModeSwitch
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: HardwareModeSwitch
  nameWithType: GraphicsDeviceManager.HardwareModeSwitch
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: HardwareModeSwitch
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 421
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets or sets the boolean which defines how window switches from windowed to fullscreen state.\n&quot;Hard&quot; mode(true) is slow to switch, but more effecient for performance, while &quot;soft&quot; mode(false) is vice versa.\nThe default value is <code>true</code>.\n"
  example: []
  syntax:
    content: public bool HardwareModeSwitch { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HardwareModeSwitch As Boolean
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling
  id: PreferMultiSampling
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: PreferMultiSampling
  nameWithType: GraphicsDeviceManager.PreferMultiSampling
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PreferMultiSampling
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 438
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desire for a multisampled back buffer.\n"
  remarks: "\nWhen called at startup this will automatically set the MSAA mode during initialization.  If\nset after startup you must call ApplyChanges() for the MSAA mode to be changed.\n"
  example: []
  syntax:
    content: public bool PreferMultiSampling { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PreferMultiSampling As Boolean
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat
  id: PreferredBackBufferFormat
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: PreferredBackBufferFormat
  nameWithType: GraphicsDeviceManager.PreferredBackBufferFormat
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PreferredBackBufferFormat
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 458
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desired back buffer color format.\n"
  remarks: "\nWhen called at startup this will automatically set the format during initialization.  If\nset after startup you must call ApplyChanges() for the format to be changed.\n"
  example: []
  syntax:
    content: public SurfaceFormat PreferredBackBufferFormat { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.SurfaceFormat
    content.vb: Public Property PreferredBackBufferFormat As SurfaceFormat
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight
  id: PreferredBackBufferHeight
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: PreferredBackBufferHeight
  nameWithType: GraphicsDeviceManager.PreferredBackBufferHeight
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PreferredBackBufferHeight
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 478
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desired back buffer height in pixels.\n"
  remarks: "\nWhen called at startup this will automatically set the height during initialization.  If\nset after startup you must call ApplyChanges() for the height to be changed.\n"
  example: []
  syntax:
    content: public int PreferredBackBufferHeight { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property PreferredBackBufferHeight As Integer
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth
  id: PreferredBackBufferWidth
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: PreferredBackBufferWidth
  nameWithType: GraphicsDeviceManager.PreferredBackBufferWidth
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PreferredBackBufferWidth
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 498
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desired back buffer width in pixels.\n"
  remarks: "\nWhen called at startup this will automatically set the width during initialization.  If\nset after startup you must call ApplyChanges() for the width to be changed.\n"
  example: []
  syntax:
    content: public int PreferredBackBufferWidth { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property PreferredBackBufferWidth As Integer
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat
  id: PreferredDepthStencilFormat
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: PreferredDepthStencilFormat
  nameWithType: GraphicsDeviceManager.PreferredDepthStencilFormat
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PreferredDepthStencilFormat
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 519
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desired depth-stencil buffer format.\n"
  remarks: "\nThe depth-stencil buffer format defines the scene depth precision and stencil bits available for effects during rendering.\nWhen called at startup this will automatically set the format during initialization.  If\nset after startup you must call ApplyChanges() for the format to be changed.\n"
  example: []
  syntax:
    content: public DepthFormat PreferredDepthStencilFormat { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.DepthFormat
    content.vb: Public Property PreferredDepthStencilFormat As DepthFormat
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace
  id: SynchronizeWithVerticalRetrace
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: SynchronizeWithVerticalRetrace
  nameWithType: GraphicsDeviceManager.SynchronizeWithVerticalRetrace
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SynchronizeWithVerticalRetrace
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 540
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desire for vsync when presenting the back buffer.\n"
  remarks: "\nVsync limits the frame rate of the game to the monitor referesh rate to prevent screen tearing.\nWhen called at startup this will automatically set the vsync mode during initialization.  If\nset after startup you must call ApplyChanges() for the vsync mode to be changed.\n"
  example: []
  syntax:
    content: public bool SynchronizeWithVerticalRetrace { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property SynchronizeWithVerticalRetrace As Boolean
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations
  commentId: P:Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations
  id: SupportedOrientations
  parent: Microsoft.Xna.Framework.GraphicsDeviceManager
  langs:
  - csharp
  - vb
  name: SupportedOrientations
  nameWithType: GraphicsDeviceManager.SupportedOrientations
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations
  type: Property
  source:
    remote:
      path: MonoGame.Framework/GraphicsDeviceManager.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SupportedOrientations
    path: ../MonoGame.Framework/GraphicsDeviceManager.cs
    startLine: 561
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nIndicates the desired allowable display orientations when the device is rotated.\n"
  remarks: "\nThis property only applies to mobile platforms with automatic display rotation.\nWhen called at startup this will automatically apply the supported orientations during initialization.  If\nset after startup you must call ApplyChanges() for the supported orientations to be changed.\n"
  example: []
  syntax:
    content: public DisplayOrientation SupportedOrientations { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.DisplayOrientation
    content.vb: Public Property SupportedOrientations As DisplayOrientation
  overload: Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  commentId: T:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: IGraphicsDeviceService
  nameWithType: IGraphicsDeviceService
  fullName: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.Xna.Framework.IGraphicsDeviceManager
  commentId: T:Microsoft.Xna.Framework.IGraphicsDeviceManager
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: IGraphicsDeviceManager
  nameWithType: IGraphicsDeviceManager
  fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.#ctor
  isExternal: false
  name: GraphicsDeviceManager
  nameWithType: GraphicsDeviceManager.GraphicsDeviceManager
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDeviceManager
- uid: Microsoft.Xna.Framework.Game
  commentId: T:Microsoft.Xna.Framework.Game
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Game
  nameWithType: Game
  fullName: Microsoft.Xna.Framework.Game
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize
  isExternal: false
  name: Finalize
  nameWithType: GraphicsDeviceManager.Finalize
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Finalize
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft#Xna#Framework#IGraphicsDeviceManager#CreateDevice*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft#Xna#Framework#IGraphicsDeviceManager#CreateDevice
  isExternal: false
  name: IGraphicsDeviceManager.CreateDevice
  nameWithType: GraphicsDeviceManager.IGraphicsDeviceManager.CreateDevice
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
  nameWithType.vb: GraphicsDeviceManager.Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
  name.vb: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
- uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
  commentId: M:Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
  parent: Microsoft.Xna.Framework.IGraphicsDeviceManager
  isExternal: false
  name: CreateDevice()
  nameWithType: IGraphicsDeviceManager.CreateDevice()
  fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
    name: CreateDevice
    nameWithType: IGraphicsDeviceManager.CreateDevice
    fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
    name: CreateDevice
    nameWithType: IGraphicsDeviceManager.CreateDevice
    fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw
  isExternal: false
  name: BeginDraw
  nameWithType: GraphicsDeviceManager.BeginDraw
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.BeginDraw
- uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw
  commentId: M:Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw
  parent: Microsoft.Xna.Framework.IGraphicsDeviceManager
  isExternal: false
  name: BeginDraw()
  nameWithType: IGraphicsDeviceManager.BeginDraw()
  fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw
    name: BeginDraw
    nameWithType: IGraphicsDeviceManager.BeginDraw
    fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw
    name: BeginDraw
    nameWithType: IGraphicsDeviceManager.BeginDraw
    fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw
  isExternal: false
  name: EndDraw
  nameWithType: GraphicsDeviceManager.EndDraw
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.EndDraw
- uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw
  commentId: M:Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw
  parent: Microsoft.Xna.Framework.IGraphicsDeviceManager
  isExternal: false
  name: EndDraw()
  nameWithType: IGraphicsDeviceManager.EndDraw()
  fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw
    name: EndDraw
    nameWithType: IGraphicsDeviceManager.EndDraw
    fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw
    name: EndDraw
    nameWithType: IGraphicsDeviceManager.EndDraw
    fullName: Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated
  commentId: E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated
  parent: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  isExternal: false
  name: DeviceCreated
  nameWithType: IGraphicsDeviceService.DeviceCreated
  fullName: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing
  commentId: E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing
  parent: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  isExternal: false
  name: DeviceDisposing
  nameWithType: IGraphicsDeviceService.DeviceDisposing
  fullName: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing
- uid: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset
  commentId: E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset
  parent: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  isExternal: false
  name: DeviceReset
  nameWithType: IGraphicsDeviceService.DeviceReset
  fullName: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset
- uid: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting
  commentId: E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting
  parent: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  isExternal: false
  name: DeviceResetting
  nameWithType: IGraphicsDeviceService.DeviceResetting
  fullName: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting
- uid: System.EventHandler{Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs}
  commentId: T:System.EventHandler{Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<PreparingDeviceSettingsEventArgs>
  nameWithType: EventHandler<PreparingDeviceSettingsEventArgs>
  fullName: System.EventHandler<Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs>
  nameWithType.vb: EventHandler(Of PreparingDeviceSettingsEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs)
  name.vb: EventHandler(Of PreparingDeviceSettingsEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs
    name: PreparingDeviceSettingsEventArgs
    nameWithType: PreparingDeviceSettingsEventArgs
    fullName: Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs
    name: PreparingDeviceSettingsEventArgs
    nameWithType: PreparingDeviceSettingsEventArgs
    fullName: Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing
  isExternal: false
  name: OnDeviceDisposing
  nameWithType: GraphicsDeviceManager.OnDeviceDisposing
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting
  isExternal: false
  name: OnDeviceResetting
  nameWithType: GraphicsDeviceManager.OnDeviceResetting
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose
  isExternal: false
  name: Dispose
  nameWithType: GraphicsDeviceManager.Dispose
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges
  isExternal: false
  name: ApplyChanges
  nameWithType: GraphicsDeviceManager.ApplyChanges
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen
  isExternal: false
  name: ToggleFullScreen
  nameWithType: GraphicsDeviceManager.ToggleFullScreen
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile
  isExternal: false
  name: GraphicsProfile
  nameWithType: GraphicsDeviceManager.GraphicsProfile
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsProfile
- uid: Microsoft.Xna.Framework.Graphics.GraphicsProfile
  commentId: T:Microsoft.Xna.Framework.Graphics.GraphicsProfile
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: GraphicsProfile
  nameWithType: GraphicsProfile
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsProfile
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice
  isExternal: false
  name: GraphicsDevice
  nameWithType: GraphicsDeviceManager.GraphicsDevice
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice
- uid: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice
  commentId: P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice
  parent: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService
  isExternal: false
  name: GraphicsDevice
  nameWithType: IGraphicsDeviceService.GraphicsDevice
  fullName: Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice
- uid: Microsoft.Xna.Framework.Graphics.GraphicsDevice
  commentId: T:Microsoft.Xna.Framework.Graphics.GraphicsDevice
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: GraphicsDevice
  nameWithType: GraphicsDevice
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsDevice
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen
  isExternal: false
  name: IsFullScreen
  nameWithType: GraphicsDeviceManager.IsFullScreen
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch
  isExternal: false
  name: HardwareModeSwitch
  nameWithType: GraphicsDeviceManager.HardwareModeSwitch
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling
  isExternal: false
  name: PreferMultiSampling
  nameWithType: GraphicsDeviceManager.PreferMultiSampling
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat
  isExternal: false
  name: PreferredBackBufferFormat
  nameWithType: GraphicsDeviceManager.PreferredBackBufferFormat
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat
- uid: Microsoft.Xna.Framework.Graphics.SurfaceFormat
  commentId: T:Microsoft.Xna.Framework.Graphics.SurfaceFormat
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: SurfaceFormat
  nameWithType: SurfaceFormat
  fullName: Microsoft.Xna.Framework.Graphics.SurfaceFormat
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight
  isExternal: false
  name: PreferredBackBufferHeight
  nameWithType: GraphicsDeviceManager.PreferredBackBufferHeight
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth
  isExternal: false
  name: PreferredBackBufferWidth
  nameWithType: GraphicsDeviceManager.PreferredBackBufferWidth
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat
  isExternal: false
  name: PreferredDepthStencilFormat
  nameWithType: GraphicsDeviceManager.PreferredDepthStencilFormat
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat
- uid: Microsoft.Xna.Framework.Graphics.DepthFormat
  commentId: T:Microsoft.Xna.Framework.Graphics.DepthFormat
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: DepthFormat
  nameWithType: DepthFormat
  fullName: Microsoft.Xna.Framework.Graphics.DepthFormat
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace
  isExternal: false
  name: SynchronizeWithVerticalRetrace
  nameWithType: GraphicsDeviceManager.SynchronizeWithVerticalRetrace
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace
- uid: Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations*
  commentId: Overload:Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations
  isExternal: false
  name: SupportedOrientations
  nameWithType: GraphicsDeviceManager.SupportedOrientations
  fullName: Microsoft.Xna.Framework.GraphicsDeviceManager.SupportedOrientations
- uid: Microsoft.Xna.Framework.DisplayOrientation
  commentId: T:Microsoft.Xna.Framework.DisplayOrientation
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: DisplayOrientation
  nameWithType: DisplayOrientation
  fullName: Microsoft.Xna.Framework.DisplayOrientation
