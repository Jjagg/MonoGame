### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Vector3
  commentId: T:Microsoft.Xna.Framework.Vector3
  id: Vector3
  parent: Microsoft.Xna.Framework
  children:
  - Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector3.#ctor(System.Single)
  - Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)
  - Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Backward
  - Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)
  - Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  - Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  - Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  - Microsoft.Xna.Framework.Vector3.Down
  - Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Equals(System.Object)
  - Microsoft.Xna.Framework.Vector3.Forward
  - Microsoft.Xna.Framework.Vector3.GetHashCode
  - Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Left
  - Microsoft.Xna.Framework.Vector3.Length
  - Microsoft.Xna.Framework.Vector3.LengthSquared
  - Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Normalize
  - Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.One
  - Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Right
  - Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  - Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  - Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.ToString
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  - Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  - Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  - Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Vector3.UnitX
  - Microsoft.Xna.Framework.Vector3.UnitY
  - Microsoft.Xna.Framework.Vector3.UnitZ
  - Microsoft.Xna.Framework.Vector3.Up
  - Microsoft.Xna.Framework.Vector3.X
  - Microsoft.Xna.Framework.Vector3.Y
  - Microsoft.Xna.Framework.Vector3.Z
  - Microsoft.Xna.Framework.Vector3.Zero
  langs:
  - csharp
  - vb
  name: Vector3
  nameWithType: Vector3
  fullName: Microsoft.Xna.Framework.Vector3
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Vector3
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 15
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDescribes a 3D-vector.\n"
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof (Vector3TypeConverter))]

      [DataContract]

      public struct Vector3 : IEquatable<Vector3>
    content.vb: >-
      <TypeConverter(GetType(Vector3TypeConverter))>

      <DataContract>

      Public Structure Vector3
          Implements IEquatable(Of Vector3)
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Vector3}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.ComponentModel.TypeConverterAttribute
    ctor: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Microsoft.Xna.Framework.Design.Vector3TypeConverter
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Vector3.X
  commentId: F:Microsoft.Xna.Framework.Vector3.X
  id: X
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector3.X
  fullName: Microsoft.Xna.Framework.Vector3.X
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: X
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 43
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe x coordinate of this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float X
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public X As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.Y
  commentId: F:Microsoft.Xna.Framework.Vector3.Y
  id: Y
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector3.Y
  fullName: Microsoft.Xna.Framework.Vector3.Y
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Y
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 49
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe y coordinate of this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Y
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Y As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.Z
  commentId: F:Microsoft.Xna.Framework.Vector3.Z
  id: Z
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Vector3.Z
  fullName: Microsoft.Xna.Framework.Vector3.Z
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Z
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 55
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe z coordinate of this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Z
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Z As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.Zero
  commentId: P:Microsoft.Xna.Framework.Vector3.Zero
  id: Zero
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector3.Zero
  fullName: Microsoft.Xna.Framework.Vector3.Zero
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Zero
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 64
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 0, 0.\n"
  example: []
  syntax:
    content: public static Vector3 Zero { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property Zero As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Zero*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.One
  commentId: P:Microsoft.Xna.Framework.Vector3.One
  id: One
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Vector3.One
  fullName: Microsoft.Xna.Framework.Vector3.One
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: One
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 72
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 1, 1, 1.\n"
  example: []
  syntax:
    content: public static Vector3 One { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property One As Vector3
  overload: Microsoft.Xna.Framework.Vector3.One*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.UnitX
  commentId: P:Microsoft.Xna.Framework.Vector3.UnitX
  id: UnitX
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Vector3.UnitX
  fullName: Microsoft.Xna.Framework.Vector3.UnitX
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: UnitX
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 80
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 1, 0, 0.\n"
  example: []
  syntax:
    content: public static Vector3 UnitX { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property UnitX As Vector3
  overload: Microsoft.Xna.Framework.Vector3.UnitX*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.UnitY
  commentId: P:Microsoft.Xna.Framework.Vector3.UnitY
  id: UnitY
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Vector3.UnitY
  fullName: Microsoft.Xna.Framework.Vector3.UnitY
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: UnitY
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 88
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 1, 0.\n"
  example: []
  syntax:
    content: public static Vector3 UnitY { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property UnitY As Vector3
  overload: Microsoft.Xna.Framework.Vector3.UnitY*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.UnitZ
  commentId: P:Microsoft.Xna.Framework.Vector3.UnitZ
  id: UnitZ
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: UnitZ
  nameWithType: Vector3.UnitZ
  fullName: Microsoft.Xna.Framework.Vector3.UnitZ
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: UnitZ
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 96
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 0, 1.\n"
  example: []
  syntax:
    content: public static Vector3 UnitZ { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property UnitZ As Vector3
  overload: Microsoft.Xna.Framework.Vector3.UnitZ*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.Up
  commentId: P:Microsoft.Xna.Framework.Vector3.Up
  id: Up
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Up
  nameWithType: Vector3.Up
  fullName: Microsoft.Xna.Framework.Vector3.Up
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Up
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 104
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 1, 0.\n"
  example: []
  syntax:
    content: public static Vector3 Up { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property Up As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Up*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.Down
  commentId: P:Microsoft.Xna.Framework.Vector3.Down
  id: Down
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Down
  nameWithType: Vector3.Down
  fullName: Microsoft.Xna.Framework.Vector3.Down
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Down
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 112
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 0, -1, 0.\n"
  example: []
  syntax:
    content: public static Vector3 Down { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property Down As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Down*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.Right
  commentId: P:Microsoft.Xna.Framework.Vector3.Right
  id: Right
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: Vector3.Right
  fullName: Microsoft.Xna.Framework.Vector3.Right
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Right
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 120
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 1, 0, 0.\n"
  example: []
  syntax:
    content: public static Vector3 Right { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property Right As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Right*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.Left
  commentId: P:Microsoft.Xna.Framework.Vector3.Left
  id: Left
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: Vector3.Left
  fullName: Microsoft.Xna.Framework.Vector3.Left
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Left
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 128
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components -1, 0, 0.\n"
  example: []
  syntax:
    content: public static Vector3 Left { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property Left As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Left*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.Forward
  commentId: P:Microsoft.Xna.Framework.Vector3.Forward
  id: Forward
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Forward
  nameWithType: Vector3.Forward
  fullName: Microsoft.Xna.Framework.Vector3.Forward
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Forward
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 136
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 0, -1.\n"
  example: []
  syntax:
    content: public static Vector3 Forward { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property Forward As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Forward*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.Backward
  commentId: P:Microsoft.Xna.Framework.Vector3.Backward
  id: Backward
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Backward
  nameWithType: Vector3.Backward
  fullName: Microsoft.Xna.Framework.Vector3.Backward
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Backward
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 144
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 0, 1.\n"
  example: []
  syntax:
    content: public static Vector3 Backward { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector3
    content.vb: Public Shared ReadOnly Property Backward As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Backward*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single)'
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Vector3(Single, Single, Single)
  nameWithType: Vector3.Vector3(Single, Single, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Vector3(System.Single, System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 175
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a 3d vector with X, Y and Z from three values.\n"
  example: []
  syntax:
    content: public Vector3(float x, float y, float z)
    parameters:
    - id: x
      type: System.Single
      description: The x coordinate in 3d-space.
    - id: y
      type: System.Single
      description: The y coordinate in 3d-space.
    - id: z
      type: System.Single
      description: The z coordinate in 3d-space.
    content.vb: Public Sub New(x As Single, y As Single, z As Single)
  overload: Microsoft.Xna.Framework.Vector3.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.#ctor(System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Vector3(Single)
  nameWithType: Vector3.Vector3(Single)
  fullName: Microsoft.Xna.Framework.Vector3.Vector3(System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 186
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a 3d vector with X, Y and Z set to the same value.\n"
  example: []
  syntax:
    content: public Vector3(float value)
    parameters:
    - id: value
      type: System.Single
      description: The x, y and z coordinates in 3d-space.
    content.vb: Public Sub New(value As Single)
  overload: Microsoft.Xna.Framework.Vector3.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)
  id: '#ctor(Microsoft.Xna.Framework.Vector2,System.Single)'
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Vector3(Vector2, Single)
  nameWithType: Vector3.Vector3(Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Vector3(Microsoft.Xna.Framework.Vector2, System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 198
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a 3d vector with X, Y from <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> and Z from a scalar.\n"
  example: []
  syntax:
    content: public Vector3(Vector2 value, float z)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: The x and y coordinates in 3d-space.
    - id: z
      type: System.Single
      description: The z coordinate in 3d-space.
    content.vb: Public Sub New(value As Vector2, z As Single)
  overload: Microsoft.Xna.Framework.Vector3.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Add(Vector3, Vector3)
  nameWithType: Vector3.Add(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 215
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms vector addition on <code data-dev-comment-type=\"paramref\" class=\"paramref\">value1</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">value2</code>.\n"
  example: []
  syntax:
    content: public static Vector3 Add(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector to add.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector to add.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector addition.
    content.vb: Public Shared Function Add(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Add(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Add(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Add(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 231
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms vector addition on <code data-dev-comment-type=\"paramref\" class=\"paramref\">value1</code> and\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">value2</code>, storing the result of the\naddition in <code data-dev-comment-type=\"paramref\" class=\"paramref\">result</code>.\n"
  example: []
  syntax:
    content: public static void Add(ref Vector3 value1, ref Vector3 value2, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector to add.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector to add.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector addition.
    content.vb: Public Shared Sub Add(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Add*
  nameWithType.vb: Vector3.Add(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Add(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Add(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)
  id: Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Barycentric(Vector3, Vector3, Vector3, Single, Single)
  nameWithType: Vector3.Barycentric(Vector3, Vector3, Vector3, Single, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Barycentric
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 247
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.\n"
  example: []
  syntax:
    content: public static Vector3 Barycentric(Vector3 value1, Vector3 value2, Vector3 value3, float amount1, float amount2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector of 3d-triangle.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector of 3d-triangle.
    - id: value3
      type: Microsoft.Xna.Framework.Vector3
      description: The third vector of 3d-triangle.
    - id: amount1
      type: System.Single
      description: Barycentric scalar <code>b2</code> which represents a weighting factor towards second vector of 3d-triangle.
    - id: amount2
      type: System.Single
      description: Barycentric scalar <code>b3</code> which represents a weighting factor towards third vector of 3d-triangle.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The cartesian translation of barycentric coordinates.
    content.vb: Public Shared Function Barycentric(value1 As Vector3, value2 As Vector3, value3 As Vector3, amount1 As Single, amount2 As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Barycentric(ref Vector3, ref Vector3, ref Vector3, Single, Single, out Vector3)
  nameWithType: Vector3.Barycentric(ref Vector3, ref Vector3, ref Vector3, Single, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Barycentric(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, System.Single, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Barycentric
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 264
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.\n"
  example: []
  syntax:
    content: public static void Barycentric(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, float amount1, float amount2, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector of 3d-triangle.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector of 3d-triangle.
    - id: value3
      type: Microsoft.Xna.Framework.Vector3
      description: The third vector of 3d-triangle.
    - id: amount1
      type: System.Single
      description: Barycentric scalar <code>b2</code> which represents a weighting factor towards second vector of 3d-triangle.
    - id: amount2
      type: System.Single
      description: Barycentric scalar <code>b3</code> which represents a weighting factor towards third vector of 3d-triangle.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The cartesian translation of barycentric coordinates as an output parameter.
    content.vb: Public Shared Sub Barycentric(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef value3 As Vector3, amount1 As Single, amount2 As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Barycentric*
  nameWithType.vb: Vector3.Barycentric(ByRef Vector3, ByRef Vector3, ByRef Vector3, Single, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Barycentric(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, System.Single, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Barycentric(ByRef Vector3, ByRef Vector3, ByRef Vector3, Single, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  id: CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: CatmullRom(Vector3, Vector3, Vector3, Vector3, Single)
  nameWithType: Vector3.CatmullRom(Vector3, Vector3, Vector3, Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CatmullRom
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 280
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains CatmullRom interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector3 CatmullRom(Vector3 value1, Vector3 value2, Vector3 value3, Vector3 value4, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector in interpolation.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector in interpolation.
    - id: value3
      type: Microsoft.Xna.Framework.Vector3
      description: The third vector in interpolation.
    - id: value4
      type: Microsoft.Xna.Framework.Vector3
      description: The fourth vector in interpolation.
    - id: amount
      type: System.Single
      description: Weighting factor.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of CatmullRom interpolation.
    content.vb: Public Shared Function CatmullRom(value1 As Vector3, value2 As Vector3, value3 As Vector3, value4 As Vector3, amount As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.CatmullRom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: CatmullRom(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3)
  nameWithType: Vector3.CatmullRom(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.CatmullRom(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CatmullRom
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 297
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains CatmullRom interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static void CatmullRom(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, ref Vector3 value4, float amount, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector in interpolation.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector in interpolation.
    - id: value3
      type: Microsoft.Xna.Framework.Vector3
      description: The third vector in interpolation.
    - id: value4
      type: Microsoft.Xna.Framework.Vector3
      description: The fourth vector in interpolation.
    - id: amount
      type: System.Single
      description: Weighting factor.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of CatmullRom interpolation as an output parameter.
    content.vb: Public Shared Sub CatmullRom(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef value3 As Vector3, ByRef value4 As Vector3, amount As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.CatmullRom*
  nameWithType.vb: Vector3.CatmullRom(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.CatmullRom(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: CatmullRom(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Clamp(Vector3, Vector3, Vector3)
  nameWithType: Vector3.Clamp(Vector3, Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clamp
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 311
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nClamps the specified value within a range.\n"
  example: []
  syntax:
    content: public static Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The value to clamp.
    - id: min
      type: Microsoft.Xna.Framework.Vector3
      description: The min value.
    - id: max
      type: Microsoft.Xna.Framework.Vector3
      description: The max value.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The clamped value.
    content.vb: Public Shared Function Clamp(value1 As Vector3, min As Vector3, max As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Clamp(ref Vector3, ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Clamp(ref Vector3, ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Clamp(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clamp
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 326
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nClamps the specified value within a range.\n"
  example: []
  syntax:
    content: public static void Clamp(ref Vector3 value1, ref Vector3 min, ref Vector3 max, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The value to clamp.
    - id: min
      type: Microsoft.Xna.Framework.Vector3
      description: The min value.
    - id: max
      type: Microsoft.Xna.Framework.Vector3
      description: The max value.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The clamped value as an output parameter.
    content.vb: Public Shared Sub Clamp(ByRef value1 As Vector3, ByRef min As Vector3, ByRef max As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Clamp*
  nameWithType.vb: Vector3.Clamp(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Clamp(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Clamp(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Cross(Vector3, Vector3)
  nameWithType: Vector3.Cross(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Cross
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 339
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nComputes the cross product of two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 Cross(Vector3 vector1, Vector3 vector2)
    parameters:
    - id: vector1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: vector2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The cross product of two vectors.
    content.vb: Public Shared Function Cross(vector1 As Vector3, vector2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Cross*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Cross(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Cross(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Cross(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Cross
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 351
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nComputes the cross product of two vectors.\n"
  example: []
  syntax:
    content: public static void Cross(ref Vector3 vector1, ref Vector3 vector2, out Vector3 result)
    parameters:
    - id: vector1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: vector2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The cross product of two vectors as an output parameter.
    content.vb: Public Shared Sub Cross(ByRef vector1 As Vector3, ByRef vector2 As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Cross*
  nameWithType.vb: Vector3.Cross(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Cross(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Cross(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Distance(Vector3, Vector3)
  nameWithType: Vector3.Distance(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Distance
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 367
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the distance between two vectors.\n"
  example: []
  syntax:
    content: public static float Distance(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    return:
      type: System.Single
      description: The distance between two vectors.
    content.vb: Public Shared Function Distance(value1 As Vector3, value2 As Vector3) As Single
  overload: Microsoft.Xna.Framework.Vector3.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  id: Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Distance(ref Vector3, ref Vector3, out Single)
  nameWithType: Vector3.Distance(ref Vector3, ref Vector3, out Single)
  fullName: Microsoft.Xna.Framework.Vector3.Distance(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Distance
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 380
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the distance between two vectors.\n"
  example: []
  syntax:
    content: public static void Distance(ref Vector3 value1, ref Vector3 value2, out float result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: result
      type: System.Single
      description: The distance between two vectors as an output parameter.
    content.vb: Public Shared Sub Distance(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Single)
  overload: Microsoft.Xna.Framework.Vector3.Distance*
  nameWithType.vb: Vector3.Distance(ByRef Vector3, ByRef Vector3, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Distance(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef System.Single)
  name.vb: Distance(ByRef Vector3, ByRef Vector3, ByRef Single)
- uid: Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector3, Vector3)
  nameWithType: Vector3.DistanceSquared(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DistanceSquared
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 392
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the squared distance between two vectors.\n"
  example: []
  syntax:
    content: public static float DistanceSquared(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    return:
      type: System.Single
      description: The squared distance between two vectors.
    content.vb: Public Shared Function DistanceSquared(value1 As Vector3, value2 As Vector3) As Single
  overload: Microsoft.Xna.Framework.Vector3.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  commentId: M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  id: DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: DistanceSquared(ref Vector3, ref Vector3, out Single)
  nameWithType: Vector3.DistanceSquared(ref Vector3, ref Vector3, out Single)
  fullName: Microsoft.Xna.Framework.Vector3.DistanceSquared(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DistanceSquared
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 405
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the squared distance between two vectors.\n"
  example: []
  syntax:
    content: public static void DistanceSquared(ref Vector3 value1, ref Vector3 value2, out float result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: result
      type: System.Single
      description: The squared distance between two vectors as an output parameter.
    content.vb: Public Shared Sub DistanceSquared(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Single)
  overload: Microsoft.Xna.Framework.Vector3.DistanceSquared*
  nameWithType.vb: Vector3.DistanceSquared(ByRef Vector3, ByRef Vector3, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.DistanceSquared(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef System.Single)
  name.vb: DistanceSquared(ByRef Vector3, ByRef Vector3, ByRef Single)
- uid: Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Divide(Vector3, Vector3)
  nameWithType: Vector3.Divide(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 418
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the components of another <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector3 Divide(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Divisor <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of dividing the vectors.
    content.vb: Public Shared Function Divide(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)
  id: Divide(Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Divide(Vector3, Single)
  nameWithType: Vector3.Divide(Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 432
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 Divide(Vector3 value1, float divider)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: divider
      type: System.Single
      description: Divisor scalar.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of dividing a vector by a scalar.
    content.vb: Public Shared Function Divide(value1 As Vector3, divider As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Divide(ref Vector3, Single, out Vector3)
  nameWithType: Vector3.Divide(ref Vector3, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Divide(ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 447
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by a scalar.\n"
  example: []
  syntax:
    content: public static void Divide(ref Vector3 value1, float divider, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: divider
      type: System.Single
      description: Divisor scalar.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of dividing a vector by a scalar as an output parameter.
    content.vb: Public Shared Sub Divide(ByRef value1 As Vector3, divider As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Divide*
  nameWithType.vb: Vector3.Divide(ByRef Vector3, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Divide(ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Divide(ByRef Vector3, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Divide(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Divide(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Divide(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 461
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the components of another <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Divide(ref Vector3 value1, ref Vector3 value2, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Divisor <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of dividing the vectors as an output parameter.
    content.vb: Public Shared Sub Divide(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Divide*
  nameWithType.vb: Vector3.Divide(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Divide(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Divide(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Dot(Vector3, Vector3)
  nameWithType: Vector3.Dot(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dot
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 474
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a dot product of two vectors.\n"
  example: []
  syntax:
    content: public static float Dot(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    return:
      type: System.Single
      description: The dot product of two vectors.
    content.vb: Public Shared Function Dot(value1 As Vector3, value2 As Vector3) As Single
  overload: Microsoft.Xna.Framework.Vector3.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  id: Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Dot(ref Vector3, ref Vector3, out Single)
  nameWithType: Vector3.Dot(ref Vector3, ref Vector3, out Single)
  fullName: Microsoft.Xna.Framework.Vector3.Dot(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dot
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 485
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a dot product of two vectors.\n"
  example: []
  syntax:
    content: public static void Dot(ref Vector3 value1, ref Vector3 value2, out float result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: result
      type: System.Single
      description: The dot product of two vectors as an output parameter.
    content.vb: Public Shared Sub Dot(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Single)
  overload: Microsoft.Xna.Framework.Vector3.Dot*
  nameWithType.vb: Vector3.Dot(ByRef Vector3, ByRef Vector3, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Dot(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef System.Single)
  name.vb: Dot(ByRef Vector3, ByRef Vector3, ByRef Single)
- uid: Microsoft.Xna.Framework.Vector3.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Vector3.Equals(Object)
  fullName: Microsoft.Xna.Framework.Vector3.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 495
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Vector3.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)
  id: Equals(Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Equals(Vector3)
  nameWithType: Vector3.Equals(Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 511
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(Vector3 other)
    parameters:
    - id: other
      type: Microsoft.Xna.Framework.Vector3
      description: The <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Function Equals(other As Vector3) As Boolean
  overload: Microsoft.Xna.Framework.Vector3.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Vector3}.Equals(Microsoft.Xna.Framework.Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Vector3.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector3.GetHashCode()
  fullName: Microsoft.Xna.Framework.Vector3.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 522
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets the hash code of this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code of this <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Vector3.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  id: Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Hermite(Vector3, Vector3, Vector3, Vector3, Single)
  nameWithType: Vector3.Hermite(Vector3, Vector3, Vector3, Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Hermite
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 541
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains hermite spline interpolation.\n"
  example: []
  syntax:
    content: public static Vector3 Hermite(Vector3 value1, Vector3 tangent1, Vector3 value2, Vector3 tangent2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first position vector.
    - id: tangent1
      type: Microsoft.Xna.Framework.Vector3
      description: The first tangent vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second position vector.
    - id: tangent2
      type: Microsoft.Xna.Framework.Vector3
      description: The second tangent vector.
    - id: amount
      type: System.Single
      description: Weighting factor.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The hermite spline interpolation vector.
    content.vb: Public Shared Function Hermite(value1 As Vector3, tangent1 As Vector3, value2 As Vector3, tangent2 As Vector3, amount As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Hermite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Hermite(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3)
  nameWithType: Vector3.Hermite(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Hermite(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Hermite
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 557
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains hermite spline interpolation.\n"
  example: []
  syntax:
    content: public static void Hermite(ref Vector3 value1, ref Vector3 tangent1, ref Vector3 value2, ref Vector3 tangent2, float amount, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first position vector.
    - id: tangent1
      type: Microsoft.Xna.Framework.Vector3
      description: The first tangent vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second position vector.
    - id: tangent2
      type: Microsoft.Xna.Framework.Vector3
      description: The second tangent vector.
    - id: amount
      type: System.Single
      description: Weighting factor.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The hermite spline interpolation vector as an output parameter.
    content.vb: Public Shared Sub Hermite(ByRef value1 As Vector3, ByRef tangent1 As Vector3, ByRef value2 As Vector3, ByRef tangent2 As Vector3, amount As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Hermite*
  nameWithType.vb: Vector3.Hermite(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Hermite(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Hermite(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Length
  commentId: M:Microsoft.Xna.Framework.Vector3.Length
  id: Length
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Vector3.Length()
  fullName: Microsoft.Xna.Framework.Vector3.Length()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Length
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 568
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the length of this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float Length()
    return:
      type: System.Single
      description: The length of this <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Length As Single
  overload: Microsoft.Xna.Framework.Vector3.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.LengthSquared
  commentId: M:Microsoft.Xna.Framework.Vector3.LengthSquared
  id: LengthSquared
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: LengthSquared()
  nameWithType: Vector3.LengthSquared()
  fullName: Microsoft.Xna.Framework.Vector3.LengthSquared()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LengthSquared
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 577
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the squared length of this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float LengthSquared()
    return:
      type: System.Single
      description: The squared length of this <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function LengthSquared As Single
  overload: Microsoft.Xna.Framework.Vector3.LengthSquared*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  id: Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Lerp(Vector3, Vector3, Single)
  nameWithType: Vector3.Lerp(Vector3, Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Lerp
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 589
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector3 Lerp(Vector3 value1, Vector3 value2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of linear interpolation of the specified vectors.
    content.vb: Public Shared Function Lerp(value1 As Vector3, value2 As Vector3, amount As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Lerp(ref Vector3, ref Vector3, Single, out Vector3)
  nameWithType: Vector3.Lerp(ref Vector3, ref Vector3, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Lerp(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Lerp
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 604
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static void Lerp(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of linear interpolation of the specified vectors as an output parameter.
    content.vb: Public Shared Sub Lerp(ByRef value1 As Vector3, ByRef value2 As Vector3, amount As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Lerp*
  nameWithType.vb: Vector3.Lerp(ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Lerp(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Lerp(ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  id: LerpPrecise(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: LerpPrecise(Vector3, Vector3, Single)
  nameWithType: Vector3.LerpPrecise(Vector3, Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LerpPrecise
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 621
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\nUses <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for the interpolation.\nLess efficient but more precise compared to <xref href=\"Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3%2cMicrosoft.Xna.Framework.Vector3%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nSee remarks section of <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for more info.\n"
  example: []
  syntax:
    content: public static Vector3 LerpPrecise(Vector3 value1, Vector3 value2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of linear interpolation of the specified vectors.
    content.vb: Public Shared Function LerpPrecise(value1 As Vector3, value2 As Vector3, amount As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: LerpPrecise(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: LerpPrecise(ref Vector3, ref Vector3, Single, out Vector3)
  nameWithType: Vector3.LerpPrecise(ref Vector3, ref Vector3, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.LerpPrecise(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LerpPrecise
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 639
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\nUses <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for the interpolation.\nLess efficient but more precise compared to <xref href=\"Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3%40%2cMicrosoft.Xna.Framework.Vector3%40%2cSystem.Single%2cMicrosoft.Xna.Framework.Vector3%40)\" data-throw-if-not-resolved=\"false\"></xref>.\nSee remarks section of <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for more info.\n"
  example: []
  syntax:
    content: public static void LerpPrecise(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of linear interpolation of the specified vectors as an output parameter.
    content.vb: Public Shared Sub LerpPrecise(ByRef value1 As Vector3, ByRef value2 As Vector3, amount As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.LerpPrecise*
  nameWithType.vb: Vector3.LerpPrecise(ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.LerpPrecise(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: LerpPrecise(ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Max(Vector3, Vector3)
  nameWithType: Vector3.Max(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Max
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 652
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a maximal values from the two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 Max(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> with maximal values from the two vectors.
    content.vb: Public Shared Function Max(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Max(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Max(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Max(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Max
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 666
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a maximal values from the two vectors.\n"
  example: []
  syntax:
    content: public static void Max(ref Vector3 value1, ref Vector3 value2, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> with maximal values from the two vectors as an output parameter.
    content.vb: Public Shared Sub Max(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Max*
  nameWithType.vb: Vector3.Max(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Max(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Max(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Min(Vector3, Vector3)
  nameWithType: Vector3.Min(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Min
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 679
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a minimal values from the two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 Min(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> with minimal values from the two vectors.
    content.vb: Public Shared Function Min(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Min(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Min(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Min(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Min
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 693
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a minimal values from the two vectors.\n"
  example: []
  syntax:
    content: public static void Min(ref Vector3 value1, ref Vector3 value2, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: The second vector.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> with minimal values from the two vectors as an output parameter.
    content.vb: Public Shared Sub Min(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Min*
  nameWithType.vb: Vector3.Min(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Min(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Min(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Vector3)
  nameWithType: Vector3.Multiply(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 706
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 Multiply(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector multiplication.
    content.vb: Public Shared Function Multiply(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  id: Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Single)
  nameWithType: Vector3.Multiply(Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 720
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> and a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 Multiply(Vector3 value1, float scaleFactor)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: scaleFactor
      type: System.Single
      description: Scalar value.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector multiplication with a scalar.
    content.vb: Public Shared Function Multiply(value1 As Vector3, scaleFactor As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(ref Vector3, Single, out Vector3)
  nameWithType: Vector3.Multiply(ref Vector3, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Multiply(ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 734
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> and a scalar.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Vector3 value1, float scaleFactor, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: scaleFactor
      type: System.Single
      description: Scalar value.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the multiplication with a scalar as an output parameter.
    content.vb: Public Shared Sub Multiply(ByRef value1 As Vector3, scaleFactor As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Multiply*
  nameWithType.vb: Vector3.Multiply(ByRef Vector3, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Multiply(ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Multiply(ByRef Vector3, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Multiply(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Multiply(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 747
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of two vectors.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Vector3 value1, ref Vector3 value2, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector multiplication as an output parameter.
    content.vb: Public Shared Sub Multiply(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Multiply*
  nameWithType.vb: Vector3.Multiply(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Multiply(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Multiply(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)
  id: Negate(Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Negate(Vector3)
  nameWithType: Vector3.Negate(Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Negate
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 759
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified vector inversion.\n"
  example: []
  syntax:
    content: public static Vector3 Negate(Vector3 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector inversion.
    content.vb: Public Shared Function Negate(value As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Negate(ref Vector3, out Vector3)
  nameWithType: Vector3.Negate(ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Negate(ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Negate
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 770
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified vector inversion.\n"
  example: []
  syntax:
    content: public static void Negate(ref Vector3 value, out Vector3 result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector inversion as an output parameter.
    content.vb: Public Shared Sub Negate(ByRef value As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Negate*
  nameWithType.vb: Vector3.Negate(ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Negate(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Negate(ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Normalize
  commentId: M:Microsoft.Xna.Framework.Vector3.Normalize
  id: Normalize
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector3.Normalize()
  fullName: Microsoft.Xna.Framework.Vector3.Normalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 780
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nTurns this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> to a unit vector with the same direction.\n"
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize
  overload: Microsoft.Xna.Framework.Vector3.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)
  id: Normalize(Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Normalize(Vector3)
  nameWithType: Vector3.Normalize(Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 794
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a normalized values from another vector.\n"
  example: []
  syntax:
    content: public static Vector3 Normalize(Vector3 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Unit vector.
    content.vb: Public Shared Function Normalize(value As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Normalize(ref Vector3, out Vector3)
  nameWithType: Vector3.Normalize(ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Normalize(ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 806
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a normalized values from another vector.\n"
  example: []
  syntax:
    content: public static void Normalize(ref Vector3 value, out Vector3 result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: Unit vector as an output parameter.
    content.vb: Public Shared Sub Normalize(ByRef value As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Normalize*
  nameWithType.vb: Vector3.Normalize(ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Normalize(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Normalize(ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Reflect(Vector3, Vector3)
  nameWithType: Vector3.Reflect(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Reflect
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 821
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains reflect vector of the given vector and normal.\n"
  example: []
  syntax:
    content: public static Vector3 Reflect(Vector3 vector, Vector3 normal)
    parameters:
    - id: vector
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: normal
      type: Microsoft.Xna.Framework.Vector3
      description: Reflection normal.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Reflected vector.
    content.vb: Public Shared Function Reflect(vector As Vector3, normal As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Reflect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Reflect(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Reflect(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Reflect(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Reflect
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 842
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains reflect vector of the given vector and normal.\n"
  example: []
  syntax:
    content: public static void Reflect(ref Vector3 vector, ref Vector3 normal, out Vector3 result)
    parameters:
    - id: vector
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: normal
      type: Microsoft.Xna.Framework.Vector3
      description: Reflection normal.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: Reflected vector as an output parameter.
    content.vb: Public Shared Sub Reflect(ByRef vector As Vector3, ByRef normal As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Reflect*
  nameWithType.vb: Vector3.Reflect(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Reflect(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Reflect(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  id: SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: SmoothStep(Vector3, Vector3, Single)
  nameWithType: Vector3.SmoothStep(Vector3, Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SmoothStep
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 862
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains cubic interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector3 SmoothStep(Vector3 value1, Vector3 value2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: Weighting value.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Cubic interpolation of the specified vectors.
    content.vb: Public Shared Function SmoothStep(value1 As Vector3, value2 As Vector3, amount As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.SmoothStep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  id: SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: SmoothStep(ref Vector3, ref Vector3, Single, out Vector3)
  nameWithType: Vector3.SmoothStep(ref Vector3, ref Vector3, Single, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.SmoothStep(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, System.Single, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SmoothStep
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 877
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains cubic interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static void SmoothStep(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: Weighting value.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: Cubic interpolation of the specified vectors as an output parameter.
    content.vb: Public Shared Sub SmoothStep(ByRef value1 As Vector3, ByRef value2 As Vector3, amount As Single, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.SmoothStep*
  nameWithType.vb: Vector3.SmoothStep(ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.SmoothStep(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, System.Single, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: SmoothStep(ByRef Vector3, ByRef Vector3, Single, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Subtract(Vector3, Vector3)
  nameWithType: Vector3.Subtract(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Subtract
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 890
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains subtraction of on <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> from a another.\n"
  example: []
  syntax:
    content: public static Vector3 Subtract(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector subtraction.
    content.vb: Public Shared Function Subtract(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  id: Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Subtract(ref Vector3, ref Vector3, out Vector3)
  nameWithType: Vector3.Subtract(ref Vector3, ref Vector3, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Subtract(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Vector3, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Subtract
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 904
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains subtraction of on <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> from a another.\n"
  example: []
  syntax:
    content: public static void Subtract(ref Vector3 value1, ref Vector3 value2, out Vector3 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: The result of the vector subtraction as an output parameter.
    content.vb: Public Shared Sub Subtract(ByRef value1 As Vector3, ByRef value2 As Vector3, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Subtract*
  nameWithType.vb: Vector3.Subtract(ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Subtract(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Subtract(ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.ToString
  commentId: M:Microsoft.Xna.Framework.Vector3.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector3.ToString()
  fullName: Microsoft.Xna.Framework.Vector3.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 916
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of this <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> in the format:\n{X:[<xref href=\"Microsoft.Xna.Framework.Vector3.X\" data-throw-if-not-resolved=\"false\"></xref>] Y:[<xref href=\"Microsoft.Xna.Framework.Vector3.Y\" data-throw-if-not-resolved=\"false\"></xref>] Z:[<xref href=\"Microsoft.Xna.Framework.Vector3.Z\" data-throw-if-not-resolved=\"false\"></xref>]}\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of this <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Vector3.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  id: Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(Vector3, Matrix)
  nameWithType: Vector3.Transform(Vector3, Matrix)
  fullName: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 937
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 3d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector3 Transform(Vector3 position, Matrix matrix)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Transform(position As Vector3, matrix As Matrix) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  id: Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(ref Vector3, ref Matrix, out Vector3)
  nameWithType: Vector3.Transform(ref Vector3, ref Matrix, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Transform(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Matrix, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 949
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 3d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Transform(ref Vector3 position, ref Matrix matrix, out Vector3 result)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> as an output parameter.
    content.vb: Public Shared Sub Transform(ByRef position As Vector3, ByRef matrix As Matrix, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  nameWithType.vb: Vector3.Transform(ByRef Vector3, ByRef Matrix, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Transform(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Matrix, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Transform(ByRef Vector3, ByRef Matrix, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)
  id: Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(Vector3, Quaternion)
  nameWithType: Vector3.Transform(Vector3, Quaternion)
  fullName: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 965
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 3d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>, representing the rotation.\n"
  example: []
  syntax:
    content: public static Vector3 Transform(Vector3 value, Quaternion rotation)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Transform(value As Vector3, rotation As Quaternion) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)
  id: Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(ref Vector3, ref Quaternion, out Vector3)
  nameWithType: Vector3.Transform(ref Vector3, ref Quaternion, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Transform(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 978
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 3d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>, representing the rotation.\n"
  example: []
  syntax:
    content: public static void Transform(ref Vector3 value, ref Quaternion rotation, out Vector3 result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> as an output parameter.
    content.vb: Public Shared Sub Transform(ByRef value As Vector3, ByRef rotation As Quaternion, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  nameWithType.vb: Vector3.Transform(ByRef Vector3, ByRef Quaternion, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Transform(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: Transform(ByRef Vector3, ByRef Quaternion, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  id: Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(Vector3[], Int32, ref Matrix, Vector3[], Int32, Int32)
  nameWithType: Vector3.Transform(Vector3[], Int32, ref Matrix, Vector3[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[], System.Int32, ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 998
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector3[] sourceArray, int sourceIndex, ref Matrix matrix, Vector3[] destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Source array.
    - id: sourceIndex
      type: System.Int32
      description: The starting index of transformation in the source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Destination array.
    - id: destinationIndex
      type: System.Int32
      description: The starting index in the destination array, where the first <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> should be written.
    - id: length
      type: System.Int32
      description: The number of vectors to be transformed.
    content.vb: Public Shared Sub Transform(sourceArray As Vector3(), sourceIndex As Integer, ByRef matrix As Matrix, destinationArray As Vector3(), destinationIndex As Integer, length As Integer)
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  nameWithType.vb: Vector3.Transform(Vector3(), Int32, ByRef Matrix, Vector3(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3(), System.Int32, ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3(), System.Int32, System.Int32)
  name.vb: Transform(Vector3(), Int32, ByRef Matrix, Vector3(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  id: Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(Vector3[], Int32, ref Quaternion, Vector3[], Int32, Int32)
  nameWithType: Vector3.Transform(Vector3[], Int32, ref Quaternion, Vector3[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[], System.Int32, ref Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector3[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1031
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector3[] sourceArray, int sourceIndex, ref Quaternion rotation, Vector3[] destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Source array.
    - id: sourceIndex
      type: System.Int32
      description: The starting index of transformation in the source array.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Destination array.
    - id: destinationIndex
      type: System.Int32
      description: The starting index in the destination array, where the first <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> should be written.
    - id: length
      type: System.Int32
      description: The number of vectors to be transformed.
    content.vb: Public Shared Sub Transform(sourceArray As Vector3(), sourceIndex As Integer, ByRef rotation As Quaternion, destinationArray As Vector3(), destinationIndex As Integer, length As Integer)
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  nameWithType.vb: Vector3.Transform(Vector3(), Int32, ByRef Quaternion, Vector3(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3(), System.Int32, ByRef Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector3(), System.Int32, System.Int32)
  name.vb: Transform(Vector3(), Int32, ByRef Quaternion, Vector3(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  id: Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(Vector3[], ref Matrix, Vector3[])
  nameWithType: Vector3.Transform(Vector3[], ref Matrix, Vector3[])
  fullName: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[], ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1066
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on all vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector3[] sourceArray, ref Matrix matrix, Vector3[] destinationArray)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Destination array.
    content.vb: Public Shared Sub Transform(sourceArray As Vector3(), ByRef matrix As Matrix, destinationArray As Vector3())
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  nameWithType.vb: Vector3.Transform(Vector3(), ByRef Matrix, Vector3())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3(), ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3())
  name.vb: Transform(Vector3(), ByRef Matrix, Vector3())
- uid: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])
  commentId: M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])
  id: Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Transform(Vector3[], ref Quaternion, Vector3[])
  nameWithType: Vector3.Transform(Vector3[], ref Quaternion, Vector3[])
  fullName: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[], ref Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector3[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1094
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on all vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector3[] sourceArray, ref Quaternion rotation, Vector3[] destinationArray)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Source array.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Destination array.
    content.vb: Public Shared Sub Transform(sourceArray As Vector3(), ByRef rotation As Quaternion, destinationArray As Vector3())
  overload: Microsoft.Xna.Framework.Vector3.Transform*
  nameWithType.vb: Vector3.Transform(Vector3(), ByRef Quaternion, Vector3())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3(), ByRef Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector3())
  name.vb: Transform(Vector3(), ByRef Quaternion, Vector3())
- uid: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  commentId: M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  id: TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector3, Matrix)
  nameWithType: Vector3.TransformNormal(Vector3, Matrix)
  fullName: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1131
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of the specified normal by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector3 TransformNormal(Vector3 normal, Matrix matrix)
    parameters:
    - id: normal
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> which represents a normal vector.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Transformed normal.
    content.vb: Public Shared Function TransformNormal(normal As Vector3, matrix As Matrix) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.TransformNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  id: TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: TransformNormal(ref Vector3, ref Matrix, out Vector3)
  nameWithType: Vector3.TransformNormal(ref Vector3, ref Matrix, out Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.TransformNormal(ref Microsoft.Xna.Framework.Vector3, ref Microsoft.Xna.Framework.Matrix, out Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1143
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of the specified normal by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void TransformNormal(ref Vector3 normal, ref Matrix matrix, out Vector3 result)
    parameters:
    - id: normal
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> which represents a normal vector.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector3
      description: Transformed normal as an output parameter.
    content.vb: Public Shared Sub TransformNormal(ByRef normal As Vector3, ByRef matrix As Matrix, ByRef result As Vector3)
  overload: Microsoft.Xna.Framework.Vector3.TransformNormal*
  nameWithType.vb: Vector3.TransformNormal(ByRef Vector3, ByRef Matrix, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.TransformNormal(ByRef Microsoft.Xna.Framework.Vector3, ByRef Microsoft.Xna.Framework.Matrix, ByRef Microsoft.Xna.Framework.Vector3)
  name.vb: TransformNormal(ByRef Vector3, ByRef Matrix, ByRef Vector3)
- uid: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  id: TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector3[], Int32, ref Matrix, Vector3[], Int32, Int32)
  nameWithType: Vector3.TransformNormal(Vector3[], Int32, ref Matrix, Vector3[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[], System.Int32, ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1162
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on normals within array of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void TransformNormal(Vector3[] sourceArray, int sourceIndex, ref Matrix matrix, Vector3[] destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Source array.
    - id: sourceIndex
      type: System.Int32
      description: The starting index of transformation in the source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Destination array.
    - id: destinationIndex
      type: System.Int32
      description: The starting index in the destination array, where the first <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> should be written.
    - id: length
      type: System.Int32
      description: The number of normals to be transformed.
    content.vb: Public Shared Sub TransformNormal(sourceArray As Vector3(), sourceIndex As Integer, ByRef matrix As Matrix, destinationArray As Vector3(), destinationIndex As Integer, length As Integer)
  overload: Microsoft.Xna.Framework.Vector3.TransformNormal*
  nameWithType.vb: Vector3.TransformNormal(Vector3(), Int32, ByRef Matrix, Vector3(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3(), System.Int32, ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3(), System.Int32, System.Int32)
  name.vb: TransformNormal(Vector3(), Int32, ByRef Matrix, Vector3(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  commentId: M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  id: TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector3[], ref Matrix, Vector3[])
  nameWithType: Vector3.TransformNormal(Vector3[], ref Matrix, Vector3[])
  fullName: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[], ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1196
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on all normals within array of <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void TransformNormal(Vector3[] sourceArray, ref Matrix matrix, Vector3[] destinationArray)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector3[]
      description: Destination array.
    content.vb: Public Shared Sub TransformNormal(sourceArray As Vector3(), ByRef matrix As Matrix, destinationArray As Vector3())
  overload: Microsoft.Xna.Framework.Vector3.TransformNormal*
  nameWithType.vb: Vector3.TransformNormal(Vector3(), ByRef Matrix, Vector3())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3(), ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector3())
  name.vb: TransformNormal(Vector3(), ByRef Matrix, Vector3())
- uid: Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Equality(Vector3, Vector3)
  nameWithType: Vector3.Equality(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Equality(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1229
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> instance on the left of the equal sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> instance on the right of the equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator =(value1 As Vector3, value2 As Vector3) As Boolean
  overload: Microsoft.Xna.Framework.Vector3.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Inequality(Vector3, Vector3)
  nameWithType: Vector3.Inequality(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Inequality(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1242
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> instance on the left of the not equal sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> instance on the right of the not equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are not equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator <>(value1 As Vector3, value2 As Vector3) As Boolean
  overload: Microsoft.Xna.Framework.Vector3.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Addition(Vector3, Vector3)
  nameWithType: Vector3.Addition(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Addition(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Addition
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1253
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAdds two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 operator +(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the add sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the right of the add sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Sum of the vectors.
    content.vb: Public Shared Operator +(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)
  id: op_UnaryNegation(Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: UnaryNegation(Vector3)
  nameWithType: Vector3.UnaryNegation(Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.UnaryNegation(Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_UnaryNegation
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1266
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nInverts values in the specified <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector3 operator -(Vector3 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the right of the sub sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Result of the inversion.
    content.vb: Public Shared Operator -(value As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Subtraction(Vector3, Vector3)
  nameWithType: Vector3.Subtraction(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Subtraction(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Subtraction
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1278
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nSubtracts a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector3 operator -(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the sub sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the right of the sub sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Result of the vector subtraction.
    content.vb: Public Shared Operator -(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Vector3)
  nameWithType: Vector3.Multiply(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1292
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of two vectors by each other.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the mul sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Result of the vector multiplication.
    content.vb: Public Shared Operator *(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  id: op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Single)
  nameWithType: Vector3.Multiply(Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3, System.Single)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1306
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of vector by a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(Vector3 value, float scaleFactor)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the mul sign.
    - id: scaleFactor
      type: System.Single
      description: Scalar value on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Result of the vector multiplication with a scalar.
    content.vb: Public Shared Operator *(value As Vector3, scaleFactor As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)
  id: op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Single, Vector3)
  nameWithType: Vector3.Multiply(Single, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Multiply(System.Single, Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1320
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of vector by a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(float scaleFactor, Vector3 value)
    parameters:
    - id: scaleFactor
      type: System.Single
      description: Scalar value on the left of the mul sign.
    - id: value
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: Result of the vector multiplication with a scalar.
    content.vb: Public Shared Operator *(scaleFactor As Single, value As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  id: op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Division(Vector3, Vector3)
  nameWithType: Vector3.Division(Vector3, Vector3)
  fullName: Microsoft.Xna.Framework.Vector3.Division(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Division
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1334
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by the components of another <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector3 operator /(Vector3 value1, Vector3 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the div sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector3
      description: Divisor <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the right of the div sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of dividing the vectors.
    content.vb: Public Shared Operator /(value1 As Vector3, value2 As Vector3) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)
  id: op_Division(Microsoft.Xna.Framework.Vector3,System.Single)
  parent: Microsoft.Xna.Framework.Vector3
  langs:
  - csharp
  - vb
  name: Division(Vector3, Single)
  nameWithType: Vector3.Division(Vector3, Single)
  fullName: Microsoft.Xna.Framework.Vector3.Division(Microsoft.Xna.Framework.Vector3, System.Single)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector3.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Division
    path: ../MonoGame.Framework/Vector3.cs
    startLine: 1348
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector3\" data-throw-if-not-resolved=\"false\"></xref> by a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 operator /(Vector3 value1, float divider)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector3
      description: Source <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> on the left of the div sign.
    - id: divider
      type: System.Single
      description: Divisor scalar on the right of the div sign.
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The result of dividing a vector by a scalar.
    content.vb: Public Shared Operator /(value1 As Vector3, divider As Single) As Vector3
  overload: Microsoft.Xna.Framework.Vector3.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.IEquatable{Microsoft.Xna.Framework.Vector3}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Vector3}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Vector3>
  nameWithType: IEquatable<Vector3>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Vector3>
  nameWithType.vb: IEquatable(Of Vector3)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Vector3)
  name.vb: IEquatable(Of Vector3)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Microsoft.Xna.Framework.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Microsoft.Xna.Framework.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Vector3
  commentId: T:Microsoft.Xna.Framework.Vector3
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector3
  nameWithType: Vector3
  fullName: Microsoft.Xna.Framework.Vector3
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Vector3.Zero*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Zero
  isExternal: false
  name: Zero
  nameWithType: Vector3.Zero
  fullName: Microsoft.Xna.Framework.Vector3.Zero
- uid: Microsoft.Xna.Framework.Vector3.One*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.One
  isExternal: false
  name: One
  nameWithType: Vector3.One
  fullName: Microsoft.Xna.Framework.Vector3.One
- uid: Microsoft.Xna.Framework.Vector3.UnitX*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.UnitX
  isExternal: false
  name: UnitX
  nameWithType: Vector3.UnitX
  fullName: Microsoft.Xna.Framework.Vector3.UnitX
- uid: Microsoft.Xna.Framework.Vector3.UnitY*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.UnitY
  isExternal: false
  name: UnitY
  nameWithType: Vector3.UnitY
  fullName: Microsoft.Xna.Framework.Vector3.UnitY
- uid: Microsoft.Xna.Framework.Vector3.UnitZ*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.UnitZ
  isExternal: false
  name: UnitZ
  nameWithType: Vector3.UnitZ
  fullName: Microsoft.Xna.Framework.Vector3.UnitZ
- uid: Microsoft.Xna.Framework.Vector3.Up*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Up
  isExternal: false
  name: Up
  nameWithType: Vector3.Up
  fullName: Microsoft.Xna.Framework.Vector3.Up
- uid: Microsoft.Xna.Framework.Vector3.Down*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Down
  isExternal: false
  name: Down
  nameWithType: Vector3.Down
  fullName: Microsoft.Xna.Framework.Vector3.Down
- uid: Microsoft.Xna.Framework.Vector3.Right*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Right
  isExternal: false
  name: Right
  nameWithType: Vector3.Right
  fullName: Microsoft.Xna.Framework.Vector3.Right
- uid: Microsoft.Xna.Framework.Vector3.Left*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Left
  isExternal: false
  name: Left
  nameWithType: Vector3.Left
  fullName: Microsoft.Xna.Framework.Vector3.Left
- uid: Microsoft.Xna.Framework.Vector3.Forward*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Forward
  isExternal: false
  name: Forward
  nameWithType: Vector3.Forward
  fullName: Microsoft.Xna.Framework.Vector3.Forward
- uid: Microsoft.Xna.Framework.Vector3.Backward*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Backward
  isExternal: false
  name: Backward
  nameWithType: Vector3.Backward
  fullName: Microsoft.Xna.Framework.Vector3.Backward
- uid: Microsoft.Xna.Framework.Vector3.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.#ctor
  isExternal: false
  name: Vector3
  nameWithType: Vector3.Vector3
  fullName: Microsoft.Xna.Framework.Vector3.Vector3
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework.Vector3.Add*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Add
  isExternal: false
  name: Add
  nameWithType: Vector3.Add
  fullName: Microsoft.Xna.Framework.Vector3.Add
- uid: Microsoft.Xna.Framework.Vector3.Barycentric*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Barycentric
  isExternal: false
  name: Barycentric
  nameWithType: Vector3.Barycentric
  fullName: Microsoft.Xna.Framework.Vector3.Barycentric
- uid: Microsoft.Xna.Framework.Vector3.CatmullRom*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.CatmullRom
  isExternal: false
  name: CatmullRom
  nameWithType: Vector3.CatmullRom
  fullName: Microsoft.Xna.Framework.Vector3.CatmullRom
- uid: Microsoft.Xna.Framework.Vector3.Clamp*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Clamp
  isExternal: false
  name: Clamp
  nameWithType: Vector3.Clamp
  fullName: Microsoft.Xna.Framework.Vector3.Clamp
- uid: Microsoft.Xna.Framework.Vector3.Cross*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Cross
  isExternal: false
  name: Cross
  nameWithType: Vector3.Cross
  fullName: Microsoft.Xna.Framework.Vector3.Cross
- uid: Microsoft.Xna.Framework.Vector3.Distance*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Distance
  isExternal: false
  name: Distance
  nameWithType: Vector3.Distance
  fullName: Microsoft.Xna.Framework.Vector3.Distance
- uid: Microsoft.Xna.Framework.Vector3.DistanceSquared*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.DistanceSquared
  isExternal: false
  name: DistanceSquared
  nameWithType: Vector3.DistanceSquared
  fullName: Microsoft.Xna.Framework.Vector3.DistanceSquared
- uid: Microsoft.Xna.Framework.Vector3.Divide*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Divide
  isExternal: false
  name: Divide
  nameWithType: Vector3.Divide
  fullName: Microsoft.Xna.Framework.Vector3.Divide
- uid: Microsoft.Xna.Framework.Vector3.Dot*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Dot
  isExternal: false
  name: Dot
  nameWithType: Vector3.Dot
  fullName: Microsoft.Xna.Framework.Vector3.Dot
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Vector3.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Equals
  isExternal: false
  name: Equals
  nameWithType: Vector3.Equals
  fullName: Microsoft.Xna.Framework.Vector3.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{Microsoft.Xna.Framework.Vector3}.Equals(Microsoft.Xna.Framework.Vector3)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Vector3}.Equals(Microsoft.Xna.Framework.Vector3)
  parent: System.IEquatable{Microsoft.Xna.Framework.Vector3}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Vector3)
  nameWithType: IEquatable<Vector3>.Equals(Vector3)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Vector3>.Equals(Microsoft.Xna.Framework.Vector3)
  nameWithType.vb: IEquatable(Of Vector3).Equals(Vector3)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Vector3).Equals(Microsoft.Xna.Framework.Vector3)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Vector3>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Vector3>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Microsoft.Xna.Framework.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Vector3).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Vector3).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Microsoft.Xna.Framework.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Vector3.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Vector3.GetHashCode
  fullName: Microsoft.Xna.Framework.Vector3.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Vector3.Hermite*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Hermite
  isExternal: false
  name: Hermite
  nameWithType: Vector3.Hermite
  fullName: Microsoft.Xna.Framework.Vector3.Hermite
- uid: Microsoft.Xna.Framework.Vector3.Length*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Length
  isExternal: false
  name: Length
  nameWithType: Vector3.Length
  fullName: Microsoft.Xna.Framework.Vector3.Length
- uid: Microsoft.Xna.Framework.Vector3.LengthSquared*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.LengthSquared
  isExternal: false
  name: LengthSquared
  nameWithType: Vector3.LengthSquared
  fullName: Microsoft.Xna.Framework.Vector3.LengthSquared
- uid: Microsoft.Xna.Framework.Vector3.Lerp*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Lerp
  isExternal: false
  name: Lerp
  nameWithType: Vector3.Lerp
  fullName: Microsoft.Xna.Framework.Vector3.Lerp
- uid: Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
- uid: Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
- uid: Microsoft.Xna.Framework.Vector3.LerpPrecise*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.LerpPrecise
  isExternal: false
  name: LerpPrecise
  nameWithType: Vector3.LerpPrecise
  fullName: Microsoft.Xna.Framework.Vector3.LerpPrecise
- uid: Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
  commentId: M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)
- uid: Microsoft.Xna.Framework.Vector3.Max*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Max
  isExternal: false
  name: Max
  nameWithType: Vector3.Max
  fullName: Microsoft.Xna.Framework.Vector3.Max
- uid: Microsoft.Xna.Framework.Vector3.Min*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Min
  isExternal: false
  name: Min
  nameWithType: Vector3.Min
  fullName: Microsoft.Xna.Framework.Vector3.Min
- uid: Microsoft.Xna.Framework.Vector3.Multiply*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Multiply
  isExternal: false
  name: Multiply
  nameWithType: Vector3.Multiply
  fullName: Microsoft.Xna.Framework.Vector3.Multiply
- uid: Microsoft.Xna.Framework.Vector3.Negate*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Negate
  isExternal: false
  name: Negate
  nameWithType: Vector3.Negate
  fullName: Microsoft.Xna.Framework.Vector3.Negate
- uid: Microsoft.Xna.Framework.Vector3.Normalize*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Normalize
  isExternal: false
  name: Normalize
  nameWithType: Vector3.Normalize
  fullName: Microsoft.Xna.Framework.Vector3.Normalize
- uid: Microsoft.Xna.Framework.Vector3.Reflect*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Reflect
  isExternal: false
  name: Reflect
  nameWithType: Vector3.Reflect
  fullName: Microsoft.Xna.Framework.Vector3.Reflect
- uid: Microsoft.Xna.Framework.Vector3.SmoothStep*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.SmoothStep
  isExternal: false
  name: SmoothStep
  nameWithType: Vector3.SmoothStep
  fullName: Microsoft.Xna.Framework.Vector3.SmoothStep
- uid: Microsoft.Xna.Framework.Vector3.Subtract*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Subtract
  isExternal: false
  name: Subtract
  nameWithType: Vector3.Subtract
  fullName: Microsoft.Xna.Framework.Vector3.Subtract
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Vector3.X
  commentId: F:Microsoft.Xna.Framework.Vector3.X
- uid: Microsoft.Xna.Framework.Vector3.Y
  commentId: F:Microsoft.Xna.Framework.Vector3.Y
- uid: Microsoft.Xna.Framework.Vector3.Z
  commentId: F:Microsoft.Xna.Framework.Vector3.Z
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Vector3.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.ToString
  isExternal: false
  name: ToString
  nameWithType: Vector3.ToString
  fullName: Microsoft.Xna.Framework.Vector3.ToString
- uid: Microsoft.Xna.Framework.Matrix
  commentId: T:Microsoft.Xna.Framework.Matrix
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: Microsoft.Xna.Framework.Matrix
- uid: Microsoft.Xna.Framework.Vector3.Transform*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.Transform
  isExternal: false
  name: Transform
  nameWithType: Vector3.Transform
  fullName: Microsoft.Xna.Framework.Vector3.Transform
- uid: Microsoft.Xna.Framework.Quaternion
  commentId: T:Microsoft.Xna.Framework.Quaternion
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: Microsoft.Xna.Framework.Quaternion
- uid: Microsoft.Xna.Framework.Vector3[]
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: Microsoft.Xna.Framework.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: Microsoft.Xna.Framework.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Microsoft.Xna.Framework.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Microsoft.Xna.Framework.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Vector3.TransformNormal*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.TransformNormal
  isExternal: false
  name: TransformNormal
  nameWithType: Vector3.TransformNormal
  fullName: Microsoft.Xna.Framework.Vector3.TransformNormal
- uid: Microsoft.Xna.Framework.Vector3.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Vector3.Equality
  fullName: Microsoft.Xna.Framework.Vector3.Equality
- uid: Microsoft.Xna.Framework.Vector3.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Vector3.Inequality
  fullName: Microsoft.Xna.Framework.Vector3.Inequality
- uid: Microsoft.Xna.Framework.Vector3.op_Addition*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.op_Addition
  isExternal: false
  name: Addition
  nameWithType: Vector3.Addition
  fullName: Microsoft.Xna.Framework.Vector3.Addition
- uid: Microsoft.Xna.Framework.Vector3.op_UnaryNegation*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.op_UnaryNegation
  isExternal: false
  name: UnaryNegation
  nameWithType: Vector3.UnaryNegation
  fullName: Microsoft.Xna.Framework.Vector3.UnaryNegation
- uid: Microsoft.Xna.Framework.Vector3.op_Subtraction*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.op_Subtraction
  isExternal: false
  name: Subtraction
  nameWithType: Vector3.Subtraction
  fullName: Microsoft.Xna.Framework.Vector3.Subtraction
- uid: Microsoft.Xna.Framework.Vector3.op_Multiply*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.op_Multiply
  isExternal: false
  name: Multiply
  nameWithType: Vector3.Multiply
  fullName: Microsoft.Xna.Framework.Vector3.Multiply
- uid: Microsoft.Xna.Framework.Vector3.op_Division*
  commentId: Overload:Microsoft.Xna.Framework.Vector3.op_Division
  isExternal: false
  name: Division
  nameWithType: Vector3.Division
  fullName: Microsoft.Xna.Framework.Vector3.Division
