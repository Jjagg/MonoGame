### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Input.GamePadButtons
  commentId: T:Microsoft.Xna.Framework.Input.GamePadButtons
  id: GamePadButtons
  parent: Microsoft.Xna.Framework.Input
  children:
  - Microsoft.Xna.Framework.Input.GamePadButtons.#ctor(Microsoft.Xna.Framework.Input.Buttons)
  - Microsoft.Xna.Framework.Input.GamePadButtons.A
  - Microsoft.Xna.Framework.Input.GamePadButtons.B
  - Microsoft.Xna.Framework.Input.GamePadButtons.Back
  - Microsoft.Xna.Framework.Input.GamePadButtons.BigButton
  - Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)
  - Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode
  - Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder
  - Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick
  - Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  - Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  - Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder
  - Microsoft.Xna.Framework.Input.GamePadButtons.RightStick
  - Microsoft.Xna.Framework.Input.GamePadButtons.Start
  - Microsoft.Xna.Framework.Input.GamePadButtons.ToString
  - Microsoft.Xna.Framework.Input.GamePadButtons.X
  - Microsoft.Xna.Framework.Input.GamePadButtons.Y
  langs:
  - csharp
  - vb
  name: GamePadButtons
  nameWithType: GamePadButtons
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GamePadButtons
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 9
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nA struct that represents the current button states for the controller.\n"
  example: []
  syntax:
    content: public struct GamePadButtons
    content.vb: Public Structure GamePadButtons
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.A
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.A
  id: A
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: A
  nameWithType: GamePadButtons.A
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.A
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: A
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 17
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the button A is pressed.\n"
  example: []
  syntax:
    content: public ButtonState A { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the button A is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property A As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.A*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.B
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.B
  id: B
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: B
  nameWithType: GamePadButtons.B
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.B
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: B
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 29
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the button B is pressed.\n"
  example: []
  syntax:
    content: public ButtonState B { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the button B is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property B As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.B*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Back
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.Back
  id: Back
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: Back
  nameWithType: GamePadButtons.Back
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Back
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Back
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 41
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the button Back is pressed.\n"
  example: []
  syntax:
    content: public ButtonState Back { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the button Back is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Back As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.Back*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.X
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.X
  id: X
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: X
  nameWithType: GamePadButtons.X
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.X
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: X
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 53
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the button X is pressed.\n"
  example: []
  syntax:
    content: public ButtonState X { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the button X is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property X As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.X*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Y
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.Y
  id: Y
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: GamePadButtons.Y
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Y
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Y
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 65
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the button Y is pressed.\n"
  example: []
  syntax:
    content: public ButtonState Y { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the button Y is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Y As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.Y*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Start
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.Start
  id: Start
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: GamePadButtons.Start
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Start
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Start
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 77
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the button Start is pressed.\n"
  example: []
  syntax:
    content: public ButtonState Start { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the button Start is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Start As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.Start*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder
  id: LeftShoulder
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: LeftShoulder
  nameWithType: GamePadButtons.LeftShoulder
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LeftShoulder
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 89
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the left shoulder button is pressed.\n"
  example: []
  syntax:
    content: public ButtonState LeftShoulder { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the left shoulder button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property LeftShoulder As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick
  id: LeftStick
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: LeftStick
  nameWithType: GamePadButtons.LeftStick
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LeftStick
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 101
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the left stick button is pressed.\n"
  example: []
  syntax:
    content: public ButtonState LeftStick { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the left stick button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property LeftStick As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder
  id: RightShoulder
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: RightShoulder
  nameWithType: GamePadButtons.RightShoulder
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: RightShoulder
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 113
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the right shoulder button is pressed.\n"
  example: []
  syntax:
    content: public ButtonState RightShoulder { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the right shoulder button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property RightShoulder As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.RightStick
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.RightStick
  id: RightStick
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: RightStick
  nameWithType: GamePadButtons.RightStick
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.RightStick
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: RightStick
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 125
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the right stick button is pressed.\n"
  example: []
  syntax:
    content: public ButtonState RightStick { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the right stick button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property RightStick As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.RightStick*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.BigButton
  commentId: P:Microsoft.Xna.Framework.Input.GamePadButtons.BigButton
  id: BigButton
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: BigButton
  nameWithType: GamePadButtons.BigButton
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.BigButton
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: BigButton
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 137
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nGets a value indicating if the guide button is pressed.\n"
  example: []
  syntax:
    content: public ButtonState BigButton { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.ButtonState
      description: <xref href="Microsoft.Xna.Framework.Input.ButtonState.Pressed" data-throw-if-not-resolved="false"></xref> if the guide button is pressed; otherwise, <xref href="Microsoft.Xna.Framework.Input.ButtonState.Released" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property BigButton As ButtonState
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.BigButton*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.#ctor(Microsoft.Xna.Framework.Input.Buttons)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadButtons.#ctor(Microsoft.Xna.Framework.Input.Buttons)
  id: '#ctor(Microsoft.Xna.Framework.Input.Buttons)'
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: GamePadButtons(Buttons)
  nameWithType: GamePadButtons.GamePadButtons(Buttons)
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.GamePadButtons(Microsoft.Xna.Framework.Input.Buttons)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 145
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  syntax:
    content: public GamePadButtons(Buttons buttons)
    parameters:
    - id: buttons
      type: Microsoft.Xna.Framework.Input.Buttons
    content.vb: Public Sub New(buttons As Buttons)
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  id: op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: Equality(GamePadButtons, GamePadButtons)
  nameWithType: GamePadButtons.Equality(GamePadButtons, GamePadButtons)
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Equality(Microsoft.Xna.Framework.Input.GamePadButtons, Microsoft.Xna.Framework.Input.GamePadButtons)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 162
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether two specified instances of <xref href=\"Microsoft.Xna.Framework.Input.GamePadButtons\" data-throw-if-not-resolved=\"false\"></xref> are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(GamePadButtons left, GamePadButtons right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadButtons
      description: The first object to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadButtons
      description: The second object to compare.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">left</code> and <code data-dev-comment-type="paramref" class="paramref">right</code> are equal; otherwise, false.
    content.vb: Public Shared Operator =(left As GamePadButtons, right As GamePadButtons) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  id: op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: Inequality(GamePadButtons, GamePadButtons)
  nameWithType: GamePadButtons.Inequality(GamePadButtons, GamePadButtons)
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Inequality(Microsoft.Xna.Framework.Input.GamePadButtons, Microsoft.Xna.Framework.Input.GamePadButtons)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 173
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nDetermines whether two specified instances of <xref href=\"Microsoft.Xna.Framework.Input.GamePadButtons\" data-throw-if-not-resolved=\"false\"></xref> are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(GamePadButtons left, GamePadButtons right)
    parameters:
    - id: left
      type: Microsoft.Xna.Framework.Input.GamePadButtons
      description: The first object to compare.
    - id: right
      type: Microsoft.Xna.Framework.Input.GamePadButtons
      description: The second object to compare.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">left</code> and <code data-dev-comment-type="paramref" class="paramref">right</code> are not equal; otherwise, false.
    content.vb: Public Shared Operator <>(left As GamePadButtons, right As GamePadButtons) As Boolean
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: GamePadButtons.Equals(Object)
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 183
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns a value indicating whether this instance is equal to a specified object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare to this instance.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">obj</code> is a <xref href="Microsoft.Xna.Framework.Input.GamePadButtons" data-throw-if-not-resolved="false"></xref> and has the same value as this instance; otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GamePadButtons.GetHashCode()
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 193
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nServes as a hash function for a <xref href=\"Microsoft.Xna.Framework.Input.GamePadButtons\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a

        hash table.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.ToString
  commentId: M:Microsoft.Xna.Framework.Input.GamePadButtons.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Input.GamePadButtons
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GamePadButtons.ToString()
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/GamePadButtons.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Input/GamePadButtons.cs
    startLine: 202
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"Microsoft.Xna.Framework.Input.GamePadButtons\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="Microsoft.Xna.Framework.Input.GamePadButtons" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Input.GamePadButtons.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: false
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Input.ButtonState.Pressed
  commentId: F:Microsoft.Xna.Framework.Input.ButtonState.Pressed
- uid: Microsoft.Xna.Framework.Input.ButtonState.Released
  commentId: F:Microsoft.Xna.Framework.Input.ButtonState.Released
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.A*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.A
  isExternal: false
  name: A
  nameWithType: GamePadButtons.A
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.A
- uid: Microsoft.Xna.Framework.Input.ButtonState
  commentId: T:Microsoft.Xna.Framework.Input.ButtonState
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: ButtonState
  nameWithType: ButtonState
  fullName: Microsoft.Xna.Framework.Input.ButtonState
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.B*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.B
  isExternal: false
  name: B
  nameWithType: GamePadButtons.B
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.B
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Back*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.Back
  isExternal: false
  name: Back
  nameWithType: GamePadButtons.Back
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Back
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.X*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.X
  isExternal: false
  name: X
  nameWithType: GamePadButtons.X
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.X
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Y*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.Y
  isExternal: false
  name: Y
  nameWithType: GamePadButtons.Y
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Y
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Start*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.Start
  isExternal: false
  name: Start
  nameWithType: GamePadButtons.Start
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Start
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder
  isExternal: false
  name: LeftShoulder
  nameWithType: GamePadButtons.LeftShoulder
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick
  isExternal: false
  name: LeftStick
  nameWithType: GamePadButtons.LeftStick
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder
  isExternal: false
  name: RightShoulder
  nameWithType: GamePadButtons.RightShoulder
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.RightStick*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.RightStick
  isExternal: false
  name: RightStick
  nameWithType: GamePadButtons.RightStick
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.RightStick
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.BigButton*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.BigButton
  isExternal: false
  name: BigButton
  nameWithType: GamePadButtons.BigButton
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.BigButton
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.#ctor
  isExternal: false
  name: GamePadButtons
  nameWithType: GamePadButtons.GamePadButtons
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.GamePadButtons
- uid: Microsoft.Xna.Framework.Input.Buttons
  commentId: T:Microsoft.Xna.Framework.Input.Buttons
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: Buttons
  nameWithType: Buttons
  fullName: Microsoft.Xna.Framework.Input.Buttons
- uid: Microsoft.Xna.Framework.Input.GamePadButtons
  commentId: T:Microsoft.Xna.Framework.Input.GamePadButtons
  parent: Microsoft.Xna.Framework.Input
  isExternal: false
  name: GamePadButtons
  nameWithType: GamePadButtons
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality
  isExternal: false
  name: Equality
  nameWithType: GamePadButtons.Equality
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: GamePadButtons.Inequality
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.Equals
  isExternal: false
  name: Equals
  nameWithType: GamePadButtons.Equals
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: GamePadButtons.GetHashCode
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.GamePadButtons.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Input.GamePadButtons.ToString
  isExternal: false
  name: ToString
  nameWithType: GamePadButtons.ToString
  fullName: Microsoft.Xna.Framework.Input.GamePadButtons.ToString
