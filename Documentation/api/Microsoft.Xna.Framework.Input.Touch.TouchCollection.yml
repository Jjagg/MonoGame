### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchCollection
  id: TouchCollection
  parent: Microsoft.Xna.Framework.Input.Touch
  children:
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.#ctor(Microsoft.Xna.Framework.Input.Touch.TouchLocation[])
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation@)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item(System.Int32)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt(System.Int32)
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator
  - Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: TouchCollection
  nameWithType: TouchCollection
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TouchCollection
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nProvides state information for a touch screen enabled device.\n"
  example: []
  syntax:
    content: 'public struct TouchCollection : IList<TouchLocation>, ICollection<TouchLocation>, IEnumerable<TouchLocation>, IEnumerable'
    content.vb: >-
      Public Structure TouchCollection
          Implements IList(Of TouchLocation), ICollection(Of TouchLocation), IEnumerable(Of TouchLocation), IEnumerable
  implements:
  - System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  - System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected
  id: IsConnected
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: TouchCollection.IsConnected
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsConnected
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 27
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nStates if a touch screen is available.\n"
  example: []
  syntax:
    content: public bool IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConnected As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.#ctor(Microsoft.Xna.Framework.Input.Touch.TouchLocation[])
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.#ctor(Microsoft.Xna.Framework.Input.Touch.TouchLocation[])
  id: '#ctor(Microsoft.Xna.Framework.Input.Touch.TouchLocation[])'
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: TouchCollection(TouchLocation[])
  nameWithType: TouchCollection.TouchCollection(TouchLocation[])
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.TouchCollection(Microsoft.Xna.Framework.Input.Touch.TouchLocation[])
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 38
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchCollection\" data-throw-if-not-resolved=\"false\"></xref> with a pre-determined set of touch locations.\n"
  example: []
  syntax:
    content: public TouchCollection(TouchLocation[] touches)
    parameters:
    - id: touches
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation[]
      description: Array of <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> items to initialize with.
    content.vb: Public Sub New(touches As TouchLocation())
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.#ctor*
  nameWithType.vb: TouchCollection.TouchCollection(TouchLocation())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Input.Touch.TouchCollection.TouchCollection(Microsoft.Xna.Framework.Input.Touch.TouchLocation())
  name.vb: TouchCollection(TouchLocation())
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation@)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation@)
  id: FindById(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation@)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: FindById(Int32, out TouchLocation)
  nameWithType: TouchCollection.FindById(Int32, out TouchLocation)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById(System.Int32, out Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: FindById
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 52
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> specified by ID.\n"
  example: []
  syntax:
    content: public bool FindById(int id, out TouchLocation touchLocation)
    parameters:
    - id: id
      type: System.Int32
      description: ''
    - id: touchLocation
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function FindById(id As Integer, ByRef touchLocation As TouchLocation) As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById*
  nameWithType.vb: TouchCollection.FindById(Int32, ByRef TouchLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById(System.Int32, ByRef Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  name.vb: FindById(Int32, ByRef TouchLocation)
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: TouchCollection.IsReadOnly
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsReadOnly
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 73
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nStates if touch collection is read only.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  id: IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: IndexOf(TouchLocation)
  nameWithType: TouchCollection.IndexOf(TouchLocation)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IndexOf
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 83
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns the index of the first occurrence of specified <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> item in the collection.\n"
  example: []
  syntax:
    content: public int IndexOf(TouchLocation item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation
      description: <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> to query.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function IndexOf(item As TouchLocation) As Integer
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf*
  implements:
  - System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  id: Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, TouchLocation)
  nameWithType: TouchCollection.Insert(Int32, TouchLocation)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert(System.Int32, Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Insert
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 99
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nInserts a <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> item into the indicated position.\n"
  example: []
  syntax:
    content: public void Insert(int index, TouchLocation item)
    parameters:
    - id: index
      type: System.Int32
      description: The position to insert into.
    - id: item
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation
      description: The <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> item to insert.
    content.vb: Public Sub Insert(index As Integer, item As TouchLocation)
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert*
  implements:
  - System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt(System.Int32)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: TouchCollection.RemoveAt(Int32)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: RemoveAt
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 108
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nRemoves the <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> item at specified index.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the item that will be removed from collection.
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt*
  implements:
  - System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item(System.Int32)
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: TouchCollection.Item[Int32]
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: this[]
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 118
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nGets or sets the item at the specified index of the collection.\n"
  example: []
  syntax:
    content: public TouchLocation this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Position of the item.
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation
      description: <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Property Item(index As Integer) As TouchLocation
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item*
  implements:
  - System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Item(System.Int32)
  nameWithType.vb: TouchCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  id: Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: Add(TouchLocation)
  nameWithType: TouchCollection.Add(TouchLocation)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 134
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nAdds a <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> to the collection.\n"
  example: []
  syntax:
    content: public void Add(TouchLocation item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation
      description: 'The <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> item to be added. '
    content.vb: Public Sub Add(item As TouchLocation)
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear
  id: Clear
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TouchCollection.Clear()
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clear
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 142
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nClears all the items in collection.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  id: Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: Contains(TouchLocation)
  nameWithType: TouchCollection.Contains(TouchLocation)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Contains
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 152
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns true if specified <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> item exists in the collection, false otherwise./>\n"
  example: []
  syntax:
    content: public bool Contains(TouchLocation item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation
      description: The <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> item to query for.
    return:
      type: System.Boolean
      description: Returns true if queried item is found, false otherwise.
    content.vb: Public Function Contains(item As TouchLocation) As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)
  id: CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: CopyTo(TouchLocation[], Int32)
  nameWithType: TouchCollection.CopyTo(TouchLocation[], Int32)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[], System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CopyTo
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 168
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nCopies the <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref>collection to specified array starting from the given index.\n"
  example: []
  syntax:
    content: public void CopyTo(TouchLocation[] array, int arrayIndex)
    parameters:
    - id: array
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation[]
      description: The array to copy <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> items.
    - id: arrayIndex
      type: System.Int32
      description: The starting index of the copy operation.
    content.vb: Public Sub CopyTo(array As TouchLocation(), arrayIndex As Integer)
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)
  nameWithType.vb: TouchCollection.CopyTo(TouchLocation(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation(), System.Int32)
  name.vb: CopyTo(TouchLocation(), Int32)
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count
  commentId: P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count
  id: Count
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: TouchCollection.Count
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Count
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 176
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns the number of <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> items that exist in the collection.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  id: Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: Remove(TouchLocation)
  nameWithType: TouchCollection.Remove(TouchLocation)
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Remove
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 189
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nRemoves the specified <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchLocation\" data-throw-if-not-resolved=\"false\"></xref> item from the collection.\n"
  example: []
  syntax:
    content: public bool Remove(TouchLocation item)
    parameters:
    - id: item
      type: Microsoft.Xna.Framework.Input.Touch.TouchLocation
      description: The <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> item to remove.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Remove(item As TouchLocation) As Boolean
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: TouchCollection.GetEnumerator()
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetEnumerator
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 198
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns an enumerator for the <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TouchCollection.Enumerator GetEnumerator()
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator
      description: Enumerable list of <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: Public Function GetEnumerator As TouchCollection.Enumerator
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator
  isEii: true
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: IEnumerable<TouchLocation>.GetEnumerator()
  nameWithType: TouchCollection.IEnumerable<TouchLocation>.GetEnumerator()
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 207
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns an enumerator for the <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IEnumerator<TouchLocation> IEnumerable<TouchLocation>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
      description: Enumerable list of <xref href="Microsoft.Xna.Framework.Input.Touch.TouchLocation" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: Function System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator As IEnumerator(Of TouchLocation) Implements IEnumerable(Of TouchLocation).GetEnumerator
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.GetEnumerator
  nameWithType.vb: TouchCollection.System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator()
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: TouchCollection.IEnumerable.GetEnumerator()
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Input/Touch/TouchCollection.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../MonoGame.Framework/Input/Touch/TouchCollection.cs
    startLine: 216
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Input.Touch
  summary: "\nReturns an enumerator for the <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: Enumerable list of objects.
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: TouchCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Microsoft.Xna.Framework.Input.Touch
  commentId: N:Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: Microsoft.Xna.Framework.Input.Touch
  nameWithType: Microsoft.Xna.Framework.Input.Touch
  fullName: Microsoft.Xna.Framework.Input.Touch
- uid: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  commentId: T:System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TouchLocation>
  nameWithType: IList<TouchLocation>
  fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>
  nameWithType.vb: IList(Of TouchLocation)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  name.vb: IList(Of TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TouchLocation>
  nameWithType: ICollection<TouchLocation>
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>
  nameWithType.vb: ICollection(Of TouchLocation)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  name.vb: ICollection(Of TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TouchLocation>
  nameWithType: IEnumerable<TouchLocation>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>
  nameWithType.vb: IEnumerable(Of TouchLocation)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  name.vb: IEnumerable(Of TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected
  isExternal: false
  name: IsConnected
  nameWithType: TouchCollection.IsConnected
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchCollection
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: TouchCollection
  nameWithType: TouchCollection
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection
- uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchLocation
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: TouchLocation
  nameWithType: TouchLocation
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.#ctor
  isExternal: false
  name: TouchCollection
  nameWithType: TouchCollection.TouchCollection
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.TouchCollection
- uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation[]
  name: TouchLocation[]
  nameWithType: TouchLocation[]
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation[]
  nameWithType.vb: TouchLocation()
  fullName.vb: Microsoft.Xna.Framework.Input.Touch.TouchLocation()
  name.vb: TouchLocation()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById
  isExternal: false
  name: FindById
  nameWithType: TouchCollection.FindById
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: TouchCollection.IsReadOnly
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<TouchLocation>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.IsReadOnly
  nameWithType.vb: ICollection(Of TouchLocation).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: TouchCollection.IndexOf
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf
- uid: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(TouchLocation)
  nameWithType: IList<TouchLocation>.IndexOf(TouchLocation)
  fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  nameWithType.vb: IList(Of TouchLocation).IndexOf(TouchLocation)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<TouchLocation>.IndexOf
    fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of TouchLocation).IndexOf
    fullName: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert
  isExternal: false
  name: Insert
  nameWithType: TouchCollection.Insert
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert
- uid: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, TouchLocation)
  nameWithType: IList<TouchLocation>.Insert(Int32, TouchLocation)
  fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Insert(System.Int32, Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  nameWithType.vb: IList(Of TouchLocation).Insert(Int32, TouchLocation)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Insert(System.Int32, Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<TouchLocation>.Insert
    fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of TouchLocation).Insert
    fullName: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: TouchCollection.RemoveAt
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt
- uid: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<TouchLocation>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of TouchLocation).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<TouchLocation>.RemoveAt
    fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of TouchLocation).RemoveAt
    fullName: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item
  isExternal: false
  name: Item
  nameWithType: TouchCollection.Item
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item
- uid: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Item(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<TouchLocation>.Item[Int32]
  fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Item[System.Int32]
  nameWithType.vb: IList(Of TouchLocation).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<TouchLocation>.Item
    fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of TouchLocation).Item
    fullName: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add
  isExternal: false
  name: Add
  nameWithType: TouchCollection.Add
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(TouchLocation)
  nameWithType: ICollection<TouchLocation>.Add(TouchLocation)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  nameWithType.vb: ICollection(Of TouchLocation).Add(TouchLocation)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<TouchLocation>.Add
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of TouchLocation).Add
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear
  isExternal: false
  name: Clear
  nameWithType: TouchCollection.Clear
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Clear
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Clear
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<TouchLocation>.Clear()
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Clear()
  nameWithType.vb: ICollection(Of TouchLocation).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<TouchLocation>.Clear
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of TouchLocation).Clear
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains
  isExternal: false
  name: Contains
  nameWithType: TouchCollection.Contains
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(TouchLocation)
  nameWithType: ICollection<TouchLocation>.Contains(TouchLocation)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  nameWithType.vb: ICollection(Of TouchLocation).Contains(TouchLocation)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<TouchLocation>.Contains
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of TouchLocation).Contains
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: TouchCollection.CopyTo
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TouchLocation[], Int32)
  nameWithType: ICollection<TouchLocation>.CopyTo(TouchLocation[], Int32)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[], System.Int32)
  nameWithType.vb: ICollection(Of TouchLocation).CopyTo(TouchLocation(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation(), System.Int32)
  name.vb: CopyTo(TouchLocation(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<TouchLocation>.CopyTo
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of TouchLocation).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count
  isExternal: false
  name: Count
  nameWithType: TouchCollection.Count
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Count
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Count
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<TouchLocation>.Count
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Count
  nameWithType.vb: ICollection(Of TouchLocation).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove
  isExternal: false
  name: Remove
  nameWithType: TouchCollection.Remove
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  parent: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(TouchLocation)
  nameWithType: ICollection<TouchLocation>.Remove(TouchLocation)
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  nameWithType.vb: ICollection(Of TouchLocation).Remove(TouchLocation)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<TouchLocation>.Remove
    fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of TouchLocation).Remove
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: TouchCollection.GetEnumerator
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: false
  name: TouchCollection.Enumerator
  nameWithType: TouchCollection.Enumerator
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator
  isExternal: false
  name: IEnumerable<TouchLocation>.GetEnumerator
  nameWithType: TouchCollection.IEnumerable<TouchLocation>.GetEnumerator
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator
  nameWithType.vb: TouchCollection.System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Touch.TouchLocation}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TouchLocation>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TouchLocation).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TouchLocation>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Input.Touch.TouchLocation>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TouchLocation).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  commentId: T:System.Collections.Generic.IEnumerator{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TouchLocation>
  nameWithType: IEnumerator<TouchLocation>
  fullName: System.Collections.Generic.IEnumerator<Microsoft.Xna.Framework.Input.Touch.TouchLocation>
  nameWithType.vb: IEnumerator(Of TouchLocation)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  name.vb: IEnumerator(Of TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    nameWithType: TouchLocation
    fullName: Microsoft.Xna.Framework.Input.Touch.TouchLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: TouchCollection.IEnumerable.GetEnumerator
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: TouchCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
