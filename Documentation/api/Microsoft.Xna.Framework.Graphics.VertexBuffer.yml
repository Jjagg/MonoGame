### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer
  commentId: T:Microsoft.Xna.Framework.Graphics.VertexBuffer
  id: VertexBuffer
  parent: Microsoft.Xna.Framework.Graphics
  children:
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage,System.Boolean)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose(System.Boolean)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[])
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount
  - Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration
  langs:
  - csharp
  - vb
  name: VertexBuffer
  nameWithType: VertexBuffer
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.OpenGL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: VertexBuffer
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.OpenGL.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: 'public class VertexBuffer : GraphicsResource, IDisposable'
    content.vb: >-
      Public Class VertexBuffer
          Inherits GraphicsResource
          Implements IDisposable
  inheritance:
  - System.Object
  - Microsoft.Xna.Framework.Graphics.GraphicsResource
  derivedClasses:
  - Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer
  implements:
  - System.IDisposable
  inheritedMembers:
  - Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
  - Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing
  - Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDevice
  - Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed
  - Microsoft.Xna.Framework.Graphics.GraphicsResource.Name
  - Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag
  - Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount
  commentId: P:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount
  id: VertexCount
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: VertexCount
  nameWithType: VertexBuffer.VertexCount
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: VertexCount
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: public int VertexCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property VertexCount As Integer
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration
  commentId: P:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration
  id: VertexDeclaration
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: VertexDeclaration
  nameWithType: VertexBuffer.VertexDeclaration
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: VertexDeclaration
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 14
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: public VertexDeclaration VertexDeclaration { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.VertexDeclaration
    content.vb: Public ReadOnly Property VertexDeclaration As VertexDeclaration
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage
  commentId: P:Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage
  id: BufferUsage
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: BufferUsage
  nameWithType: VertexBuffer.BufferUsage
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: BufferUsage
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 15
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: public BufferUsage BufferUsage { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Graphics.BufferUsage
    content.vb: Public ReadOnly Property BufferUsage As BufferUsage
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage,System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage,System.Boolean)
  id: '#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage,System.Boolean)'
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: VertexBuffer(GraphicsDevice, VertexDeclaration, Int32, BufferUsage, Boolean)
  nameWithType: VertexBuffer.VertexBuffer(GraphicsDevice, VertexDeclaration, Int32, BufferUsage, Boolean)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexBuffer(Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Graphics.VertexDeclaration, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage, System.Boolean)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 17
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: protected VertexBuffer(GraphicsDevice graphicsDevice, VertexDeclaration vertexDeclaration, int vertexCount, BufferUsage bufferUsage, bool dynamic)
    parameters:
    - id: graphicsDevice
      type: Microsoft.Xna.Framework.Graphics.GraphicsDevice
    - id: vertexDeclaration
      type: Microsoft.Xna.Framework.Graphics.VertexDeclaration
    - id: vertexCount
      type: System.Int32
    - id: bufferUsage
      type: Microsoft.Xna.Framework.Graphics.BufferUsage
    - id: dynamic
      type: System.Boolean
    content.vb: Protected Sub New(graphicsDevice As GraphicsDevice, vertexDeclaration As VertexDeclaration, vertexCount As Integer, bufferUsage As BufferUsage, dynamic As Boolean)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)
  id: '#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)'
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: VertexBuffer(GraphicsDevice, VertexDeclaration, Int32, BufferUsage)
  nameWithType: VertexBuffer.VertexBuffer(GraphicsDevice, VertexDeclaration, Int32, BufferUsage)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexBuffer(Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Graphics.VertexDeclaration, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 37
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: public VertexBuffer(GraphicsDevice graphicsDevice, VertexDeclaration vertexDeclaration, int vertexCount, BufferUsage bufferUsage)
    parameters:
    - id: graphicsDevice
      type: Microsoft.Xna.Framework.Graphics.GraphicsDevice
    - id: vertexDeclaration
      type: Microsoft.Xna.Framework.Graphics.VertexDeclaration
    - id: vertexCount
      type: System.Int32
    - id: bufferUsage
      type: Microsoft.Xna.Framework.Graphics.BufferUsage
    content.vb: Public Sub New(graphicsDevice As GraphicsDevice, vertexDeclaration As VertexDeclaration, vertexCount As Integer, bufferUsage As BufferUsage)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)
  id: '#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)'
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: VertexBuffer(GraphicsDevice, Type, Int32, BufferUsage)
  nameWithType: VertexBuffer.VertexBuffer(GraphicsDevice, Type, Int32, BufferUsage)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexBuffer(Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Type, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 42
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: public VertexBuffer(GraphicsDevice graphicsDevice, Type type, int vertexCount, BufferUsage bufferUsage)
    parameters:
    - id: graphicsDevice
      type: Microsoft.Xna.Framework.Graphics.GraphicsDevice
    - id: type
      type: System.Type
    - id: vertexCount
      type: System.Int32
    - id: bufferUsage
      type: Microsoft.Xna.Framework.Graphics.BufferUsage
    content.vb: Public Sub New(graphicsDevice As GraphicsDevice, type As Type, vertexCount As Integer, bufferUsage As BufferUsage)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting
  id: GraphicsDeviceResetting
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: GraphicsDeviceResetting()
  nameWithType: VertexBuffer.GraphicsDeviceResetting()
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GraphicsDeviceResetting
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 50
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nThe GraphicsDevice is resetting, so GPU resources must be recreated.\n"
  example: []
  syntax:
    content: protected override void GraphicsDeviceResetting()
    content.vb: Protected Overrides Sub GraphicsDeviceResetting
  overridden: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  id: GetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: GetData<T>(Int32, T[], Int32, Int32, Int32)
  nameWithType: VertexBuffer.GetData<T>(Int32, T[], Int32, Int32, Int32)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData<T>(System.Int32, T[], System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetData
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 79
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nGet the vertex data froom this VertexBuffer.\n"
  remarks: "\nNote that this pulls data from VRAM into main memory and because of that is a very expensive operation.\nIt is often a better idea to keep a copy of the data in main memory.\n"
  example: []
  syntax:
    content: 'public void GetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, int vertexStride = 0)where T : struct'
    parameters:
    - id: offsetInBytes
      type: System.Int32
      description: The offset to the first element in the vertex buffer in bytes.
    - id: data
      type: '{T}[]'
      description: An array of T&apos;s to be filled.
    - id: startIndex
      type: System.Int32
      description: The index to start filling the data array.
    - id: elementCount
      type: System.Int32
      description: The number of T&apos;s to get.
    - id: vertexStride
      type: System.Int32
      description: The size of how a vertex buffer element should be interpreted.
    typeParameters:
    - id: T
      description: The struct you want to fill.
    content.vb: Public Sub GetData(Of T As Structure)(offsetInBytes As Integer, data As T(), startIndex As Integer, elementCount As Integer, vertexStride As Integer = 0)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData*
  nameWithType.vb: VertexBuffer.GetData(Of T)(Int32, T(), Int32, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData(Of T)(System.Int32, T(), System.Int32, System.Int32, System.Int32)
  name.vb: GetData(Of T)(Int32, T(), Int32, Int32, Int32)
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[],System.Int32,System.Int32)
  id: GetData``1(``0[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: GetData<T>(T[], Int32, Int32)
  nameWithType: VertexBuffer.GetData<T>(T[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData<T>(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetData
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 101
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: 'public void GetData<T>(T[] data, int startIndex, int elementCount)where T : struct'
    parameters:
    - id: data
      type: '{T}[]'
    - id: startIndex
      type: System.Int32
    - id: elementCount
      type: System.Int32
    typeParameters:
    - id: T
    content.vb: Public Sub GetData(Of T As Structure)(data As T(), startIndex As Integer, elementCount As Integer)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData*
  nameWithType.vb: VertexBuffer.GetData(Of T)(T(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData(Of T)(T(), System.Int32, System.Int32)
  name.vb: GetData(Of T)(T(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[])
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[])
  id: GetData``1(``0[])
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: GetData<T>(T[])
  nameWithType: VertexBuffer.GetData<T>(T[])
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData<T>(T[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetData
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 106
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: 'public void GetData<T>(T[] data)where T : struct'
    parameters:
    - id: data
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Sub GetData(Of T As Structure)(data As T())
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData*
  nameWithType.vb: VertexBuffer.GetData(Of T)(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData(Of T)(T())
  name.vb: GetData(Of T)(T())
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  id: SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: SetData<T>(Int32, T[], Int32, Int32, Int32)
  nameWithType: VertexBuffer.SetData<T>(Int32, T[], Int32, Int32, Int32)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData<T>(System.Int32, T[], System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetData
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 154
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nSets the vertex buffer data, specifying the index at which to start copying from the source data array,\nthe number of elements to copy from the source data array, \nand how far apart elements from the source data array should be when they are copied into the vertex buffer.\n"
  remarks: "\nIf <code>T</code> is <code>VertexPositionTexture</code>, but you want to set only the position component of the vertex data,\nyou would call this method as follows:\n<pre><code>Vector3[] positions = new Vector3[numVertices];\nvertexBuffer.SetData(0, positions, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);</code></pre>\n\nContinuing from the previous example, if you want to set only the texture coordinate component of the vertex data,\nyou would call this method as follows (note the use of <code data-dev-comment-type=\"paramref\" class=\"paramref\">offsetInBytes</code>:\n<pre><code>Vector2[] texCoords = new Vector2[numVertices];\nvertexBuffer.SetData(12, texCoords, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);</code></pre>\n"
  example: []
  syntax:
    content: 'public void SetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, int vertexStride)where T : struct'
    parameters:
    - id: offsetInBytes
      type: System.Int32
      description: Offset in bytes from the beginning of the vertex buffer to the start of the copied data.
    - id: data
      type: '{T}[]'
      description: Data array.
    - id: startIndex
      type: System.Int32
      description: >-
        Index at which to start copying from <code data-dev-comment-type="paramref" class="paramref">data</code>.

        Must be within the <code data-dev-comment-type="paramref" class="paramref">data</code> array bounds.
    - id: elementCount
      type: System.Int32
      description: "Number of elements to copy from <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code>.\nThe combination of <code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">elementCount</code> \nmust be within the <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> array bounds."
    - id: vertexStride
      type: System.Int32
      description: "Specifies how far apart, in bytes, elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> should be when \nthey are copied into the vertex buffer.\nIn almost all cases this should be <code>sizeof(T)</code>, to create a tightly-packed vertex buffer.\nIf you specify <code>sizeof(T)</code>, elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> will be copied into the \nvertex buffer with no padding between each element.\nIf you specify a value greater than <code>sizeof(T)</code>, elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> will be copied \ninto the vertex buffer with padding between each element.\nIf you specify <code>0</code> for this parameter, it will be treated as if you had specified <code>sizeof(T)</code>.\nWith the exception of <code>0</code>, you must specify a value greater than or equal to <code>sizeof(T)</code>."
    typeParameters:
    - id: T
      description: Type of elements in the data array.
    content.vb: Public Sub SetData(Of T As Structure)(offsetInBytes As Integer, data As T(), startIndex As Integer, elementCount As Integer, vertexStride As Integer)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData*
  nameWithType.vb: VertexBuffer.SetData(Of T)(Int32, T(), Int32, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData(Of T)(System.Int32, T(), System.Int32, System.Int32, System.Int32)
  name.vb: SetData(Of T)(Int32, T(), Int32, Int32, Int32)
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)
  id: SetData``1(``0[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: SetData<T>(T[], Int32, Int32)
  nameWithType: VertexBuffer.SetData<T>(T[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData<T>(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetData
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 172
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nSets the vertex buffer data, specifying the index at which to start copying from the source data array,\nand the number of elements to copy from the source data array. This is the same as calling \n<xref href=\"Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData%60%601(System.Int32%2c%60%600%5b%5d%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  with <code>offsetInBytes</code> equal to <code>0</code>,\nand <code>vertexStride</code> equal to <code>sizeof(T)</code>.\n"
  example: []
  syntax:
    content: 'public void SetData<T>(T[] data, int startIndex, int elementCount)where T : struct'
    parameters:
    - id: data
      type: '{T}[]'
      description: Data array.
    - id: startIndex
      type: System.Int32
      description: >-
        Index at which to start copying from <code data-dev-comment-type="paramref" class="paramref">data</code>.

        Must be within the <code data-dev-comment-type="paramref" class="paramref">data</code> array bounds.
    - id: elementCount
      type: System.Int32
      description: "Number of elements to copy from <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code>.\nThe combination of <code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">elementCount</code> \nmust be within the <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> array bounds."
    typeParameters:
    - id: T
      description: Type of elements in the data array.
    content.vb: Public Sub SetData(Of T As Structure)(data As T(), startIndex As Integer, elementCount As Integer)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData*
  nameWithType.vb: VertexBuffer.SetData(Of T)(T(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData(Of T)(T(), System.Int32, System.Int32)
  name.vb: SetData(Of T)(T(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])
  id: SetData``1(``0[])
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: SetData<T>(T[])
  nameWithType: VertexBuffer.SetData<T>(T[])
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData<T>(T[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetData
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 185
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  summary: "\nSets the vertex buffer data. This is the same as calling <xref href=\"Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData%60%601(System.Int32%2c%60%600%5b%5d%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref> \nwith <code>offsetInBytes</code> and <code>startIndex</code> equal to <code>0</code>, <code>elementCount</code> equal to <code>data.Length</code>, \nand <code>vertexStride</code> equal to <code>sizeof(T)</code>.\n"
  example: []
  syntax:
    content: 'public void SetData<T>(T[] data)where T : struct'
    parameters:
    - id: data
      type: '{T}[]'
      description: Data array.
    typeParameters:
    - id: T
      description: Type of elements in the data array.
    content.vb: Public Sub SetData(Of T As Structure)(data As T())
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData*
  nameWithType.vb: VertexBuffer.SetData(Of T)(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData(Of T)(T())
  name.vb: SetData(Of T)(T())
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)
  id: SetDataInternal``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: SetDataInternal<T>(Int32, T[], Int32, Int32, Int32, SetDataOptions)
  nameWithType: VertexBuffer.SetDataInternal<T>(Int32, T[], Int32, Int32, Int32, SetDataOptions)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal<T>(System.Int32, T[], System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetDataInternal
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.cs
    startLine: 191
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: 'protected void SetDataInternal<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, int vertexStride, SetDataOptions options)where T : struct'
    parameters:
    - id: offsetInBytes
      type: System.Int32
    - id: data
      type: '{T}[]'
    - id: startIndex
      type: System.Int32
    - id: elementCount
      type: System.Int32
    - id: vertexStride
      type: System.Int32
    - id: options
      type: Microsoft.Xna.Framework.Graphics.SetDataOptions
    typeParameters:
    - id: T
    content.vb: Protected Sub SetDataInternal(Of T As Structure)(offsetInBytes As Integer, data As T(), startIndex As Integer, elementCount As Integer, vertexStride As Integer, options As SetDataOptions)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal*
  nameWithType.vb: VertexBuffer.SetDataInternal(Of T)(Int32, T(), Int32, Int32, Int32, SetDataOptions)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal(Of T)(System.Int32, T(), System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions)
  name.vb: SetDataInternal(Of T)(Int32, T(), Int32, Int32, Int32, SetDataOptions)
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.Graphics.VertexBuffer
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: VertexBuffer.Dispose(Boolean)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Graphics/Vertices/VertexBuffer.OpenGL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Graphics/Vertices/VertexBuffer.OpenGL.cs
    startLine: 172
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Graphics
  syntax:
    content: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
  overridden: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)
  overload: Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource
  commentId: T:Microsoft.Xna.Framework.Graphics.GraphicsResource
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: GraphicsResource
  nameWithType: GraphicsResource
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
  commentId: M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: Dispose()
  nameWithType: GraphicsResource.Dispose()
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
    name: Dispose
    nameWithType: GraphicsResource.Dispose
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
    name: Dispose
    nameWithType: GraphicsResource.Dispose
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing
  commentId: E:Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: Disposing
  nameWithType: GraphicsResource.Disposing
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDevice
  commentId: P:Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDevice
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: GraphicsDevice
  nameWithType: GraphicsResource.GraphicsDevice
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDevice
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: IsDisposed
  nameWithType: GraphicsResource.IsDisposed
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Name
  commentId: P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Name
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: Name
  nameWithType: GraphicsResource.Name
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Name
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag
  commentId: P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: Tag
  nameWithType: GraphicsResource.Tag
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString
  commentId: M:Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: ToString()
  nameWithType: GraphicsResource.ToString()
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString
    name: ToString
    nameWithType: GraphicsResource.ToString
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString
    name: ToString
    nameWithType: GraphicsResource.ToString
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount
  isExternal: false
  name: VertexCount
  nameWithType: VertexBuffer.VertexCount
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration
  isExternal: false
  name: VertexDeclaration
  nameWithType: VertexBuffer.VertexDeclaration
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration
- uid: Microsoft.Xna.Framework.Graphics.VertexDeclaration
  commentId: T:Microsoft.Xna.Framework.Graphics.VertexDeclaration
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: VertexDeclaration
  nameWithType: VertexDeclaration
  fullName: Microsoft.Xna.Framework.Graphics.VertexDeclaration
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage
  isExternal: false
  name: BufferUsage
  nameWithType: VertexBuffer.BufferUsage
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage
- uid: Microsoft.Xna.Framework.Graphics.BufferUsage
  commentId: T:Microsoft.Xna.Framework.Graphics.BufferUsage
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: BufferUsage
  nameWithType: BufferUsage
  fullName: Microsoft.Xna.Framework.Graphics.BufferUsage
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor
  isExternal: false
  name: VertexBuffer
  nameWithType: VertexBuffer.VertexBuffer
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexBuffer
- uid: Microsoft.Xna.Framework.Graphics.GraphicsDevice
  commentId: T:Microsoft.Xna.Framework.Graphics.GraphicsDevice
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: GraphicsDevice
  nameWithType: GraphicsDevice
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsDevice
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting
  commentId: M:Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: false
  name: GraphicsDeviceResetting()
  nameWithType: GraphicsResource.GraphicsDeviceResetting()
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting
    name: GraphicsDeviceResetting
    nameWithType: GraphicsResource.GraphicsDeviceResetting
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting
    name: GraphicsDeviceResetting
    nameWithType: GraphicsResource.GraphicsDeviceResetting
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting
  isExternal: false
  name: GraphicsDeviceResetting
  nameWithType: VertexBuffer.GraphicsDeviceResetting
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting
- uid: Microsoft.Xna.Framework.Graphics.VertexPositionTexture
  commentId: T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: VertexPositionTexture
  nameWithType: VertexPositionTexture
  fullName: Microsoft.Xna.Framework.Graphics.VertexPositionTexture
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Position
  commentId: F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Position
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData
  isExternal: false
  name: GetData
  nameWithType: VertexBuffer.GetData
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData
  isExternal: false
  name: SetData
  nameWithType: VertexBuffer.SetData
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
  isExternal: true
  name: SetData<T>(Int32, T[], Int32, Int32, Int32)
  nameWithType: VertexBuffer.SetData<T>(Int32, T[], Int32, Int32, Int32)
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData<T>(System.Int32, T[], System.Int32, System.Int32, System.Int32)
  nameWithType.vb: VertexBuffer.SetData(Of T)(Int32, T(), Int32, Int32, Int32)
  fullName.vb: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData(Of T)(System.Int32, T(), System.Int32, System.Int32, System.Int32)
  name.vb: SetData(Of T)(Int32, T(), Int32, Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
    name: SetData<T>
    nameWithType: VertexBuffer.SetData<T>
    fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)
    name: SetData(Of T)
    nameWithType: VertexBuffer.SetData(Of T)
    fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal
  isExternal: false
  name: SetDataInternal
  nameWithType: VertexBuffer.SetDataInternal
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.SetDataInternal
- uid: Microsoft.Xna.Framework.Graphics.SetDataOptions
  commentId: T:Microsoft.Xna.Framework.Graphics.SetDataOptions
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: false
  name: SetDataOptions
  nameWithType: SetDataOptions
  fullName: Microsoft.Xna.Framework.Graphics.SetDataOptions
- uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.Graphics.GraphicsResource
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: GraphicsResource.Dispose(Boolean)
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)
    name: Dispose
    nameWithType: GraphicsResource.Dispose
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)
    name: Dispose
    nameWithType: GraphicsResource.Dispose
    fullName: Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose
  isExternal: false
  name: Dispose
  nameWithType: VertexBuffer.Dispose
  fullName: Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose
