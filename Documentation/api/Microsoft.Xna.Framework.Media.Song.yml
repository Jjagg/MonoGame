### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Media.Song
  commentId: T:Microsoft.Xna.Framework.Media.Song
  id: Song
  parent: Microsoft.Xna.Framework.Media
  children:
  - Microsoft.Xna.Framework.Media.Song.Album
  - Microsoft.Xna.Framework.Media.Song.Artist
  - Microsoft.Xna.Framework.Media.Song.Dispose
  - Microsoft.Xna.Framework.Media.Song.Duration
  - Microsoft.Xna.Framework.Media.Song.Equals(Microsoft.Xna.Framework.Media.Song)
  - Microsoft.Xna.Framework.Media.Song.Equals(System.Object)
  - Microsoft.Xna.Framework.Media.Song.Finalize
  - Microsoft.Xna.Framework.Media.Song.FromUri(System.String,System.Uri)
  - Microsoft.Xna.Framework.Media.Song.Genre
  - Microsoft.Xna.Framework.Media.Song.GetHashCode
  - Microsoft.Xna.Framework.Media.Song.IsDisposed
  - Microsoft.Xna.Framework.Media.Song.IsProtected
  - Microsoft.Xna.Framework.Media.Song.IsRated
  - Microsoft.Xna.Framework.Media.Song.Name
  - Microsoft.Xna.Framework.Media.Song.op_Equality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  - Microsoft.Xna.Framework.Media.Song.op_Inequality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  - Microsoft.Xna.Framework.Media.Song.PlayCount
  - Microsoft.Xna.Framework.Media.Song.Position
  - Microsoft.Xna.Framework.Media.Song.Rating
  - Microsoft.Xna.Framework.Media.Song.TrackNumber
  langs:
  - csharp
  - vb
  name: Song
  nameWithType: Song
  fullName: Microsoft.Xna.Framework.Media.Song
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Media/Song.NVorbis.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Song
    path: ../MonoGame.Framework/Media/Song.NVorbis.cs
    startLine: 11
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: 'public sealed class Song : IEquatable<Song>, IDisposable'
    content.vb: >-
      Public NotInheritable Class Song
          Implements IEquatable(Of Song), IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Media.Song}
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Xna.Framework.Media.Song.Album
  commentId: P:Microsoft.Xna.Framework.Media.Song.Album
  id: Album
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Album
  nameWithType: Song.Album
  fullName: Microsoft.Xna.Framework.Media.Song.Album
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Album
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 18
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  summary: "\nGets the Album on which the Song appears.\n"
  example: []
  syntax:
    content: public Album Album { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Media.Album
    content.vb: Public ReadOnly Property Album As Album
  overload: Microsoft.Xna.Framework.Media.Song.Album*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.Artist
  commentId: P:Microsoft.Xna.Framework.Media.Song.Artist
  id: Artist
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Artist
  nameWithType: Song.Artist
  fullName: Microsoft.Xna.Framework.Media.Song.Artist
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Artist
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 29
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  summary: "\nGets the Artist of the Song.\n"
  example: []
  syntax:
    content: public Artist Artist { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Media.Artist
    content.vb: Public ReadOnly Property Artist As Artist
  overload: Microsoft.Xna.Framework.Media.Song.Artist*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.Genre
  commentId: P:Microsoft.Xna.Framework.Media.Song.Genre
  id: Genre
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Genre
  nameWithType: Song.Genre
  fullName: Microsoft.Xna.Framework.Media.Song.Genre
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Genre
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 37
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  summary: "\nGets the Genre of the Song.\n"
  example: []
  syntax:
    content: public Genre Genre { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Media.Genre
    content.vb: Public ReadOnly Property Genre As Genre
  overload: Microsoft.Xna.Framework.Media.Song.Genre*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Media.Song.IsDisposed
  id: IsDisposed
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: Song.IsDisposed
  fullName: Microsoft.Xna.Framework.Media.Song.IsDisposed
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsDisposed
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 42
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Microsoft.Xna.Framework.Media.Song.IsDisposed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.Finalize
  commentId: M:Microsoft.Xna.Framework.Media.Song.Finalize
  id: Finalize
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: Song.Finalize()
  fullName: Microsoft.Xna.Framework.Media.Song.Finalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Finalize
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 66
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Xna.Framework.Media.Song.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Xna.Framework.Media.Song.FromUri(System.String,System.Uri)
  commentId: M:Microsoft.Xna.Framework.Media.Song.FromUri(System.String,System.Uri)
  id: FromUri(System.String,System.Uri)
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: FromUri(String, Uri)
  nameWithType: Song.FromUri(String, Uri)
  fullName: Microsoft.Xna.Framework.Media.Song.FromUri(System.String, System.Uri)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: FromUri
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 82
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  summary: "\nReturns a song that can be played via <xref href=\"Microsoft.Xna.Framework.Media.MediaPlayer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Song FromUri(string name, Uri uri)
    parameters:
    - id: name
      type: System.String
      description: The name for the song. See <xref href="Microsoft.Xna.Framework.Media.Song.Name" data-throw-if-not-resolved="false"></xref>.
    - id: uri
      type: System.Uri
      description: The path to the song file.
    return:
      type: Microsoft.Xna.Framework.Media.Song
      description: ''
    content.vb: Public Shared Function FromUri(name As String, uri As Uri) As Song
  overload: Microsoft.Xna.Framework.Media.Song.FromUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.Song.Dispose
  commentId: M:Microsoft.Xna.Framework.Media.Song.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Song.Dispose()
  fullName: Microsoft.Xna.Framework.Media.Song.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 89
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.Media.Song.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.Song.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Media.Song.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Song.GetHashCode()
  fullName: Microsoft.Xna.Framework.Media.Song.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 108
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Microsoft.Xna.Framework.Media.Song.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Media.Song.Equals(Microsoft.Xna.Framework.Media.Song)
  commentId: M:Microsoft.Xna.Framework.Media.Song.Equals(Microsoft.Xna.Framework.Media.Song)
  id: Equals(Microsoft.Xna.Framework.Media.Song)
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Equals(Song)
  nameWithType: Song.Equals(Song)
  fullName: Microsoft.Xna.Framework.Media.Song.Equals(Microsoft.Xna.Framework.Media.Song)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 113
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public bool Equals(Song song)
    parameters:
    - id: song
      type: Microsoft.Xna.Framework.Media.Song
    return:
      type: System.Boolean
    content.vb: Public Function Equals(song As Song) As Boolean
  overload: Microsoft.Xna.Framework.Media.Song.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Media.Song}.Equals(Microsoft.Xna.Framework.Media.Song)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Media.Song.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Media.Song.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Song.Equals(Object)
  fullName: Microsoft.Xna.Framework.Media.Song.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 123
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Media.Song.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Media.Song.op_Equality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  commentId: M:Microsoft.Xna.Framework.Media.Song.op_Equality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  id: op_Equality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Equality(Song, Song)
  nameWithType: Song.Equality(Song, Song)
  fullName: Microsoft.Xna.Framework.Media.Song.Equality(Microsoft.Xna.Framework.Media.Song, Microsoft.Xna.Framework.Media.Song)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 133
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static bool operator ==(Song song1, Song song2)
    parameters:
    - id: song1
      type: Microsoft.Xna.Framework.Media.Song
    - id: song2
      type: Microsoft.Xna.Framework.Media.Song
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(song1 As Song, song2 As Song) As Boolean
  overload: Microsoft.Xna.Framework.Media.Song.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.Song.op_Inequality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  commentId: M:Microsoft.Xna.Framework.Media.Song.op_Inequality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  id: op_Inequality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Inequality(Song, Song)
  nameWithType: Song.Inequality(Song, Song)
  fullName: Microsoft.Xna.Framework.Media.Song.Inequality(Microsoft.Xna.Framework.Media.Song, Microsoft.Xna.Framework.Media.Song)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 143
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static bool operator !=(Song song1, Song song2)
    parameters:
    - id: song1
      type: Microsoft.Xna.Framework.Media.Song
    - id: song2
      type: Microsoft.Xna.Framework.Media.Song
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(song1 As Song, song2 As Song) As Boolean
  overload: Microsoft.Xna.Framework.Media.Song.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.Song.Duration
  commentId: P:Microsoft.Xna.Framework.Media.Song.Duration
  id: Duration
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: Song.Duration
  fullName: Microsoft.Xna.Framework.Media.Song.Duration
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Duration
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 148
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public TimeSpan Duration { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property Duration As TimeSpan
  overload: Microsoft.Xna.Framework.Media.Song.Duration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.IsProtected
  commentId: P:Microsoft.Xna.Framework.Media.Song.IsProtected
  id: IsProtected
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: IsProtected
  nameWithType: Song.IsProtected
  fullName: Microsoft.Xna.Framework.Media.Song.IsProtected
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsProtected
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 153
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public bool IsProtected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsProtected As Boolean
  overload: Microsoft.Xna.Framework.Media.Song.IsProtected*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.IsRated
  commentId: P:Microsoft.Xna.Framework.Media.Song.IsRated
  id: IsRated
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: IsRated
  nameWithType: Song.IsRated
  fullName: Microsoft.Xna.Framework.Media.Song.IsRated
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsRated
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 158
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public bool IsRated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRated As Boolean
  overload: Microsoft.Xna.Framework.Media.Song.IsRated*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.Name
  commentId: P:Microsoft.Xna.Framework.Media.Song.Name
  id: Name
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Song.Name
  fullName: Microsoft.Xna.Framework.Media.Song.Name
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Name
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 163
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Microsoft.Xna.Framework.Media.Song.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.PlayCount
  commentId: P:Microsoft.Xna.Framework.Media.Song.PlayCount
  id: PlayCount
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: PlayCount
  nameWithType: Song.PlayCount
  fullName: Microsoft.Xna.Framework.Media.Song.PlayCount
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PlayCount
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 168
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public int PlayCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PlayCount As Integer
  overload: Microsoft.Xna.Framework.Media.Song.PlayCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.Rating
  commentId: P:Microsoft.Xna.Framework.Media.Song.Rating
  id: Rating
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Rating
  nameWithType: Song.Rating
  fullName: Microsoft.Xna.Framework.Media.Song.Rating
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Rating
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 173
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public int Rating { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Rating As Integer
  overload: Microsoft.Xna.Framework.Media.Song.Rating*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.TrackNumber
  commentId: P:Microsoft.Xna.Framework.Media.Song.TrackNumber
  id: TrackNumber
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: TrackNumber
  nameWithType: Song.TrackNumber
  fullName: Microsoft.Xna.Framework.Media.Song.TrackNumber
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TrackNumber
    path: ../MonoGame.Framework/Media/Song.cs
    startLine: 178
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public int TrackNumber { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TrackNumber As Integer
  overload: Microsoft.Xna.Framework.Media.Song.TrackNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.Song.Position
  commentId: P:Microsoft.Xna.Framework.Media.Song.Position
  id: Position
  parent: Microsoft.Xna.Framework.Media.Song
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Song.Position
  fullName: Microsoft.Xna.Framework.Media.Song.Position
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/Song.NVorbis.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Position
    path: ../MonoGame.Framework/Media/Song.NVorbis.cs
    startLine: 93
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public TimeSpan Position { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property Position As TimeSpan
  overload: Microsoft.Xna.Framework.Media.Song.Position*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Xna.Framework.Media
  commentId: N:Microsoft.Xna.Framework.Media
  isExternal: false
  name: Microsoft.Xna.Framework.Media
  nameWithType: Microsoft.Xna.Framework.Media
  fullName: Microsoft.Xna.Framework.Media
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Microsoft.Xna.Framework.Media.Song}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Media.Song}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Song>
  nameWithType: IEquatable<Song>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Media.Song>
  nameWithType.vb: IEquatable(Of Song)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Media.Song)
  name.vb: IEquatable(Of Song)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Media.Song
    name: Song
    nameWithType: Song
    fullName: Microsoft.Xna.Framework.Media.Song
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Media.Song
    name: Song
    nameWithType: Song
    fullName: Microsoft.Xna.Framework.Media.Song
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.Song.Album*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Album
  isExternal: false
  name: Album
  nameWithType: Song.Album
  fullName: Microsoft.Xna.Framework.Media.Song.Album
- uid: Microsoft.Xna.Framework.Media.Album
  commentId: T:Microsoft.Xna.Framework.Media.Album
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: Album
  nameWithType: Album
  fullName: Microsoft.Xna.Framework.Media.Album
- uid: Microsoft.Xna.Framework.Media.Song.Artist*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Artist
  isExternal: false
  name: Artist
  nameWithType: Song.Artist
  fullName: Microsoft.Xna.Framework.Media.Song.Artist
- uid: Microsoft.Xna.Framework.Media.Artist
  commentId: T:Microsoft.Xna.Framework.Media.Artist
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: Artist
  nameWithType: Artist
  fullName: Microsoft.Xna.Framework.Media.Artist
- uid: Microsoft.Xna.Framework.Media.Song.Genre*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Genre
  isExternal: false
  name: Genre
  nameWithType: Song.Genre
  fullName: Microsoft.Xna.Framework.Media.Song.Genre
- uid: Microsoft.Xna.Framework.Media.Genre
  commentId: T:Microsoft.Xna.Framework.Media.Genre
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: Genre
  nameWithType: Genre
  fullName: Microsoft.Xna.Framework.Media.Genre
- uid: Microsoft.Xna.Framework.Media.Song.IsDisposed*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.IsDisposed
  isExternal: false
  name: IsDisposed
  nameWithType: Song.IsDisposed
  fullName: Microsoft.Xna.Framework.Media.Song.IsDisposed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Media.Song.Finalize*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Finalize
  isExternal: false
  name: Finalize
  nameWithType: Song.Finalize
  fullName: Microsoft.Xna.Framework.Media.Song.Finalize
- uid: Microsoft.Xna.Framework.Media.MediaPlayer
  commentId: T:Microsoft.Xna.Framework.Media.MediaPlayer
  isExternal: false
  name: MediaPlayer
  nameWithType: MediaPlayer
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer
- uid: Microsoft.Xna.Framework.Media.Song.Name
  commentId: P:Microsoft.Xna.Framework.Media.Song.Name
- uid: Microsoft.Xna.Framework.Media.Song.FromUri*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.FromUri
  isExternal: false
  name: FromUri
  nameWithType: Song.FromUri
  fullName: Microsoft.Xna.Framework.Media.Song.FromUri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Xna.Framework.Media.Song
  commentId: T:Microsoft.Xna.Framework.Media.Song
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: Song
  nameWithType: Song
  fullName: Microsoft.Xna.Framework.Media.Song
- uid: Microsoft.Xna.Framework.Media.Song.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Dispose
  isExternal: false
  name: Dispose
  nameWithType: Song.Dispose
  fullName: Microsoft.Xna.Framework.Media.Song.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.Song.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Song.GetHashCode
  fullName: Microsoft.Xna.Framework.Media.Song.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Media.Song.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Equals
  isExternal: false
  name: Equals
  nameWithType: Song.Equals
  fullName: Microsoft.Xna.Framework.Media.Song.Equals
- uid: System.IEquatable{Microsoft.Xna.Framework.Media.Song}.Equals(Microsoft.Xna.Framework.Media.Song)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Media.Song}.Equals(Microsoft.Xna.Framework.Media.Song)
  parent: System.IEquatable{Microsoft.Xna.Framework.Media.Song}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Song)
  nameWithType: IEquatable<Song>.Equals(Song)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Media.Song>.Equals(Microsoft.Xna.Framework.Media.Song)
  nameWithType.vb: IEquatable(Of Song).Equals(Song)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Media.Song).Equals(Microsoft.Xna.Framework.Media.Song)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Song>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Media.Song>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Song
    name: Song
    nameWithType: Song
    fullName: Microsoft.Xna.Framework.Media.Song
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Song).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Media.Song).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Media.Song
    name: Song
    nameWithType: Song
    fullName: Microsoft.Xna.Framework.Media.Song
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.Song.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Song.Equality
  fullName: Microsoft.Xna.Framework.Media.Song.Equality
- uid: Microsoft.Xna.Framework.Media.Song.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Song.Inequality
  fullName: Microsoft.Xna.Framework.Media.Song.Inequality
- uid: Microsoft.Xna.Framework.Media.Song.Duration*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Duration
  isExternal: false
  name: Duration
  nameWithType: Song.Duration
  fullName: Microsoft.Xna.Framework.Media.Song.Duration
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework.Media.Song.IsProtected*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.IsProtected
  isExternal: false
  name: IsProtected
  nameWithType: Song.IsProtected
  fullName: Microsoft.Xna.Framework.Media.Song.IsProtected
- uid: Microsoft.Xna.Framework.Media.Song.IsRated*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.IsRated
  isExternal: false
  name: IsRated
  nameWithType: Song.IsRated
  fullName: Microsoft.Xna.Framework.Media.Song.IsRated
- uid: Microsoft.Xna.Framework.Media.Song.Name*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Name
  isExternal: false
  name: Name
  nameWithType: Song.Name
  fullName: Microsoft.Xna.Framework.Media.Song.Name
- uid: Microsoft.Xna.Framework.Media.Song.PlayCount*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.PlayCount
  isExternal: false
  name: PlayCount
  nameWithType: Song.PlayCount
  fullName: Microsoft.Xna.Framework.Media.Song.PlayCount
- uid: Microsoft.Xna.Framework.Media.Song.Rating*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Rating
  isExternal: false
  name: Rating
  nameWithType: Song.Rating
  fullName: Microsoft.Xna.Framework.Media.Song.Rating
- uid: Microsoft.Xna.Framework.Media.Song.TrackNumber*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.TrackNumber
  isExternal: false
  name: TrackNumber
  nameWithType: Song.TrackNumber
  fullName: Microsoft.Xna.Framework.Media.Song.TrackNumber
- uid: Microsoft.Xna.Framework.Media.Song.Position*
  commentId: Overload:Microsoft.Xna.Framework.Media.Song.Position
  isExternal: false
  name: Position
  nameWithType: Song.Position
  fullName: Microsoft.Xna.Framework.Media.Song.Position
