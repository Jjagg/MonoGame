### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  id: Vector2
  parent: Microsoft.Xna.Framework
  children:
  - Microsoft.Xna.Framework.Vector2.#ctor(System.Single)
  - Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)
  - Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)
  - Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  - Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  - Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  - Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Equals(System.Object)
  - Microsoft.Xna.Framework.Vector2.GetHashCode
  - Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Length
  - Microsoft.Xna.Framework.Vector2.LengthSquared
  - Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Normalize
  - Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.One
  - Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  - Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  - Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.ToPoint
  - Microsoft.Xna.Framework.Vector2.ToString
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  - Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  - Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  - Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  - Microsoft.Xna.Framework.Vector2.UnitX
  - Microsoft.Xna.Framework.Vector2.UnitY
  - Microsoft.Xna.Framework.Vector2.X
  - Microsoft.Xna.Framework.Vector2.Y
  - Microsoft.Xna.Framework.Vector2.Zero
  langs:
  - csharp
  - vb
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Vector2
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 14
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDescribes a 2D-vector.\n"
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof (Vector2TypeConverter))]

      [DataContract]

      public struct Vector2 : IEquatable<Vector2>
    content.vb: >-
      <TypeConverter(GetType(Vector2TypeConverter))>

      <DataContract>

      Public Structure Vector2
          Implements IEquatable(Of Vector2)
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Vector2}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.ComponentModel.TypeConverterAttribute
    ctor: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Microsoft.Xna.Framework.Design.Vector2TypeConverter
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Vector2.X
  commentId: F:Microsoft.Xna.Framework.Vector2.X
  id: X
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector2.X
  fullName: Microsoft.Xna.Framework.Vector2.X
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: X
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 35
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe x coordinate of this <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float X
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public X As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.Y
  commentId: F:Microsoft.Xna.Framework.Vector2.Y
  id: Y
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector2.Y
  fullName: Microsoft.Xna.Framework.Vector2.Y
  type: Field
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Y
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 41
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nThe y coordinate of this <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Y
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Y As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.Zero
  commentId: P:Microsoft.Xna.Framework.Vector2.Zero
  id: Zero
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector2.Zero
  fullName: Microsoft.Xna.Framework.Vector2.Zero
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Zero
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 50
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 0.\n"
  example: []
  syntax:
    content: public static Vector2 Zero { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Shared ReadOnly Property Zero As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Zero*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector2.One
  commentId: P:Microsoft.Xna.Framework.Vector2.One
  id: One
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Vector2.One
  fullName: Microsoft.Xna.Framework.Vector2.One
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: One
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 58
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> with components 1, 1.\n"
  example: []
  syntax:
    content: public static Vector2 One { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Shared ReadOnly Property One As Vector2
  overload: Microsoft.Xna.Framework.Vector2.One*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector2.UnitX
  commentId: P:Microsoft.Xna.Framework.Vector2.UnitX
  id: UnitX
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Vector2.UnitX
  fullName: Microsoft.Xna.Framework.Vector2.UnitX
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: UnitX
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 66
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> with components 1, 0.\n"
  example: []
  syntax:
    content: public static Vector2 UnitX { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Shared ReadOnly Property UnitX As Vector2
  overload: Microsoft.Xna.Framework.Vector2.UnitX*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector2.UnitY
  commentId: P:Microsoft.Xna.Framework.Vector2.UnitY
  id: UnitY
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Vector2.UnitY
  fullName: Microsoft.Xna.Framework.Vector2.UnitY
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: UnitY
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 74
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> with components 0, 1.\n"
  example: []
  syntax:
    content: public static Vector2 UnitY { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Shared ReadOnly Property UnitY As Vector2
  overload: Microsoft.Xna.Framework.Vector2.UnitY*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)
  id: '#ctor(System.Single,System.Single)'
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Vector2(Single, Single)
  nameWithType: Vector2.Vector2(Single, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Vector2(System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 103
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a 2d vector with X and Y from two values.\n"
  example: []
  syntax:
    content: public Vector2(float x, float y)
    parameters:
    - id: x
      type: System.Single
      description: The x coordinate in 2d-space.
    - id: y
      type: System.Single
      description: The y coordinate in 2d-space.
    content.vb: Public Sub New(x As Single, y As Single)
  overload: Microsoft.Xna.Framework.Vector2.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.#ctor(System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Vector2(Single)
  nameWithType: Vector2.Vector2(Single)
  fullName: Microsoft.Xna.Framework.Vector2.Vector2(System.Single)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 113
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nConstructs a 2d vector with X and Y set to the same value.\n"
  example: []
  syntax:
    content: public Vector2(float value)
    parameters:
    - id: value
      type: System.Single
      description: The x and y coordinates in 2d-space.
    content.vb: Public Sub New(value As Single)
  overload: Microsoft.Xna.Framework.Vector2.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)
  id: op_UnaryNegation(Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: UnaryNegation(Vector2)
  nameWithType: Vector2.UnaryNegation(Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.UnaryNegation(Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_UnaryNegation
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 128
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nInverts values in the specified <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector2 operator -(Vector2 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the right of the sub sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Result of the inversion.
    content.vb: Public Shared Operator -(value As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Addition(Vector2, Vector2)
  nameWithType: Vector2.Addition(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Addition(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Addition
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 141
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nAdds two vectors.\n"
  example: []
  syntax:
    content: public static Vector2 operator +(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the left of the add sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the right of the add sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Sum of the vectors.
    content.vb: Public Shared Operator +(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Subtraction(Vector2, Vector2)
  nameWithType: Vector2.Subtraction(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Subtraction(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Subtraction
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 154
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nSubtracts a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector2 operator -(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the left of the sub sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the right of the sub sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Result of the vector subtraction.
    content.vb: Public Shared Operator -(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, Vector2)
  nameWithType: Vector2.Multiply(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 167
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of two vectors by each other.\n"
  example: []
  syntax:
    content: public static Vector2 operator *(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the left of the mul sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Result of the vector multiplication.
    content.vb: Public Shared Operator *(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  id: op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, Single)
  nameWithType: Vector2.Multiply(Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2, System.Single)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 180
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of vector by a scalar.\n"
  example: []
  syntax:
    content: public static Vector2 operator *(Vector2 value, float scaleFactor)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the left of the mul sign.
    - id: scaleFactor
      type: System.Single
      description: Scalar value on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Result of the vector multiplication with a scalar.
    content.vb: Public Shared Operator *(value As Vector2, scaleFactor As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)
  id: op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Single, Vector2)
  nameWithType: Vector2.Multiply(Single, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Multiply(System.Single, Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Multiply
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 193
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nMultiplies the components of vector by a scalar.\n"
  example: []
  syntax:
    content: public static Vector2 operator *(float scaleFactor, Vector2 value)
    parameters:
    - id: scaleFactor
      type: System.Single
      description: Scalar value on the left of the mul sign.
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the right of the mul sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Result of the vector multiplication with a scalar.
    content.vb: Public Shared Operator *(scaleFactor As Single, value As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Division(Vector2, Vector2)
  nameWithType: Vector2.Division(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Division(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Division
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 206
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the components of another <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector2 operator /(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the left of the div sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Divisor <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the right of the div sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of dividing the vectors.
    content.vb: Public Shared Operator /(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)
  id: op_Division(Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Division(Vector2, Single)
  nameWithType: Vector2.Division(Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Division(Microsoft.Xna.Framework.Vector2, System.Single)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Division
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 219
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by a scalar.\n"
  example: []
  syntax:
    content: public static Vector2 operator /(Vector2 value1, float divider)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> on the left of the div sign.
    - id: divider
      type: System.Single
      description: Divisor scalar on the right of the div sign.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of dividing a vector by a scalar.
    content.vb: Public Shared Operator /(value1 As Vector2, divider As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Equality(Vector2, Vector2)
  nameWithType: Vector2.Equality(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Equality(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 233
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> instance on the left of the equal sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> instance on the right of the equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator =(value1 As Vector2, value2 As Vector2) As Boolean
  overload: Microsoft.Xna.Framework.Vector2.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Inequality(Vector2, Vector2)
  nameWithType: Vector2.Inequality(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Inequality(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 244
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether two <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> instance on the left of the not equal sign.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> instance on the right of the not equal sign.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are not equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator <>(value1 As Vector2, value2 As Vector2) As Boolean
  overload: Microsoft.Xna.Framework.Vector2.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Add(Vector2, Vector2)
  nameWithType: Vector2.Add(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 259
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms vector addition on <code data-dev-comment-type=\"paramref\" class=\"paramref\">value1</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">value2</code>.\n"
  example: []
  syntax:
    content: public static Vector2 Add(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector to add.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector to add.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector addition.
    content.vb: Public Shared Function Add(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Add(ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Add(ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Add(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Add
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 274
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nPerforms vector addition on <code data-dev-comment-type=\"paramref\" class=\"paramref\">value1</code> and\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">value2</code>, storing the result of the\naddition in <code data-dev-comment-type=\"paramref\" class=\"paramref\">result</code>.\n"
  example: []
  syntax:
    content: public static void Add(ref Vector2 value1, ref Vector2 value2, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector to add.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector to add.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector addition.
    content.vb: Public Shared Sub Add(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Add*
  nameWithType.vb: Vector2.Add(ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Add(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Add(ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)
  id: Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Barycentric(Vector2, Vector2, Vector2, Single, Single)
  nameWithType: Vector2.Barycentric(Vector2, Vector2, Vector2, Single, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Barycentric
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 289
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.\n"
  example: []
  syntax:
    content: public static Vector2 Barycentric(Vector2 value1, Vector2 value2, Vector2 value3, float amount1, float amount2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector of 2d-triangle.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector of 2d-triangle.
    - id: value3
      type: Microsoft.Xna.Framework.Vector2
      description: The third vector of 2d-triangle.
    - id: amount1
      type: System.Single
      description: Barycentric scalar <code>b2</code> which represents a weighting factor towards second vector of 2d-triangle.
    - id: amount2
      type: System.Single
      description: Barycentric scalar <code>b3</code> which represents a weighting factor towards third vector of 2d-triangle.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The cartesian translation of barycentric coordinates.
    content.vb: Public Shared Function Barycentric(value1 As Vector2, value2 As Vector2, value3 As Vector2, amount1 As Single, amount2 As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Barycentric(ref Vector2, ref Vector2, ref Vector2, Single, Single, out Vector2)
  nameWithType: Vector2.Barycentric(ref Vector2, ref Vector2, ref Vector2, Single, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Barycentric(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, System.Single, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Barycentric
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 305
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.\n"
  example: []
  syntax:
    content: public static void Barycentric(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, float amount1, float amount2, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector of 2d-triangle.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector of 2d-triangle.
    - id: value3
      type: Microsoft.Xna.Framework.Vector2
      description: The third vector of 2d-triangle.
    - id: amount1
      type: System.Single
      description: Barycentric scalar <code>b2</code> which represents a weighting factor towards second vector of 2d-triangle.
    - id: amount2
      type: System.Single
      description: Barycentric scalar <code>b3</code> which represents a weighting factor towards third vector of 2d-triangle.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The cartesian translation of barycentric coordinates as an output parameter.
    content.vb: Public Shared Sub Barycentric(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef value3 As Vector2, amount1 As Single, amount2 As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Barycentric*
  nameWithType.vb: Vector2.Barycentric(ByRef Vector2, ByRef Vector2, ByRef Vector2, Single, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Barycentric(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, System.Single, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Barycentric(ByRef Vector2, ByRef Vector2, ByRef Vector2, Single, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  id: CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: CatmullRom(Vector2, Vector2, Vector2, Vector2, Single)
  nameWithType: Vector2.CatmullRom(Vector2, Vector2, Vector2, Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CatmullRom
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 320
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains CatmullRom interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector2 CatmullRom(Vector2 value1, Vector2 value2, Vector2 value3, Vector2 value4, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector in interpolation.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector in interpolation.
    - id: value3
      type: Microsoft.Xna.Framework.Vector2
      description: The third vector in interpolation.
    - id: value4
      type: Microsoft.Xna.Framework.Vector2
      description: The fourth vector in interpolation.
    - id: amount
      type: System.Single
      description: Weighting factor.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of CatmullRom interpolation.
    content.vb: Public Shared Function CatmullRom(value1 As Vector2, value2 As Vector2, value3 As Vector2, value4 As Vector2, amount As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.CatmullRom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: CatmullRom(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2)
  nameWithType: Vector2.CatmullRom(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.CatmullRom(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: CatmullRom
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 336
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains CatmullRom interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static void CatmullRom(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, ref Vector2 value4, float amount, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector in interpolation.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector in interpolation.
    - id: value3
      type: Microsoft.Xna.Framework.Vector2
      description: The third vector in interpolation.
    - id: value4
      type: Microsoft.Xna.Framework.Vector2
      description: The fourth vector in interpolation.
    - id: amount
      type: System.Single
      description: Weighting factor.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of CatmullRom interpolation as an output parameter.
    content.vb: Public Shared Sub CatmullRom(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef value3 As Vector2, ByRef value4 As Vector2, amount As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.CatmullRom*
  nameWithType.vb: Vector2.CatmullRom(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.CatmullRom(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: CatmullRom(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Clamp(Vector2, Vector2, Vector2)
  nameWithType: Vector2.Clamp(Vector2, Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clamp
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 349
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nClamps the specified value within a range.\n"
  example: []
  syntax:
    content: public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The value to clamp.
    - id: min
      type: Microsoft.Xna.Framework.Vector2
      description: The min value.
    - id: max
      type: Microsoft.Xna.Framework.Vector2
      description: The max value.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The clamped value.
    content.vb: Public Shared Function Clamp(value1 As Vector2, min As Vector2, max As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Clamp(ref Vector2, ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Clamp(ref Vector2, ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Clamp(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Clamp
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 363
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nClamps the specified value within a range.\n"
  example: []
  syntax:
    content: public static void Clamp(ref Vector2 value1, ref Vector2 min, ref Vector2 max, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The value to clamp.
    - id: min
      type: Microsoft.Xna.Framework.Vector2
      description: The min value.
    - id: max
      type: Microsoft.Xna.Framework.Vector2
      description: The max value.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The clamped value as an output parameter.
    content.vb: Public Shared Sub Clamp(ByRef value1 As Vector2, ByRef min As Vector2, ByRef max As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Clamp*
  nameWithType.vb: Vector2.Clamp(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Clamp(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Clamp(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Distance(Vector2, Vector2)
  nameWithType: Vector2.Distance(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Distance
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 375
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the distance between two vectors.\n"
  example: []
  syntax:
    content: public static float Distance(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    return:
      type: System.Single
      description: The distance between two vectors.
    content.vb: Public Shared Function Distance(value1 As Vector2, value2 As Vector2) As Single
  overload: Microsoft.Xna.Framework.Vector2.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  id: Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Distance(ref Vector2, ref Vector2, out Single)
  nameWithType: Vector2.Distance(ref Vector2, ref Vector2, out Single)
  fullName: Microsoft.Xna.Framework.Vector2.Distance(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Distance
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 387
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the distance between two vectors.\n"
  example: []
  syntax:
    content: public static void Distance(ref Vector2 value1, ref Vector2 value2, out float result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: result
      type: System.Single
      description: The distance between two vectors as an output parameter.
    content.vb: Public Shared Sub Distance(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Single)
  overload: Microsoft.Xna.Framework.Vector2.Distance*
  nameWithType.vb: Vector2.Distance(ByRef Vector2, ByRef Vector2, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Distance(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef System.Single)
  name.vb: Distance(ByRef Vector2, ByRef Vector2, ByRef Single)
- uid: Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector2, Vector2)
  nameWithType: Vector2.DistanceSquared(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DistanceSquared
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 399
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the squared distance between two vectors.\n"
  example: []
  syntax:
    content: public static float DistanceSquared(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    return:
      type: System.Single
      description: The squared distance between two vectors.
    content.vb: Public Shared Function DistanceSquared(value1 As Vector2, value2 As Vector2) As Single
  overload: Microsoft.Xna.Framework.Vector2.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  commentId: M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  id: DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: DistanceSquared(ref Vector2, ref Vector2, out Single)
  nameWithType: Vector2.DistanceSquared(ref Vector2, ref Vector2, out Single)
  fullName: Microsoft.Xna.Framework.Vector2.DistanceSquared(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DistanceSquared
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 411
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the squared distance between two vectors.\n"
  example: []
  syntax:
    content: public static void DistanceSquared(ref Vector2 value1, ref Vector2 value2, out float result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: result
      type: System.Single
      description: The squared distance between two vectors as an output parameter.
    content.vb: Public Shared Sub DistanceSquared(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Single)
  overload: Microsoft.Xna.Framework.Vector2.DistanceSquared*
  nameWithType.vb: Vector2.DistanceSquared(ByRef Vector2, ByRef Vector2, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.DistanceSquared(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef System.Single)
  name.vb: DistanceSquared(ByRef Vector2, ByRef Vector2, ByRef Single)
- uid: Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Divide(Vector2, Vector2)
  nameWithType: Vector2.Divide(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 423
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the components of another <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector2 Divide(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Divisor <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of dividing the vectors.
    content.vb: Public Shared Function Divide(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Divide(ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Divide(ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Divide(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 436
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the components of another <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Divide(ref Vector2 value1, ref Vector2 value2, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Divisor <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of dividing the vectors as an output parameter.
    content.vb: Public Shared Sub Divide(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Divide*
  nameWithType.vb: Vector2.Divide(ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Divide(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Divide(ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)
  id: Divide(Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Divide(Vector2, Single)
  nameWithType: Vector2.Divide(Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 448
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by a scalar.\n"
  example: []
  syntax:
    content: public static Vector2 Divide(Vector2 value1, float divider)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: divider
      type: System.Single
      description: Divisor scalar.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of dividing a vector by a scalar.
    content.vb: Public Shared Function Divide(value1 As Vector2, divider As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Divide(ref Vector2, Single, out Vector2)
  nameWithType: Vector2.Divide(ref Vector2, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Divide(ref Microsoft.Xna.Framework.Vector2, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Divide
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 462
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nDivides the components of a <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by a scalar.\n"
  example: []
  syntax:
    content: public static void Divide(ref Vector2 value1, float divider, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: divider
      type: System.Single
      description: Divisor scalar.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of dividing a vector by a scalar as an output parameter.
    content.vb: Public Shared Sub Divide(ByRef value1 As Vector2, divider As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Divide*
  nameWithType.vb: Vector2.Divide(ByRef Vector2, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Divide(ByRef Microsoft.Xna.Framework.Vector2, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Divide(ByRef Vector2, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Dot(Vector2, Vector2)
  nameWithType: Vector2.Dot(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dot
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 475
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a dot product of two vectors.\n"
  example: []
  syntax:
    content: public static float Dot(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    return:
      type: System.Single
      description: The dot product of two vectors.
    content.vb: Public Shared Function Dot(value1 As Vector2, value2 As Vector2) As Single
  overload: Microsoft.Xna.Framework.Vector2.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  id: Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Dot(ref Vector2, ref Vector2, out Single)
  nameWithType: Vector2.Dot(ref Vector2, ref Vector2, out Single)
  fullName: Microsoft.Xna.Framework.Vector2.Dot(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dot
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 486
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a dot product of two vectors.\n"
  example: []
  syntax:
    content: public static void Dot(ref Vector2 value1, ref Vector2 value2, out float result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: result
      type: System.Single
      description: The dot product of two vectors as an output parameter.
    content.vb: Public Shared Sub Dot(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Single)
  overload: Microsoft.Xna.Framework.Vector2.Dot*
  nameWithType.vb: Vector2.Dot(ByRef Vector2, ByRef Vector2, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Dot(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef System.Single)
  name.vb: Dot(ByRef Vector2, ByRef Vector2, ByRef Single)
- uid: Microsoft.Xna.Framework.Vector2.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Vector2.Equals(Object)
  fullName: Microsoft.Xna.Framework.Vector2.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 496
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Vector2.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)
  id: Equals(Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Equals(Vector2)
  nameWithType: Vector2.Equals(Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 511
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCompares whether current instance is equal to specified <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(Vector2 other)
    parameters:
    - id: other
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the instances are equal; <code>false</code> otherwise.
    content.vb: Public Function Equals(other As Vector2) As Boolean
  overload: Microsoft.Xna.Framework.Vector2.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Vector2}.Equals(Microsoft.Xna.Framework.Vector2)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Vector2.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector2.GetHashCode()
  fullName: Microsoft.Xna.Framework.Vector2.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 520
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets the hash code of this <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code of this <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Vector2.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  id: Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Hermite(Vector2, Vector2, Vector2, Vector2, Single)
  nameWithType: Vector2.Hermite(Vector2, Vector2, Vector2, Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Hermite
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 537
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains hermite spline interpolation.\n"
  example: []
  syntax:
    content: public static Vector2 Hermite(Vector2 value1, Vector2 tangent1, Vector2 value2, Vector2 tangent2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first position vector.
    - id: tangent1
      type: Microsoft.Xna.Framework.Vector2
      description: The first tangent vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second position vector.
    - id: tangent2
      type: Microsoft.Xna.Framework.Vector2
      description: The second tangent vector.
    - id: amount
      type: System.Single
      description: Weighting factor.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The hermite spline interpolation vector.
    content.vb: Public Shared Function Hermite(value1 As Vector2, tangent1 As Vector2, value2 As Vector2, tangent2 As Vector2, amount As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Hermite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Hermite(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2)
  nameWithType: Vector2.Hermite(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Hermite(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Hermite
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 551
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains hermite spline interpolation.\n"
  example: []
  syntax:
    content: public static void Hermite(ref Vector2 value1, ref Vector2 tangent1, ref Vector2 value2, ref Vector2 tangent2, float amount, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first position vector.
    - id: tangent1
      type: Microsoft.Xna.Framework.Vector2
      description: The first tangent vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second position vector.
    - id: tangent2
      type: Microsoft.Xna.Framework.Vector2
      description: The second tangent vector.
    - id: amount
      type: System.Single
      description: Weighting factor.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The hermite spline interpolation vector as an output parameter.
    content.vb: Public Shared Sub Hermite(ByRef value1 As Vector2, ByRef tangent1 As Vector2, ByRef value2 As Vector2, ByRef tangent2 As Vector2, amount As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Hermite*
  nameWithType.vb: Vector2.Hermite(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Hermite(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Hermite(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Length
  commentId: M:Microsoft.Xna.Framework.Vector2.Length
  id: Length
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Vector2.Length()
  fullName: Microsoft.Xna.Framework.Vector2.Length()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Length
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 561
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the length of this <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float Length()
    return:
      type: System.Single
      description: The length of this <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Length As Single
  overload: Microsoft.Xna.Framework.Vector2.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.LengthSquared
  commentId: M:Microsoft.Xna.Framework.Vector2.LengthSquared
  id: LengthSquared
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: LengthSquared()
  nameWithType: Vector2.LengthSquared()
  fullName: Microsoft.Xna.Framework.Vector2.LengthSquared()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LengthSquared
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 570
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns the squared length of this <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float LengthSquared()
    return:
      type: System.Single
      description: The squared length of this <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function LengthSquared As Single
  overload: Microsoft.Xna.Framework.Vector2.LengthSquared*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  id: Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Lerp(Vector2, Vector2, Single)
  nameWithType: Vector2.Lerp(Vector2, Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Lerp
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 582
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of linear interpolation of the specified vectors.
    content.vb: Public Shared Function Lerp(value1 As Vector2, value2 As Vector2, amount As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Lerp(ref Vector2, ref Vector2, Single, out Vector2)
  nameWithType: Vector2.Lerp(ref Vector2, ref Vector2, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Lerp(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Lerp
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 596
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static void Lerp(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of linear interpolation of the specified vectors as an output parameter.
    content.vb: Public Shared Sub Lerp(ByRef value1 As Vector2, ByRef value2 As Vector2, amount As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Lerp*
  nameWithType.vb: Vector2.Lerp(ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Lerp(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Lerp(ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  id: LerpPrecise(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: LerpPrecise(Vector2, Vector2, Single)
  nameWithType: Vector2.LerpPrecise(Vector2, Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LerpPrecise
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 612
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\nUses <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for the interpolation.\nLess efficient but more precise compared to <xref href=\"Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nSee remarks section of <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for more info.\n"
  example: []
  syntax:
    content: public static Vector2 LerpPrecise(Vector2 value1, Vector2 value2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of linear interpolation of the specified vectors.
    content.vb: Public Shared Function LerpPrecise(value1 As Vector2, value2 As Vector2, amount As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: LerpPrecise(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: LerpPrecise(ref Vector2, ref Vector2, Single, out Vector2)
  nameWithType: Vector2.LerpPrecise(ref Vector2, ref Vector2, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.LerpPrecise(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: LerpPrecise
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 629
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains linear interpolation of the specified vectors.\nUses <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for the interpolation.\nLess efficient but more precise compared to <xref href=\"Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2%40%2cMicrosoft.Xna.Framework.Vector2%40%2cSystem.Single%2cMicrosoft.Xna.Framework.Vector2%40)\" data-throw-if-not-resolved=\"false\"></xref>.\nSee remarks section of <xref href=\"Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> on MathHelper for more info.\n"
  example: []
  syntax:
    content: public static void LerpPrecise(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: amount
      type: System.Single
      description: Weighting value(between 0.0 and 1.0).
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of linear interpolation of the specified vectors as an output parameter.
    content.vb: Public Shared Sub LerpPrecise(ByRef value1 As Vector2, ByRef value2 As Vector2, amount As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.LerpPrecise*
  nameWithType.vb: Vector2.LerpPrecise(ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.LerpPrecise(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: LerpPrecise(ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Max(Vector2, Vector2)
  nameWithType: Vector2.Max(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Max
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 641
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a maximal values from the two vectors.\n"
  example: []
  syntax:
    content: public static Vector2 Max(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> with maximal values from the two vectors.
    content.vb: Public Shared Function Max(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Max(ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Max(ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Max(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Max
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 653
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a maximal values from the two vectors.\n"
  example: []
  syntax:
    content: public static void Max(ref Vector2 value1, ref Vector2 value2, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> with maximal values from the two vectors as an output parameter.
    content.vb: Public Shared Sub Max(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Max*
  nameWithType.vb: Vector2.Max(ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Max(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Max(ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Min(Vector2, Vector2)
  nameWithType: Vector2.Min(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Min
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 665
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a minimal values from the two vectors.\n"
  example: []
  syntax:
    content: public static Vector2 Min(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> with minimal values from the two vectors.
    content.vb: Public Shared Function Min(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Min(ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Min(ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Min(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Min
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 677
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a minimal values from the two vectors.\n"
  example: []
  syntax:
    content: public static void Min(ref Vector2 value1, ref Vector2 value2, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: The first vector.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: The second vector.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> with minimal values from the two vectors as an output parameter.
    content.vb: Public Shared Sub Min(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Min*
  nameWithType.vb: Vector2.Min(ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Min(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Min(ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, Vector2)
  nameWithType: Vector2.Multiply(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 689
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of two vectors.\n"
  example: []
  syntax:
    content: public static Vector2 Multiply(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector multiplication.
    content.vb: Public Shared Function Multiply(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Multiply(ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Multiply(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 702
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of two vectors.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Vector2 value1, ref Vector2 value2, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector multiplication as an output parameter.
    content.vb: Public Shared Sub Multiply(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Multiply*
  nameWithType.vb: Vector2.Multiply(ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Multiply(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Multiply(ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  id: Multiply(Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, Single)
  nameWithType: Vector2.Multiply(Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 714
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> and a scalar.\n"
  example: []
  syntax:
    content: public static Vector2 Multiply(Vector2 value1, float scaleFactor)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: scaleFactor
      type: System.Single
      description: Scalar value.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector multiplication with a scalar.
    content.vb: Public Shared Function Multiply(value1 As Vector2, scaleFactor As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(ref Vector2, Single, out Vector2)
  nameWithType: Vector2.Multiply(ref Vector2, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Multiply(ref Microsoft.Xna.Framework.Vector2, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Multiply
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 727
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a multiplication of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> and a scalar.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Vector2 value1, float scaleFactor, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: scaleFactor
      type: System.Single
      description: Scalar value.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the multiplication with a scalar as an output parameter.
    content.vb: Public Shared Sub Multiply(ByRef value1 As Vector2, scaleFactor As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Multiply*
  nameWithType.vb: Vector2.Multiply(ByRef Vector2, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Multiply(ByRef Microsoft.Xna.Framework.Vector2, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Multiply(ByRef Vector2, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)
  id: Negate(Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Negate(Vector2)
  nameWithType: Vector2.Negate(Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Negate
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 738
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified vector inversion.\n"
  example: []
  syntax:
    content: public static Vector2 Negate(Vector2 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector inversion.
    content.vb: Public Shared Function Negate(value As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Negate(ref Vector2, out Vector2)
  nameWithType: Vector2.Negate(ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Negate(ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Negate
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 750
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified vector inversion.\n"
  example: []
  syntax:
    content: public static void Negate(ref Vector2 value, out Vector2 result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector inversion as an output parameter.
    content.vb: Public Shared Sub Negate(ByRef value As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Negate*
  nameWithType.vb: Vector2.Negate(ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Negate(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Negate(ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Normalize
  commentId: M:Microsoft.Xna.Framework.Vector2.Normalize
  id: Normalize
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector2.Normalize()
  fullName: Microsoft.Xna.Framework.Vector2.Normalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 759
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nTurns this <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> to a unit vector with the same direction.\n"
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize
  overload: Microsoft.Xna.Framework.Vector2.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)
  id: Normalize(Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Normalize(Vector2)
  nameWithType: Vector2.Normalize(Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 771
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a normalized values from another vector.\n"
  example: []
  syntax:
    content: public static Vector2 Normalize(Vector2 value)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Unit vector.
    content.vb: Public Shared Function Normalize(value As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Normalize(ref Vector2, out Vector2)
  nameWithType: Vector2.Normalize(ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Normalize(ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Normalize
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 784
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a normalized values from another vector.\n"
  example: []
  syntax:
    content: public static void Normalize(ref Vector2 value, out Vector2 result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: Unit vector as an output parameter.
    content.vb: Public Shared Sub Normalize(ByRef value As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Normalize*
  nameWithType.vb: Vector2.Normalize(ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Normalize(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Normalize(ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Reflect(Vector2, Vector2)
  nameWithType: Vector2.Reflect(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Reflect
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 797
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains reflect vector of the given vector and normal.\n"
  example: []
  syntax:
    content: public static Vector2 Reflect(Vector2 vector, Vector2 normal)
    parameters:
    - id: vector
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: normal
      type: Microsoft.Xna.Framework.Vector2
      description: Reflection normal.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Reflected vector.
    content.vb: Public Shared Function Reflect(vector As Vector2, normal As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Reflect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Reflect(ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Reflect(ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Reflect(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Reflect
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 812
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains reflect vector of the given vector and normal.\n"
  example: []
  syntax:
    content: public static void Reflect(ref Vector2 vector, ref Vector2 normal, out Vector2 result)
    parameters:
    - id: vector
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: normal
      type: Microsoft.Xna.Framework.Vector2
      description: Reflection normal.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: Reflected vector as an output parameter.
    content.vb: Public Shared Sub Reflect(ByRef vector As Vector2, ByRef normal As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Reflect*
  nameWithType.vb: Vector2.Reflect(ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Reflect(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Reflect(ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  id: SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: SmoothStep(Vector2, Vector2, Single)
  nameWithType: Vector2.SmoothStep(Vector2, Vector2, Single)
  fullName: Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SmoothStep
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 826
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains cubic interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector2 SmoothStep(Vector2 value1, Vector2 value2, float amount)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: Weighting value.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Cubic interpolation of the specified vectors.
    content.vb: Public Shared Function SmoothStep(value1 As Vector2, value2 As Vector2, amount As Single) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.SmoothStep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  id: SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: SmoothStep(ref Vector2, ref Vector2, Single, out Vector2)
  nameWithType: Vector2.SmoothStep(ref Vector2, ref Vector2, Single, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.SmoothStep(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, System.Single, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SmoothStep
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 840
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains cubic interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static void SmoothStep(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: amount
      type: System.Single
      description: Weighting value.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: Cubic interpolation of the specified vectors as an output parameter.
    content.vb: Public Shared Sub SmoothStep(ByRef value1 As Vector2, ByRef value2 As Vector2, amount As Single, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.SmoothStep*
  nameWithType.vb: Vector2.SmoothStep(ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.SmoothStep(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, System.Single, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: SmoothStep(ByRef Vector2, ByRef Vector2, Single, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  commentId: M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  id: Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Subtract(Vector2, Vector2)
  nameWithType: Vector2.Subtract(Vector2, Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Subtract
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 852
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains subtraction of on <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> from a another.\n"
  example: []
  syntax:
    content: public static Vector2 Subtract(Vector2 value1, Vector2 value2)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector subtraction.
    content.vb: Public Shared Function Subtract(value1 As Vector2, value2 As Vector2) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  id: Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Subtract(ref Vector2, ref Vector2, out Vector2)
  nameWithType: Vector2.Subtract(ref Vector2, ref Vector2, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Subtract(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Vector2, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Subtract
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 865
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains subtraction of on <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> from a another.\n"
  example: []
  syntax:
    content: public static void Subtract(ref Vector2 value1, ref Vector2 value2, out Vector2 result)
    parameters:
    - id: value1
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: value2
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: The result of the vector subtraction as an output parameter.
    content.vb: Public Shared Sub Subtract(ByRef value1 As Vector2, ByRef value2 As Vector2, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Subtract*
  nameWithType.vb: Vector2.Subtract(ByRef Vector2, ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Subtract(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Subtract(ByRef Vector2, ByRef Vector2, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.ToString
  commentId: M:Microsoft.Xna.Framework.Vector2.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector2.ToString()
  fullName: Microsoft.Xna.Framework.Vector2.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 876
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of this <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> in the format:\n{X:[<xref href=\"Microsoft.Xna.Framework.Vector2.X\" data-throw-if-not-resolved=\"false\"></xref>] Y:[<xref href=\"Microsoft.Xna.Framework.Vector2.Y\" data-throw-if-not-resolved=\"false\"></xref>]}\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of this <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Vector2.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Vector2.ToPoint
  commentId: M:Microsoft.Xna.Framework.Vector2.ToPoint
  id: ToPoint
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: ToPoint()
  nameWithType: Vector2.ToPoint()
  fullName: Microsoft.Xna.Framework.Vector2.ToPoint()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToPoint
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 885
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nGets a <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> representation for this object.\n"
  example: []
  syntax:
    content: public Point ToPoint()
    return:
      type: Microsoft.Xna.Framework.Point
      description: A <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> representation for this object.
    content.vb: Public Function ToPoint As Point
  overload: Microsoft.Xna.Framework.Vector2.ToPoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  id: Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(Vector2, Matrix)
  nameWithType: Vector2.Transform(Vector2, Matrix)
  fullName: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 896
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 2d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector2 Transform(Vector2 position, Matrix matrix)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Transform(position As Vector2, matrix As Matrix) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  id: Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(ref Vector2, ref Matrix, out Vector2)
  nameWithType: Vector2.Transform(ref Vector2, ref Matrix, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Transform(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Matrix, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 907
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 2d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Transform(ref Vector2 position, ref Matrix matrix, out Vector2 result)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> as an output parameter.
    content.vb: Public Shared Sub Transform(ByRef position As Vector2, ByRef matrix As Matrix, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  nameWithType.vb: Vector2.Transform(ByRef Vector2, ByRef Matrix, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Transform(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Matrix, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Transform(ByRef Vector2, ByRef Matrix, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)
  id: Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(Vector2, Quaternion)
  nameWithType: Vector2.Transform(Vector2, Quaternion)
  fullName: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 921
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 2d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>, representing the rotation.\n"
  example: []
  syntax:
    content: public static Vector2 Transform(Vector2 value, Quaternion rotation)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Transform(value As Vector2, rotation As Quaternion) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)
  id: Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(ref Vector2, ref Quaternion, out Vector2)
  nameWithType: Vector2.Transform(ref Vector2, ref Quaternion, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.Transform(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Quaternion, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 933
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of 2d-vector by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref>, representing the rotation.\n"
  example: []
  syntax:
    content: public static void Transform(ref Vector2 value, ref Quaternion rotation, out Vector2 result)
    parameters:
    - id: value
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: Transformed <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> as an output parameter.
    content.vb: Public Shared Sub Transform(ByRef value As Vector2, ByRef rotation As Quaternion, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  nameWithType.vb: Vector2.Transform(ByRef Vector2, ByRef Quaternion, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Transform(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Quaternion, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: Transform(ByRef Vector2, ByRef Quaternion, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  id: Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(Vector2[], Int32, ref Matrix, Vector2[], Int32, Int32)
  nameWithType: Vector2.Transform(Vector2[], Int32, ref Matrix, Vector2[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[], System.Int32, ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 957
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector2[] sourceArray, int sourceIndex, ref Matrix matrix, Vector2[] destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Source array.
    - id: sourceIndex
      type: System.Int32
      description: The starting index of transformation in the source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Destination array.
    - id: destinationIndex
      type: System.Int32
      description: The starting index in the destination array, where the first <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> should be written.
    - id: length
      type: System.Int32
      description: The number of vectors to be transformed.
    content.vb: Public Shared Sub Transform(sourceArray As Vector2(), sourceIndex As Integer, ByRef matrix As Matrix, destinationArray As Vector2(), destinationIndex As Integer, length As Integer)
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  nameWithType.vb: Vector2.Transform(Vector2(), Int32, ByRef Matrix, Vector2(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2(), System.Int32, ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2(), System.Int32, System.Int32)
  name.vb: Transform(Vector2(), Int32, ByRef Matrix, Vector2(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  id: Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(Vector2[], Int32, ref Quaternion, Vector2[], Int32, Int32)
  nameWithType: Vector2.Transform(Vector2[], Int32, ref Quaternion, Vector2[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[], System.Int32, ref Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector2[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 993
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector2[] sourceArray, int sourceIndex, ref Quaternion rotation, Vector2[] destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Source array.
    - id: sourceIndex
      type: System.Int32
      description: The starting index of transformation in the source array.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Destination array.
    - id: destinationIndex
      type: System.Int32
      description: The starting index in the destination array, where the first <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> should be written.
    - id: length
      type: System.Int32
      description: The number of vectors to be transformed.
    content.vb: Public Shared Sub Transform(sourceArray As Vector2(), sourceIndex As Integer, ByRef rotation As Quaternion, destinationArray As Vector2(), destinationIndex As Integer, length As Integer)
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  nameWithType.vb: Vector2.Transform(Vector2(), Int32, ByRef Quaternion, Vector2(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2(), System.Int32, ByRef Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector2(), System.Int32, System.Int32)
  name.vb: Transform(Vector2(), Int32, ByRef Quaternion, Vector2(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  id: Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(Vector2[], ref Matrix, Vector2[])
  nameWithType: Vector2.Transform(Vector2[], ref Matrix, Vector2[])
  fullName: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[], ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 1033
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on all vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector2[] sourceArray, ref Matrix matrix, Vector2[] destinationArray)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Destination array.
    content.vb: Public Shared Sub Transform(sourceArray As Vector2(), ByRef matrix As Matrix, destinationArray As Vector2())
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  nameWithType.vb: Vector2.Transform(Vector2(), ByRef Matrix, Vector2())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2(), ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2())
  name.vb: Transform(Vector2(), ByRef Matrix, Vector2())
- uid: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])
  commentId: M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])
  id: Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: Transform(Vector2[], ref Quaternion, Vector2[])
  nameWithType: Vector2.Transform(Vector2[], ref Quaternion, Vector2[])
  fullName: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[], ref Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector2[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Transform
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 1047
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on all vectors within array of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void Transform(Vector2[] sourceArray, ref Quaternion rotation, Vector2[] destinationArray)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Source array.
    - id: rotation
      type: Microsoft.Xna.Framework.Quaternion
      description: The <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref> which contains rotation transformation.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Destination array.
    content.vb: Public Shared Sub Transform(sourceArray As Vector2(), ByRef rotation As Quaternion, destinationArray As Vector2())
  overload: Microsoft.Xna.Framework.Vector2.Transform*
  nameWithType.vb: Vector2.Transform(Vector2(), ByRef Quaternion, Vector2())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2(), ByRef Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Vector2())
  name.vb: Transform(Vector2(), ByRef Quaternion, Vector2())
- uid: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  commentId: M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  id: TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector2, Matrix)
  nameWithType: Vector2.TransformNormal(Vector2, Matrix)
  fullName: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 1063
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of the specified normal by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector2 TransformNormal(Vector2 normal, Matrix matrix)
    parameters:
    - id: normal
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> which represents a normal vector.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: Transformed normal.
    content.vb: Public Shared Function TransformNormal(normal As Vector2, matrix As Matrix) As Vector2
  overload: Microsoft.Xna.Framework.Vector2.TransformNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  id: TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: TransformNormal(ref Vector2, ref Matrix, out Vector2)
  nameWithType: Vector2.TransformNormal(ref Vector2, ref Matrix, out Vector2)
  fullName: Microsoft.Xna.Framework.Vector2.TransformNormal(ref Microsoft.Xna.Framework.Vector2, ref Microsoft.Xna.Framework.Matrix, out Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 1074
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nCreates a new <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> that contains a transformation of the specified normal by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void TransformNormal(ref Vector2 normal, ref Matrix matrix, out Vector2 result)
    parameters:
    - id: normal
      type: Microsoft.Xna.Framework.Vector2
      description: Source <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> which represents a normal vector.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: result
      type: Microsoft.Xna.Framework.Vector2
      description: Transformed normal as an output parameter.
    content.vb: Public Shared Sub TransformNormal(ByRef normal As Vector2, ByRef matrix As Matrix, ByRef result As Vector2)
  overload: Microsoft.Xna.Framework.Vector2.TransformNormal*
  nameWithType.vb: Vector2.TransformNormal(ByRef Vector2, ByRef Matrix, ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.TransformNormal(ByRef Microsoft.Xna.Framework.Vector2, ByRef Microsoft.Xna.Framework.Matrix, ByRef Microsoft.Xna.Framework.Vector2)
  name.vb: TransformNormal(ByRef Vector2, ByRef Matrix, ByRef Vector2)
- uid: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  id: TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector2[], Int32, ref Matrix, Vector2[], Int32, Int32)
  nameWithType: Vector2.TransformNormal(Vector2[], Int32, ref Matrix, Vector2[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[], System.Int32, ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 1091
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on normals within array of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void TransformNormal(Vector2[] sourceArray, int sourceIndex, ref Matrix matrix, Vector2[] destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Source array.
    - id: sourceIndex
      type: System.Int32
      description: The starting index of transformation in the source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Destination array.
    - id: destinationIndex
      type: System.Int32
      description: The starting index in the destination array, where the first <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> should be written.
    - id: length
      type: System.Int32
      description: The number of normals to be transformed.
    content.vb: Public Shared Sub TransformNormal(sourceArray As Vector2(), sourceIndex As Integer, ByRef matrix As Matrix, destinationArray As Vector2(), destinationIndex As Integer, length As Integer)
  overload: Microsoft.Xna.Framework.Vector2.TransformNormal*
  nameWithType.vb: Vector2.TransformNormal(Vector2(), Int32, ByRef Matrix, Vector2(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2(), System.Int32, ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2(), System.Int32, System.Int32)
  name.vb: TransformNormal(Vector2(), Int32, ByRef Matrix, Vector2(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  commentId: M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  id: TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])
  parent: Microsoft.Xna.Framework.Vector2
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector2[], ref Matrix, Vector2[])
  nameWithType: Vector2.TransformNormal(Vector2[], ref Matrix, Vector2[])
  fullName: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[], ref Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Vector2.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: TransformNormal
    path: ../MonoGame.Framework/Vector2.cs
    startLine: 1125
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework
  summary: "\nApply transformation on all normals within array of <xref href=\"Microsoft.Xna.Framework.Vector2\" data-throw-if-not-resolved=\"false\"></xref> by the specified <xref href=\"Microsoft.Xna.Framework.Matrix\" data-throw-if-not-resolved=\"false\"></xref> and places the results in an another array.\n"
  example: []
  syntax:
    content: public static void TransformNormal(Vector2[] sourceArray, ref Matrix matrix, Vector2[] destinationArray)
    parameters:
    - id: sourceArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Source array.
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The transformation <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>.
    - id: destinationArray
      type: Microsoft.Xna.Framework.Vector2[]
      description: Destination array.
    content.vb: Public Shared Sub TransformNormal(sourceArray As Vector2(), ByRef matrix As Matrix, destinationArray As Vector2())
  overload: Microsoft.Xna.Framework.Vector2.TransformNormal*
  nameWithType.vb: Vector2.TransformNormal(Vector2(), ByRef Matrix, Vector2())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2(), ByRef Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Vector2())
  name.vb: TransformNormal(Vector2(), ByRef Matrix, Vector2())
references:
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: false
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.IEquatable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Vector2>
  nameWithType: IEquatable<Vector2>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Vector2>
  nameWithType.vb: IEquatable(Of Vector2)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Vector2)
  name.vb: IEquatable(Of Vector2)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Vector2.Zero*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Zero
  isExternal: false
  name: Zero
  nameWithType: Vector2.Zero
  fullName: Microsoft.Xna.Framework.Vector2.Zero
- uid: Microsoft.Xna.Framework.Vector2.One*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.One
  isExternal: false
  name: One
  nameWithType: Vector2.One
  fullName: Microsoft.Xna.Framework.Vector2.One
- uid: Microsoft.Xna.Framework.Vector2.UnitX*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.UnitX
  isExternal: false
  name: UnitX
  nameWithType: Vector2.UnitX
  fullName: Microsoft.Xna.Framework.Vector2.UnitX
- uid: Microsoft.Xna.Framework.Vector2.UnitY*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.UnitY
  isExternal: false
  name: UnitY
  nameWithType: Vector2.UnitY
  fullName: Microsoft.Xna.Framework.Vector2.UnitY
- uid: Microsoft.Xna.Framework.Vector2.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.#ctor
  isExternal: false
  name: Vector2
  nameWithType: Vector2.Vector2
  fullName: Microsoft.Xna.Framework.Vector2.Vector2
- uid: Microsoft.Xna.Framework.Vector2.op_UnaryNegation*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.op_UnaryNegation
  isExternal: false
  name: UnaryNegation
  nameWithType: Vector2.UnaryNegation
  fullName: Microsoft.Xna.Framework.Vector2.UnaryNegation
- uid: Microsoft.Xna.Framework.Vector2.op_Addition*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.op_Addition
  isExternal: false
  name: Addition
  nameWithType: Vector2.Addition
  fullName: Microsoft.Xna.Framework.Vector2.Addition
- uid: Microsoft.Xna.Framework.Vector2.op_Subtraction*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.op_Subtraction
  isExternal: false
  name: Subtraction
  nameWithType: Vector2.Subtraction
  fullName: Microsoft.Xna.Framework.Vector2.Subtraction
- uid: Microsoft.Xna.Framework.Vector2.op_Multiply*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.op_Multiply
  isExternal: false
  name: Multiply
  nameWithType: Vector2.Multiply
  fullName: Microsoft.Xna.Framework.Vector2.Multiply
- uid: Microsoft.Xna.Framework.Vector2.op_Division*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.op_Division
  isExternal: false
  name: Division
  nameWithType: Vector2.Division
  fullName: Microsoft.Xna.Framework.Vector2.Division
- uid: Microsoft.Xna.Framework.Vector2.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Vector2.Equality
  fullName: Microsoft.Xna.Framework.Vector2.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Vector2.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Vector2.Inequality
  fullName: Microsoft.Xna.Framework.Vector2.Inequality
- uid: Microsoft.Xna.Framework.Vector2.Add*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Add
  isExternal: false
  name: Add
  nameWithType: Vector2.Add
  fullName: Microsoft.Xna.Framework.Vector2.Add
- uid: Microsoft.Xna.Framework.Vector2.Barycentric*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Barycentric
  isExternal: false
  name: Barycentric
  nameWithType: Vector2.Barycentric
  fullName: Microsoft.Xna.Framework.Vector2.Barycentric
- uid: Microsoft.Xna.Framework.Vector2.CatmullRom*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.CatmullRom
  isExternal: false
  name: CatmullRom
  nameWithType: Vector2.CatmullRom
  fullName: Microsoft.Xna.Framework.Vector2.CatmullRom
- uid: Microsoft.Xna.Framework.Vector2.Clamp*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Clamp
  isExternal: false
  name: Clamp
  nameWithType: Vector2.Clamp
  fullName: Microsoft.Xna.Framework.Vector2.Clamp
- uid: Microsoft.Xna.Framework.Vector2.Distance*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Distance
  isExternal: false
  name: Distance
  nameWithType: Vector2.Distance
  fullName: Microsoft.Xna.Framework.Vector2.Distance
- uid: Microsoft.Xna.Framework.Vector2.DistanceSquared*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.DistanceSquared
  isExternal: false
  name: DistanceSquared
  nameWithType: Vector2.DistanceSquared
  fullName: Microsoft.Xna.Framework.Vector2.DistanceSquared
- uid: Microsoft.Xna.Framework.Vector2.Divide*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Divide
  isExternal: false
  name: Divide
  nameWithType: Vector2.Divide
  fullName: Microsoft.Xna.Framework.Vector2.Divide
- uid: Microsoft.Xna.Framework.Vector2.Dot*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Dot
  isExternal: false
  name: Dot
  nameWithType: Vector2.Dot
  fullName: Microsoft.Xna.Framework.Vector2.Dot
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Vector2.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Equals
  isExternal: false
  name: Equals
  nameWithType: Vector2.Equals
  fullName: Microsoft.Xna.Framework.Vector2.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{Microsoft.Xna.Framework.Vector2}.Equals(Microsoft.Xna.Framework.Vector2)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Vector2}.Equals(Microsoft.Xna.Framework.Vector2)
  parent: System.IEquatable{Microsoft.Xna.Framework.Vector2}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Vector2)
  nameWithType: IEquatable<Vector2>.Equals(Vector2)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Vector2>.Equals(Microsoft.Xna.Framework.Vector2)
  nameWithType.vb: IEquatable(Of Vector2).Equals(Vector2)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Vector2).Equals(Microsoft.Xna.Framework.Vector2)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Vector2>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Vector2>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Vector2).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Vector2).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Vector2.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Vector2.GetHashCode
  fullName: Microsoft.Xna.Framework.Vector2.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Vector2.Hermite*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Hermite
  isExternal: false
  name: Hermite
  nameWithType: Vector2.Hermite
  fullName: Microsoft.Xna.Framework.Vector2.Hermite
- uid: Microsoft.Xna.Framework.Vector2.Length*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Length
  isExternal: false
  name: Length
  nameWithType: Vector2.Length
  fullName: Microsoft.Xna.Framework.Vector2.Length
- uid: Microsoft.Xna.Framework.Vector2.LengthSquared*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.LengthSquared
  isExternal: false
  name: LengthSquared
  nameWithType: Vector2.LengthSquared
  fullName: Microsoft.Xna.Framework.Vector2.LengthSquared
- uid: Microsoft.Xna.Framework.Vector2.Lerp*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Lerp
  isExternal: false
  name: Lerp
  nameWithType: Vector2.Lerp
  fullName: Microsoft.Xna.Framework.Vector2.Lerp
- uid: Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)
- uid: Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
- uid: Microsoft.Xna.Framework.Vector2.LerpPrecise*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.LerpPrecise
  isExternal: false
  name: LerpPrecise
  nameWithType: Vector2.LerpPrecise
  fullName: Microsoft.Xna.Framework.Vector2.LerpPrecise
- uid: Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
  commentId: M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)
- uid: Microsoft.Xna.Framework.Vector2.Max*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Max
  isExternal: false
  name: Max
  nameWithType: Vector2.Max
  fullName: Microsoft.Xna.Framework.Vector2.Max
- uid: Microsoft.Xna.Framework.Vector2.Min*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Min
  isExternal: false
  name: Min
  nameWithType: Vector2.Min
  fullName: Microsoft.Xna.Framework.Vector2.Min
- uid: Microsoft.Xna.Framework.Vector2.Multiply*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Multiply
  isExternal: false
  name: Multiply
  nameWithType: Vector2.Multiply
  fullName: Microsoft.Xna.Framework.Vector2.Multiply
- uid: Microsoft.Xna.Framework.Vector2.Negate*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Negate
  isExternal: false
  name: Negate
  nameWithType: Vector2.Negate
  fullName: Microsoft.Xna.Framework.Vector2.Negate
- uid: Microsoft.Xna.Framework.Vector2.Normalize*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Normalize
  isExternal: false
  name: Normalize
  nameWithType: Vector2.Normalize
  fullName: Microsoft.Xna.Framework.Vector2.Normalize
- uid: Microsoft.Xna.Framework.Vector2.Reflect*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Reflect
  isExternal: false
  name: Reflect
  nameWithType: Vector2.Reflect
  fullName: Microsoft.Xna.Framework.Vector2.Reflect
- uid: Microsoft.Xna.Framework.Vector2.SmoothStep*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.SmoothStep
  isExternal: false
  name: SmoothStep
  nameWithType: Vector2.SmoothStep
  fullName: Microsoft.Xna.Framework.Vector2.SmoothStep
- uid: Microsoft.Xna.Framework.Vector2.Subtract*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Subtract
  isExternal: false
  name: Subtract
  nameWithType: Vector2.Subtract
  fullName: Microsoft.Xna.Framework.Vector2.Subtract
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Vector2.X
  commentId: F:Microsoft.Xna.Framework.Vector2.X
- uid: Microsoft.Xna.Framework.Vector2.Y
  commentId: F:Microsoft.Xna.Framework.Vector2.Y
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Vector2.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.ToString
  isExternal: false
  name: ToString
  nameWithType: Vector2.ToString
  fullName: Microsoft.Xna.Framework.Vector2.ToString
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework.Vector2.ToPoint*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.ToPoint
  isExternal: false
  name: ToPoint
  nameWithType: Vector2.ToPoint
  fullName: Microsoft.Xna.Framework.Vector2.ToPoint
- uid: Microsoft.Xna.Framework.Matrix
  commentId: T:Microsoft.Xna.Framework.Matrix
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: Microsoft.Xna.Framework.Matrix
- uid: Microsoft.Xna.Framework.Vector2.Transform*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.Transform
  isExternal: false
  name: Transform
  nameWithType: Vector2.Transform
  fullName: Microsoft.Xna.Framework.Vector2.Transform
- uid: Microsoft.Xna.Framework.Quaternion
  commentId: T:Microsoft.Xna.Framework.Quaternion
  parent: Microsoft.Xna.Framework
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: Microsoft.Xna.Framework.Quaternion
- uid: Microsoft.Xna.Framework.Vector2[]
  name: Vector2[]
  nameWithType: Vector2[]
  fullName: Microsoft.Xna.Framework.Vector2[]
  nameWithType.vb: Vector2()
  fullName.vb: Microsoft.Xna.Framework.Vector2()
  name.vb: Vector2()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Vector2.TransformNormal*
  commentId: Overload:Microsoft.Xna.Framework.Vector2.TransformNormal
  isExternal: false
  name: TransformNormal
  nameWithType: Vector2.TransformNormal
  fullName: Microsoft.Xna.Framework.Vector2.TransformNormal
