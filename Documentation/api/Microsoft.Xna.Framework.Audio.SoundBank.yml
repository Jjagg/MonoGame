### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.SoundBank
  commentId: T:Microsoft.Xna.Framework.Audio.SoundBank
  id: SoundBank
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)
  - Microsoft.Xna.Framework.Audio.SoundBank.Dispose
  - Microsoft.Xna.Framework.Audio.SoundBank.Disposing
  - Microsoft.Xna.Framework.Audio.SoundBank.Finalize
  - Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)
  - Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed
  - Microsoft.Xna.Framework.Audio.SoundBank.IsInUse
  - Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String)
  - Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  langs:
  - csharp
  - vb
  name: SoundBank
  nameWithType: SoundBank
  fullName: Microsoft.Xna.Framework.Audio.SoundBank
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SoundBank
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: Represents a collection of Cues.
  example: []
  syntax:
    content: 'public class SoundBank : IDisposable'
    content.vb: >-
      Public Class SoundBank
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Xna.Framework.Audio.SoundBank.IsInUse
  commentId: P:Microsoft.Xna.Framework.Audio.SoundBank.IsInUse
  id: IsInUse
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: IsInUse
  nameWithType: SoundBank.IsInUse
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.IsInUse
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsInUse
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 26
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nIs true if the SoundBank has any live Cues in use.\n"
  example: []
  syntax:
    content: public bool IsInUse { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInUse As Boolean
  overload: Microsoft.Xna.Framework.Audio.SoundBank.IsInUse*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)
  id: '#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)'
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: SoundBank(AudioEngine, String)
  nameWithType: SoundBank.SoundBank(AudioEngine, String)
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.SoundBank(Microsoft.Xna.Framework.Audio.AudioEngine, System.String)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 30
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  example: []
  syntax:
    content: public SoundBank(AudioEngine audioEngine, string fileName)
    parameters:
    - id: audioEngine
      type: Microsoft.Xna.Framework.Audio.AudioEngine
      description: AudioEngine that will be associated with this sound bank.
    - id: fileName
      type: System.String
      description: Path to a .xsb SoundBank file.
    content.vb: Public Sub New(audioEngine As AudioEngine, fileName As String)
  overload: Microsoft.Xna.Framework.Audio.SoundBank.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)
  id: GetCue(System.String)
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: GetCue(String)
  nameWithType: SoundBank.GetCue(String)
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetCue
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 242
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns a pooled Cue object.\n"
  remarks: "\n<p>Cue instances are unique, even when sharing the same name. This allows multiple instances to simultaneously play.</p>\n"
  example: []
  syntax:
    content: public Cue GetCue(string name)
    parameters:
    - id: name
      type: System.String
      description: Friendly name of the cue to get.
    return:
      type: Microsoft.Xna.Framework.Audio.Cue
      description: a unique Cue object from a pool.
    content.vb: Public Function GetCue(name As String) As Cue
  overload: Microsoft.Xna.Framework.Audio.SoundBank.GetCue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String)
  id: PlayCue(System.String)
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: PlayCue(String)
  nameWithType: SoundBank.PlayCue(String)
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PlayCue
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 266
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nPlays a cue.\n"
  example: []
  syntax:
    content: public void PlayCue(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the cue to play.
    content.vb: Public Sub PlayCue(name As String)
  overload: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  id: PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: PlayCue(String, AudioListener, AudioEmitter)
  nameWithType: SoundBank.PlayCue(String, AudioListener, AudioEmitter)
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String, Microsoft.Xna.Framework.Audio.AudioListener, Microsoft.Xna.Framework.Audio.AudioEmitter)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PlayCue
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 294
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nPlays a cue with static 3D positional information.\n"
  remarks: "\nCommonly used for short lived effects.  To dynamically change the 3D \npositional information on a cue over time use <xref href=\"Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.Xna.Framework.Audio.Cue.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener%2cMicrosoft.Xna.Framework.Audio.AudioEmitter)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public void PlayCue(string name, AudioListener listener, AudioEmitter emitter)
    parameters:
    - id: name
      type: System.String
      description: The name of the cue to play.
    - id: listener
      type: Microsoft.Xna.Framework.Audio.AudioListener
      description: The listener state.
    - id: emitter
      type: Microsoft.Xna.Framework.Audio.AudioEmitter
      description: The cue emitter state.
    content.vb: Public Sub PlayCue(name As String, listener As AudioListener, emitter As AudioEmitter)
  overload: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundBank.Disposing
  commentId: E:Microsoft.Xna.Framework.Audio.SoundBank.Disposing
  id: Disposing
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: Disposing
  nameWithType: SoundBank.Disposing
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.Disposing
  type: Event
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Disposing
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 318
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nThis event is triggered when the SoundBank is disposed.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> Disposing
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event Disposing As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed
  id: IsDisposed
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: SoundBank.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsDisposed
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 323
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nIs true if the SoundBank has been disposed.\n"
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.SoundBank.Dispose
  commentId: M:Microsoft.Xna.Framework.Audio.SoundBank.Dispose
  id: Dispose
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SoundBank.Dispose()
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.Dispose()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 328
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDisposes the SoundBank.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Xna.Framework.Audio.SoundBank.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.SoundBank.Finalize
  commentId: M:Microsoft.Xna.Framework.Audio.SoundBank.Finalize
  id: Finalize
  parent: Microsoft.Xna.Framework.Audio.SoundBank
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: SoundBank.Finalize()
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.Finalize()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/SoundBank.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Finalize
    path: ../MonoGame.Framework/Audio/Xact/SoundBank.cs
    startLine: 334
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Xna.Framework.Audio.SoundBank.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Audio.SoundBank.IsInUse*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundBank.IsInUse
  isExternal: false
  name: IsInUse
  nameWithType: SoundBank.IsInUse
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.IsInUse
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Audio.SoundBank.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundBank.#ctor
  isExternal: false
  name: SoundBank
  nameWithType: SoundBank.SoundBank
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.SoundBank
- uid: Microsoft.Xna.Framework.Audio.AudioEngine
  commentId: T:Microsoft.Xna.Framework.Audio.AudioEngine
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioEngine
  nameWithType: AudioEngine
  fullName: Microsoft.Xna.Framework.Audio.AudioEngine
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Audio.SoundBank.GetCue*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundBank.GetCue
  isExternal: false
  name: GetCue
  nameWithType: SoundBank.GetCue
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.GetCue
- uid: Microsoft.Xna.Framework.Audio.Cue
  commentId: T:Microsoft.Xna.Framework.Audio.Cue
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Cue
  nameWithType: Cue
  fullName: Microsoft.Xna.Framework.Audio.Cue
- uid: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundBank.PlayCue
  isExternal: false
  name: PlayCue
  nameWithType: SoundBank.PlayCue
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.PlayCue
- uid: Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)
- uid: Microsoft.Xna.Framework.Audio.Cue.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  commentId: M:Microsoft.Xna.Framework.Audio.Cue.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
- uid: Microsoft.Xna.Framework.Audio.AudioListener
  commentId: T:Microsoft.Xna.Framework.Audio.AudioListener
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioListener
  nameWithType: AudioListener
  fullName: Microsoft.Xna.Framework.Audio.AudioListener
- uid: Microsoft.Xna.Framework.Audio.AudioEmitter
  commentId: T:Microsoft.Xna.Framework.Audio.AudioEmitter
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioEmitter
  nameWithType: AudioEmitter
  fullName: Microsoft.Xna.Framework.Audio.AudioEmitter
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed
  isExternal: false
  name: IsDisposed
  nameWithType: SoundBank.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed
- uid: Microsoft.Xna.Framework.Audio.SoundBank.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundBank.Dispose
  isExternal: false
  name: Dispose
  nameWithType: SoundBank.Dispose
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.SoundBank.Finalize*
  commentId: Overload:Microsoft.Xna.Framework.Audio.SoundBank.Finalize
  isExternal: false
  name: Finalize
  nameWithType: SoundBank.Finalize
  fullName: Microsoft.Xna.Framework.Audio.SoundBank.Finalize
