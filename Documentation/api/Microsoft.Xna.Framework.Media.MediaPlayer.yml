### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Media.MediaPlayer
  commentId: T:Microsoft.Xna.Framework.Media.MediaPlayer
  id: MediaPlayer
  parent: Microsoft.Xna.Framework.Media
  children:
  - Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged
  - Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl
  - Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted
  - Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating
  - Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled
  - Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled
  - Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged
  - Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext
  - Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious
  - Microsoft.Xna.Framework.Media.MediaPlayer.Pause
  - Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)
  - Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song,System.Nullable{System.TimeSpan})
  - Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection,System.Int32)
  - Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition
  - Microsoft.Xna.Framework.Media.MediaPlayer.Queue
  - Microsoft.Xna.Framework.Media.MediaPlayer.Resume
  - Microsoft.Xna.Framework.Media.MediaPlayer.State
  - Microsoft.Xna.Framework.Media.MediaPlayer.Stop
  - Microsoft.Xna.Framework.Media.MediaPlayer.Volume
  langs:
  - csharp
  - vb
  name: MediaPlayer
  nameWithType: MediaPlayer
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.Default.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: MediaPlayer
    path: ../MonoGame.Framework/Media/MediaPlayer.Default.cs
    startLine: 13
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static class MediaPlayer
    content.vb: Public Module MediaPlayer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged
  commentId: E:Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged
  id: ActiveSongChanged
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: ActiveSongChanged
  nameWithType: MediaPlayer.ActiveSongChanged
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged
  type: Event
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ActiveSongChanged
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 20
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static event EventHandler<EventArgs> ActiveSongChanged
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Shared Event ActiveSongChanged As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged
  commentId: E:Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged
  id: MediaStateChanged
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: MediaStateChanged
  nameWithType: MediaPlayer.MediaStateChanged
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged
  type: Event
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: MediaStateChanged
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 21
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static event EventHandler<EventArgs> MediaStateChanged
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Shared Event MediaStateChanged As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Queue
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.Queue
  id: Queue
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Queue
  nameWithType: MediaPlayer.Queue
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Queue
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Queue
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 30
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static MediaQueue Queue { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Media.MediaQueue
    content.vb: Public Shared ReadOnly Property Queue As MediaQueue
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Queue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted
  id: IsMuted
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: IsMuted
  nameWithType: MediaPlayer.IsMuted
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsMuted
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 32
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static bool IsMuted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property IsMuted As Boolean
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating
  id: IsRepeating
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: IsRepeating
  nameWithType: MediaPlayer.IsRepeating
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsRepeating
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 38
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static bool IsRepeating { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property IsRepeating As Boolean
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled
  id: IsShuffled
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: IsShuffled
  nameWithType: MediaPlayer.IsShuffled
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsShuffled
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 44
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static bool IsShuffled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property IsShuffled As Boolean
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled
  id: IsVisualizationEnabled
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: IsVisualizationEnabled
  nameWithType: MediaPlayer.IsVisualizationEnabled
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsVisualizationEnabled
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 50
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static bool IsVisualizationEnabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsVisualizationEnabled As Boolean
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition
  id: PlayPosition
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: PlayPosition
  nameWithType: MediaPlayer.PlayPosition
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PlayPosition
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 52
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static TimeSpan PlayPosition { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Shared ReadOnly Property PlayPosition As TimeSpan
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.State
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.State
  id: State
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: State
  nameWithType: MediaPlayer.State
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.State
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: State
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 60
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static MediaState State { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Media.MediaState
    content.vb: Public Shared ReadOnly Property State As MediaState
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.State*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl
  id: GameHasControl
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: GameHasControl
  nameWithType: MediaPlayer.GameHasControl
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GameHasControl
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 73
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static bool GameHasControl { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property GameHasControl As Boolean
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Volume
  commentId: P:Microsoft.Xna.Framework.Media.MediaPlayer.Volume
  id: Volume
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Volume
  nameWithType: MediaPlayer.Volume
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Volume
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Volume
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 82
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static float Volume { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared Property Volume As Single
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Volume*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Pause
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.Pause
  id: Pause
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: MediaPlayer.Pause()
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Pause()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Pause
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 95
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static void Pause()
    content.vb: Public Shared Sub Pause
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Pause*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)
  id: Play(Microsoft.Xna.Framework.Media.Song)
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Play(Song)
  nameWithType: MediaPlayer.Play(Song)
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Play
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 109
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  summary: "\nPlay clears the current playback queue, and then queues up the specified song for playback. \nPlayback starts immediately at the beginning of the song.\n"
  example: []
  syntax:
    content: public static void Play(Song song)
    parameters:
    - id: song
      type: Microsoft.Xna.Framework.Media.Song
    content.vb: Public Shared Sub Play(song As Song)
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Play*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song,System.Nullable{System.TimeSpan})
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song,System.Nullable{System.TimeSpan})
  id: Play(Microsoft.Xna.Framework.Media.Song,System.Nullable{System.TimeSpan})
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Play(Song, Nullable<TimeSpan>)
  nameWithType: MediaPlayer.Play(Song, Nullable<TimeSpan>)
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song, System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Play
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 118
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  summary: "\nPlay clears the current playback queue, and then queues up the specified song for playback. \nPlayback starts immediately at the given position of the song.\n"
  example: []
  syntax:
    content: public static void Play(Song song, TimeSpan? startPosition)
    parameters:
    - id: song
      type: Microsoft.Xna.Framework.Media.Song
    - id: startPosition
      type: System.Nullable{System.TimeSpan}
    content.vb: Public Shared Sub Play(song As Song, startPosition As TimeSpan?)
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Play*
  nameWithType.vb: MediaPlayer.Play(Song, Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song, System.Nullable(Of System.TimeSpan))
  name.vb: Play(Song, Nullable(Of TimeSpan))
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection,System.Int32)
  id: Play(Microsoft.Xna.Framework.Media.SongCollection,System.Int32)
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Play(SongCollection, Int32)
  nameWithType: MediaPlayer.Play(SongCollection, Int32)
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Play
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 132
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static void Play(SongCollection collection, int index = 0)
    parameters:
    - id: collection
      type: Microsoft.Xna.Framework.Media.SongCollection
    - id: index
      type: System.Int32
    content.vb: Public Shared Sub Play(collection As SongCollection, index As Integer = 0)
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Play*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Resume
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.Resume
  id: Resume
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Resume()
  nameWithType: MediaPlayer.Resume()
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Resume()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Resume
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 173
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static void Resume()
    content.vb: Public Shared Sub Resume
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Resume*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Stop
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.Stop
  id: Stop
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: MediaPlayer.Stop()
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Stop()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Stop
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 182
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static void Stop()
    content.vb: Public Shared Sub Stop
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.Stop*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext
  id: MoveNext
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: MediaPlayer.MoveNext()
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: MoveNext
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 191
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static void MoveNext()
    content.vb: Public Shared Sub MoveNext
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious
  commentId: M:Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious
  id: MovePrevious
  parent: Microsoft.Xna.Framework.Media.MediaPlayer
  langs:
  - csharp
  - vb
  name: MovePrevious()
  nameWithType: MediaPlayer.MovePrevious()
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Media/MediaPlayer.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: MovePrevious
    path: ../MonoGame.Framework/Media/MediaPlayer.cs
    startLine: 196
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Media
  syntax:
    content: public static void MovePrevious()
    content.vb: Public Shared Sub MovePrevious
  overload: Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Xna.Framework.Media
  commentId: N:Microsoft.Xna.Framework.Media
  isExternal: false
  name: Microsoft.Xna.Framework.Media
  nameWithType: Microsoft.Xna.Framework.Media
  fullName: Microsoft.Xna.Framework.Media
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Queue*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.Queue
  isExternal: false
  name: Queue
  nameWithType: MediaPlayer.Queue
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Queue
- uid: Microsoft.Xna.Framework.Media.MediaQueue
  commentId: T:Microsoft.Xna.Framework.Media.MediaQueue
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: MediaQueue
  nameWithType: MediaQueue
  fullName: Microsoft.Xna.Framework.Media.MediaQueue
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted
  isExternal: false
  name: IsMuted
  nameWithType: MediaPlayer.IsMuted
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating
  isExternal: false
  name: IsRepeating
  nameWithType: MediaPlayer.IsRepeating
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled
  isExternal: false
  name: IsShuffled
  nameWithType: MediaPlayer.IsShuffled
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled
  isExternal: false
  name: IsVisualizationEnabled
  nameWithType: MediaPlayer.IsVisualizationEnabled
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition
  isExternal: false
  name: PlayPosition
  nameWithType: MediaPlayer.PlayPosition
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.State*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.State
  isExternal: false
  name: State
  nameWithType: MediaPlayer.State
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.State
- uid: Microsoft.Xna.Framework.Media.MediaState
  commentId: T:Microsoft.Xna.Framework.Media.MediaState
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: MediaState
  nameWithType: MediaState
  fullName: Microsoft.Xna.Framework.Media.MediaState
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl
  isExternal: false
  name: GameHasControl
  nameWithType: MediaPlayer.GameHasControl
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Volume*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.Volume
  isExternal: false
  name: Volume
  nameWithType: MediaPlayer.Volume
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Volume
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Pause*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.Pause
  isExternal: false
  name: Pause
  nameWithType: MediaPlayer.Pause
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Pause
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Play*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.Play
  isExternal: false
  name: Play
  nameWithType: MediaPlayer.Play
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Play
- uid: Microsoft.Xna.Framework.Media.Song
  commentId: T:Microsoft.Xna.Framework.Media.Song
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: Song
  nameWithType: Song
  fullName: Microsoft.Xna.Framework.Media.Song
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Media.SongCollection
  commentId: T:Microsoft.Xna.Framework.Media.SongCollection
  parent: Microsoft.Xna.Framework.Media
  isExternal: false
  name: SongCollection
  nameWithType: SongCollection
  fullName: Microsoft.Xna.Framework.Media.SongCollection
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Resume*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.Resume
  isExternal: false
  name: Resume
  nameWithType: MediaPlayer.Resume
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Resume
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.Stop*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.Stop
  isExternal: false
  name: Stop
  nameWithType: MediaPlayer.Stop
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.Stop
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext
  isExternal: false
  name: MoveNext
  nameWithType: MediaPlayer.MoveNext
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext
- uid: Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious*
  commentId: Overload:Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious
  isExternal: false
  name: MovePrevious
  nameWithType: MediaPlayer.MovePrevious
  fullName: Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious
