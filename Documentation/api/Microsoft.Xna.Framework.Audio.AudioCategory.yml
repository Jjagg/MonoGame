### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.AudioCategory
  commentId: T:Microsoft.Xna.Framework.Audio.AudioCategory
  id: AudioCategory
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.AudioCategory.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  - Microsoft.Xna.Framework.Audio.AudioCategory.Equals(System.Object)
  - Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode
  - Microsoft.Xna.Framework.Audio.AudioCategory.Name
  - Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  - Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  - Microsoft.Xna.Framework.Audio.AudioCategory.Pause
  - Microsoft.Xna.Framework.Audio.AudioCategory.Resume
  - Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume(System.Single)
  - Microsoft.Xna.Framework.Audio.AudioCategory.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)
  - Microsoft.Xna.Framework.Audio.AudioCategory.ToString
  langs:
  - csharp
  - vb
  name: AudioCategory
  nameWithType: AudioCategory
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory
  type: Struct
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: AudioCategory
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 14
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nProvides functionality for manipulating multiple sounds at a time.\n"
  example: []
  syntax:
    content: 'public struct AudioCategory : IEquatable<AudioCategory>'
    content.vb: >-
      Public Structure AudioCategory
          Implements IEquatable(Of AudioCategory)
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Audio.AudioCategory}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Name
  commentId: P:Microsoft.Xna.Framework.Audio.AudioCategory.Name
  id: Name
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AudioCategory.Name
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Name
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Name
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 97
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets the category&apos;s friendly name.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Pause
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.Pause
  id: Pause
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: AudioCategory.Pause()
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Pause()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Pause
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 102
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nPauses all associated sounds.\n"
  example: []
  syntax:
    content: public void Pause()
    content.vb: Public Sub Pause
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.Pause*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Resume
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.Resume
  id: Resume
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Resume()
  nameWithType: AudioCategory.Resume()
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Resume()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Resume
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 111
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nResumes all associated paused sounds.\n"
  example: []
  syntax:
    content: public void Resume()
    content.vb: Public Sub Resume
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.Resume*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)
  id: Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Stop(AudioStopOptions)
  nameWithType: AudioCategory.Stop(AudioStopOptions)
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Stop
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 120
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nStops all associated sounds.\n"
  example: []
  syntax:
    content: public void Stop(AudioStopOptions options)
    parameters:
    - id: options
      type: Microsoft.Xna.Framework.Audio.AudioStopOptions
    content.vb: Public Sub Stop(options As AudioStopOptions)
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume(System.Single)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume(System.Single)
  id: SetVolume(System.Single)
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: SetVolume(Single)
  nameWithType: AudioCategory.SetVolume(Single)
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume(System.Single)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SetVolume
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 126
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  syntax:
    content: public void SetVolume(float volume)
    parameters:
    - id: volume
      type: System.Single
    content.vb: Public Sub SetVolume(volume As Single)
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  id: op_Equality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Equality(AudioCategory, AudioCategory)
  nameWithType: AudioCategory.Equality(AudioCategory, AudioCategory)
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Equality(Microsoft.Xna.Framework.Audio.AudioCategory, Microsoft.Xna.Framework.Audio.AudioCategory)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Equality
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 148
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDetermines whether two AudioCategory instances are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(AudioCategory first, AudioCategory second)
    parameters:
    - id: first
      type: Microsoft.Xna.Framework.Audio.AudioCategory
      description: First AudioCategory instance to compare.
    - id: second
      type: Microsoft.Xna.Framework.Audio.AudioCategory
      description: Second AudioCategory instance to compare.
    return:
      type: System.Boolean
      description: true if the objects are equal or false if they aren&apos;t.
    content.vb: Public Shared Operator =(first As AudioCategory, second As AudioCategory) As Boolean
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  id: op_Inequality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Inequality(AudioCategory, AudioCategory)
  nameWithType: AudioCategory.Inequality(AudioCategory, AudioCategory)
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Inequality(Microsoft.Xna.Framework.Audio.AudioCategory, Microsoft.Xna.Framework.Audio.AudioCategory)
  type: Operator
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: op_Inequality
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 159
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDetermines whether two AudioCategory instances are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(AudioCategory first, AudioCategory second)
    parameters:
    - id: first
      type: Microsoft.Xna.Framework.Audio.AudioCategory
      description: First AudioCategory instance to compare.
    - id: second
      type: Microsoft.Xna.Framework.Audio.AudioCategory
      description: Second AudioCategory instance to compare.
    return:
      type: System.Boolean
      description: true if the objects are not equal or false if they are.
    content.vb: Public Shared Operator <>(first As AudioCategory, second As AudioCategory) As Boolean
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  id: Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Equals(AudioCategory)
  nameWithType: AudioCategory.Equals(AudioCategory)
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 169
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDetermines whether two AudioCategory instances are equal.\n"
  example: []
  syntax:
    content: public bool Equals(AudioCategory other)
    parameters:
    - id: other
      type: Microsoft.Xna.Framework.Audio.AudioCategory
      description: AudioCategory to compare with this instance.
    return:
      type: System.Boolean
      description: true if the objects are equal or false if they aren&apos;t
    content.vb: Public Function Equals(other As AudioCategory) As Boolean
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.Equals*
  implements:
  - System.IEquatable{Microsoft.Xna.Framework.Audio.AudioCategory}.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Equals(System.Object)
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: AudioCategory.Equals(Object)
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Equals(System.Object)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Equals
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 179
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nDetermines whether two AudioCategory instances are equal.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object to compare with this instance.
    return:
      type: System.Boolean
      description: true if the objects are equal or false if they aren&apos;t.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode
  id: GetHashCode
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: AudioCategory.GetHashCode()
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetHashCode
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 194
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nGets the hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code for this object.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.ToString
  commentId: M:Microsoft.Xna.Framework.Audio.AudioCategory.ToString
  id: ToString
  parent: Microsoft.Xna.Framework.Audio.AudioCategory
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AudioCategory.ToString()
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.ToString()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/Xact/AudioCategory.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: ToString
    path: ../MonoGame.Framework/Audio/Xact/AudioCategory.cs
    startLine: 203
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the name of this AudioCategory\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: Friendly name of the AudioCategory
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Microsoft.Xna.Framework.Audio.AudioCategory.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.IEquatable{Microsoft.Xna.Framework.Audio.AudioCategory}
  commentId: T:System.IEquatable{Microsoft.Xna.Framework.Audio.AudioCategory}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<AudioCategory>
  nameWithType: IEquatable<AudioCategory>
  fullName: System.IEquatable<Microsoft.Xna.Framework.Audio.AudioCategory>
  nameWithType.vb: IEquatable(Of AudioCategory)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Audio.AudioCategory)
  name.vb: IEquatable(Of AudioCategory)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Audio.AudioCategory
    name: AudioCategory
    nameWithType: AudioCategory
    fullName: Microsoft.Xna.Framework.Audio.AudioCategory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Audio.AudioCategory
    name: AudioCategory
    nameWithType: AudioCategory
    fullName: Microsoft.Xna.Framework.Audio.AudioCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Name*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.Name
  isExternal: false
  name: Name
  nameWithType: AudioCategory.Name
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Pause*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.Pause
  isExternal: false
  name: Pause
  nameWithType: AudioCategory.Pause
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Pause
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Resume*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.Resume
  isExternal: false
  name: Resume
  nameWithType: AudioCategory.Resume
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Resume
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Stop*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.Stop
  isExternal: false
  name: Stop
  nameWithType: AudioCategory.Stop
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Stop
- uid: Microsoft.Xna.Framework.Audio.AudioStopOptions
  commentId: T:Microsoft.Xna.Framework.Audio.AudioStopOptions
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioStopOptions
  nameWithType: AudioStopOptions
  fullName: Microsoft.Xna.Framework.Audio.AudioStopOptions
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume
  isExternal: false
  name: SetVolume
  nameWithType: AudioCategory.SetVolume
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality
  isExternal: false
  name: Equality
  nameWithType: AudioCategory.Equality
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Equality
- uid: Microsoft.Xna.Framework.Audio.AudioCategory
  commentId: T:Microsoft.Xna.Framework.Audio.AudioCategory
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioCategory
  nameWithType: AudioCategory
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: AudioCategory.Inequality
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Inequality
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.Equals*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.Equals
  isExternal: false
  name: Equals
  nameWithType: AudioCategory.Equals
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.Equals
- uid: System.IEquatable{Microsoft.Xna.Framework.Audio.AudioCategory}.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  commentId: M:System.IEquatable{Microsoft.Xna.Framework.Audio.AudioCategory}.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  parent: System.IEquatable{Microsoft.Xna.Framework.Audio.AudioCategory}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(AudioCategory)
  nameWithType: IEquatable<AudioCategory>.Equals(AudioCategory)
  fullName: System.IEquatable<Microsoft.Xna.Framework.Audio.AudioCategory>.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  nameWithType.vb: IEquatable(Of AudioCategory).Equals(AudioCategory)
  fullName.vb: System.IEquatable(Of Microsoft.Xna.Framework.Audio.AudioCategory).Equals(Microsoft.Xna.Framework.Audio.AudioCategory)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<AudioCategory>.Equals
    fullName: System.IEquatable<Microsoft.Xna.Framework.Audio.AudioCategory>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Audio.AudioCategory
    name: AudioCategory
    nameWithType: AudioCategory
    fullName: Microsoft.Xna.Framework.Audio.AudioCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of AudioCategory).Equals
    fullName: System.IEquatable(Of Microsoft.Xna.Framework.Audio.AudioCategory).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Audio.AudioCategory
    name: AudioCategory
    nameWithType: AudioCategory
    fullName: Microsoft.Xna.Framework.Audio.AudioCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: AudioCategory.GetHashCode
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.AudioCategory.ToString*
  commentId: Overload:Microsoft.Xna.Framework.Audio.AudioCategory.ToString
  isExternal: false
  name: ToString
  nameWithType: AudioCategory.ToString
  fullName: Microsoft.Xna.Framework.Audio.AudioCategory.ToString
