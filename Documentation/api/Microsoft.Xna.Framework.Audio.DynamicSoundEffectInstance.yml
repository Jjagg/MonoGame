### YamlMime:ManagedReference
items:
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  commentId: T:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  id: DynamicSoundEffectInstance
  parent: Microsoft.Xna.Framework.Audio
  children:
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor(System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.BufferNeeded
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose(System.Boolean)
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration(System.Int32)
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes(System.TimeSpan)
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop(System.Boolean)
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])
  - Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: DynamicSoundEffectInstance
  nameWithType: DynamicSoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  type: Class
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.OpenAL.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: DynamicSoundEffectInstance
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.OpenAL.cs
    startLine: 10
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nA <xref href=\"Microsoft.Xna.Framework.Audio.SoundEffectInstance\" data-throw-if-not-resolved=\"false\"></xref> for which the audio buffer is provided by the game at run time.\n"
  example: []
  syntax:
    content: 'public sealed class DynamicSoundEffectInstance : SoundEffectInstance, IDisposable'
    content.vb: >-
      Public NotInheritable Class DynamicSoundEffectInstance
          Inherits SoundEffectInstance
          Implements IDisposable
  inheritance:
  - System.Object
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance
  implements:
  - System.IDisposable
  inheritedMembers:
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
  - Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped
  commentId: P:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped
  id: IsLooped
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: IsLooped
  nameWithType: DynamicSoundEffectInstance.IsLooped
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: IsLooped
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 20
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nThis value has no effect on DynamicSoundEffectInstance.\nIt may not be set.\n"
  example: []
  syntax:
    content: public override bool IsLooped { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides Property IsLooped As Boolean
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State
  commentId: P:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State
  id: State
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: State
  nameWithType: DynamicSoundEffectInstance.State
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: State
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 35
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  syntax:
    content: public override SoundState State { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Audio.SoundState
    content.vb: Public Overrides ReadOnly Property State As SoundState
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount
  commentId: P:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount
  id: PendingBufferCount
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: PendingBufferCount
  nameWithType: DynamicSoundEffectInstance.PendingBufferCount
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount
  type: Property
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: PendingBufferCount
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 47
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the number of audio buffers queued for playback.\n"
  example: []
  syntax:
    content: public int PendingBufferCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PendingBufferCount As Integer
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.BufferNeeded
  commentId: E:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.BufferNeeded
  id: BufferNeeded
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: BufferNeeded
  nameWithType: DynamicSoundEffectInstance.BufferNeeded
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.BufferNeeded
  type: Event
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: BufferNeeded
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 62
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nThe event that occurs when the number of queued audio buffers is less than or equal to 2.\n"
  remarks: "\nThis event may occur when <xref href=\"Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play\" data-throw-if-not-resolved=\"false\"></xref> is called or during playback when a buffer is completed.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> BufferNeeded
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event BufferNeeded As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor(System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor(System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)
  id: '#ctor(System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)'
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: DynamicSoundEffectInstance(Int32, AudioChannels)
  nameWithType: DynamicSoundEffectInstance.DynamicSoundEffectInstance(Int32, AudioChannels)
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.DynamicSoundEffectInstance(System.Int32, Microsoft.Xna.Framework.Audio.AudioChannels)
  type: Constructor
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: .ctor
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 76
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  example: []
  syntax:
    content: public DynamicSoundEffectInstance(int sampleRate, AudioChannels channels)
    parameters:
    - id: sampleRate
      type: System.Int32
      description: Sample rate, in Hertz (Hz).
    - id: channels
      type: Microsoft.Xna.Framework.Audio.AudioChannels
      description: Number of channels (mono or stereo).
    content.vb: Public Sub New(sampleRate As Integer, channels As AudioChannels)
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration(System.Int32)
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration(System.Int32)
  id: GetSampleDuration(System.Int32)
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: GetSampleDuration(Int32)
  nameWithType: DynamicSoundEffectInstance.GetSampleDuration(Int32)
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration(System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetSampleDuration
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 103
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the duration of an audio buffer of the specified size, based on the settings of this instance.\n"
  example: []
  syntax:
    content: public TimeSpan GetSampleDuration(int sizeInBytes)
    parameters:
    - id: sizeInBytes
      type: System.Int32
      description: Size of the buffer, in bytes.
    return:
      type: System.TimeSpan
      description: The playback length of the buffer.
    content.vb: Public Function GetSampleDuration(sizeInBytes As Integer) As TimeSpan
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes(System.TimeSpan)
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes(System.TimeSpan)
  id: GetSampleSizeInBytes(System.TimeSpan)
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: GetSampleSizeInBytes(TimeSpan)
  nameWithType: DynamicSoundEffectInstance.GetSampleSizeInBytes(TimeSpan)
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes(System.TimeSpan)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: GetSampleSizeInBytes
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 114
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nReturns the size, in bytes, of a buffer of the specified duration, based on the settings of this instance.\n"
  example: []
  syntax:
    content: public int GetSampleSizeInBytes(TimeSpan duration)
    parameters:
    - id: duration
      type: System.TimeSpan
      description: The playback length of the buffer.
    return:
      type: System.Int32
      description: The data size of the buffer, in bytes.
    content.vb: Public Function GetSampleSizeInBytes(duration As TimeSpan) As Integer
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play
  id: Play
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: Play()
  nameWithType: DynamicSoundEffectInstance.Play()
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Play
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 123
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nPlays or resumes the DynamicSoundEffectInstance.\n"
  example: []
  syntax:
    content: public override void Play()
    content.vb: Public Overrides Sub Play
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause
  id: Pause
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: DynamicSoundEffectInstance.Pause()
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Pause
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 148
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nPauses playback of the DynamicSoundEffectInstance.\n"
  example: []
  syntax:
    content: public override void Pause()
    content.vb: Public Overrides Sub Pause
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume
  id: Resume
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: Resume()
  nameWithType: DynamicSoundEffectInstance.Resume()
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Resume
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 158
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nResumes playback of the DynamicSoundEffectInstance.\n"
  example: []
  syntax:
    content: public override void Resume()
    content.vb: Public Overrides Sub Resume
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop
  id: Stop
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: DynamicSoundEffectInstance.Stop()
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop()
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Stop
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 182
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nImmediately stops playing the DynamicSoundEffectInstance.\n"
  remarks: "\nCalling this also releases all queued buffers.\n"
  example: []
  syntax:
    content: public override void Stop()
    content.vb: Public Overrides Sub Stop
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop(System.Boolean)
  id: Stop(System.Boolean)
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: Stop(Boolean)
  nameWithType: DynamicSoundEffectInstance.Stop(Boolean)
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop(System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Stop
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 195
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nStops playing the DynamicSoundEffectInstance.\nIf the <code data-dev-comment-type=\"paramref\" class=\"paramref\">immediate</code> parameter is false, this call has no effect.\n"
  remarks: "\nCalling this also releases all queued buffers.\n"
  example: []
  syntax:
    content: public override void Stop(bool immediate)
    parameters:
    - id: immediate
      type: System.Boolean
      description: When set to false, this call has no effect.
    content.vb: Public Overrides Sub Stop(immediate As Boolean)
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])
  id: SubmitBuffer(System.Byte[])
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: SubmitBuffer(Byte[])
  nameWithType: DynamicSoundEffectInstance.SubmitBuffer(Byte[])
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SubmitBuffer
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 217
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nQueues an audio buffer for playback.\n"
  remarks: "\nThe buffer length must conform to alignment requirements for the audio format.\n"
  example: []
  syntax:
    content: public void SubmitBuffer(byte[] buffer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer containing PCM audio data.
    content.vb: Public Sub SubmitBuffer(buffer As Byte())
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer*
  nameWithType.vb: DynamicSoundEffectInstance.SubmitBuffer(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte())
  name.vb: SubmitBuffer(Byte())
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[],System.Int32,System.Int32)
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[],System.Int32,System.Int32)
  id: SubmitBuffer(System.Byte[],System.Int32,System.Int32)
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: SubmitBuffer(Byte[], Int32, Int32)
  nameWithType: DynamicSoundEffectInstance.SubmitBuffer(Byte[], Int32, Int32)
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: SubmitBuffer
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 242
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  summary: "\nQueues an audio buffer for playback.\n"
  remarks: "\nThe buffer length must conform to alignment requirements for the audio format.\n"
  example: []
  syntax:
    content: public void SubmitBuffer(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer containing PCM audio data.
    - id: offset
      type: System.Int32
      description: The starting position of audio data.
    - id: count
      type: System.Int32
      description: The amount of bytes to use.
    content.vb: Public Sub SubmitBuffer(buffer As Byte(), offset As Integer, count As Integer)
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer*
  nameWithType.vb: DynamicSoundEffectInstance.SubmitBuffer(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte(), System.Int32, System.Int32)
  name.vb: SubmitBuffer(Byte(), Int32, Int32)
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: DynamicSoundEffectInstance.Dispose(Boolean)
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
      branch: docfx
      repo: https://github.com/Jjagg/MonoGame
    id: Dispose
    path: ../MonoGame.Framework/Audio/DynamicSoundEffectInstance.cs
    startLine: 273
  assemblies:
  - MonoGame.Framework
  namespace: Microsoft.Xna.Framework.Audio
  syntax:
    content: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
  overridden: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  overload: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffectInstance
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: SoundEffectInstance
  nameWithType: SoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: false
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Pan
  nameWithType: SoundEffectInstance.Pan
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Pitch
  nameWithType: SoundEffectInstance.Pitch
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Volume
  nameWithType: SoundEffectInstance.Volume
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: IsDisposed
  nameWithType: SoundEffectInstance.IsDisposed
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Apply3D(AudioListener, AudioEmitter)
  nameWithType: SoundEffectInstance.Apply3D(AudioListener, AudioEmitter)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener, Microsoft.Xna.Framework.Audio.AudioEmitter)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
    name: Apply3D
    nameWithType: SoundEffectInstance.Apply3D
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Audio.AudioListener
    name: AudioListener
    nameWithType: AudioListener
    fullName: Microsoft.Xna.Framework.Audio.AudioListener
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Audio.AudioEmitter
    name: AudioEmitter
    nameWithType: AudioEmitter
    fullName: Microsoft.Xna.Framework.Audio.AudioEmitter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)
    name: Apply3D
    nameWithType: SoundEffectInstance.Apply3D
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Audio.AudioListener
    name: AudioListener
    nameWithType: AudioListener
    fullName: Microsoft.Xna.Framework.Audio.AudioListener
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Audio.AudioEmitter
    name: AudioEmitter
    nameWithType: AudioEmitter
    fullName: Microsoft.Xna.Framework.Audio.AudioEmitter
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Apply3D(AudioListener[], AudioEmitter)
  nameWithType: SoundEffectInstance.Apply3D(AudioListener[], AudioEmitter)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[], Microsoft.Xna.Framework.Audio.AudioEmitter)
  nameWithType.vb: SoundEffectInstance.Apply3D(AudioListener(), AudioEmitter)
  fullName.vb: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener(), Microsoft.Xna.Framework.Audio.AudioEmitter)
  name.vb: Apply3D(AudioListener(), AudioEmitter)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
    name: Apply3D
    nameWithType: SoundEffectInstance.Apply3D
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Audio.AudioListener
    name: AudioListener
    nameWithType: AudioListener
    fullName: Microsoft.Xna.Framework.Audio.AudioListener
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Audio.AudioEmitter
    name: AudioEmitter
    nameWithType: AudioEmitter
    fullName: Microsoft.Xna.Framework.Audio.AudioEmitter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)
    name: Apply3D
    nameWithType: SoundEffectInstance.Apply3D
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Audio.AudioListener
    name: AudioListener
    nameWithType: AudioListener
    fullName: Microsoft.Xna.Framework.Audio.AudioListener
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Audio.AudioEmitter
    name: AudioEmitter
    nameWithType: AudioEmitter
    fullName: Microsoft.Xna.Framework.Audio.AudioEmitter
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Dispose()
  nameWithType: SoundEffectInstance.Dispose()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
    name: Dispose
    nameWithType: SoundEffectInstance.Dispose
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
    name: Dispose
    nameWithType: SoundEffectInstance.Dispose
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: IsLooped
  nameWithType: SoundEffectInstance.IsLooped
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped
  isExternal: false
  name: IsLooped
  nameWithType: DynamicSoundEffectInstance.IsLooped
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  commentId: P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: State
  nameWithType: SoundEffectInstance.State
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.State
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State
  isExternal: false
  name: State
  nameWithType: DynamicSoundEffectInstance.State
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.State
- uid: Microsoft.Xna.Framework.Audio.SoundState
  commentId: T:Microsoft.Xna.Framework.Audio.SoundState
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: SoundState
  nameWithType: SoundState
  fullName: Microsoft.Xna.Framework.Audio.SoundState
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount
  isExternal: false
  name: PendingBufferCount
  nameWithType: DynamicSoundEffectInstance.PendingBufferCount
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play
  commentId: M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor
  isExternal: false
  name: DynamicSoundEffectInstance
  nameWithType: DynamicSoundEffectInstance.DynamicSoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.DynamicSoundEffectInstance
- uid: Microsoft.Xna.Framework.Audio.AudioChannels
  commentId: T:Microsoft.Xna.Framework.Audio.AudioChannels
  parent: Microsoft.Xna.Framework.Audio
  isExternal: false
  name: AudioChannels
  nameWithType: AudioChannels
  fullName: Microsoft.Xna.Framework.Audio.AudioChannels
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration
  isExternal: false
  name: GetSampleDuration
  nameWithType: DynamicSoundEffectInstance.GetSampleDuration
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes
  isExternal: false
  name: GetSampleSizeInBytes
  nameWithType: DynamicSoundEffectInstance.GetSampleSizeInBytes
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Play()
  nameWithType: SoundEffectInstance.Play()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
    name: Play
    nameWithType: SoundEffectInstance.Play
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
    name: Play
    nameWithType: SoundEffectInstance.Play
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play
  isExternal: false
  name: Play
  nameWithType: DynamicSoundEffectInstance.Play
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Pause()
  nameWithType: SoundEffectInstance.Pause()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
    name: Pause
    nameWithType: SoundEffectInstance.Pause
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
    name: Pause
    nameWithType: SoundEffectInstance.Pause
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause
  isExternal: false
  name: Pause
  nameWithType: DynamicSoundEffectInstance.Pause
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Resume()
  nameWithType: SoundEffectInstance.Resume()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
    name: Resume
    nameWithType: SoundEffectInstance.Resume
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
    name: Resume
    nameWithType: SoundEffectInstance.Resume
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume
  isExternal: false
  name: Resume
  nameWithType: DynamicSoundEffectInstance.Resume
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: false
  name: Stop()
  nameWithType: SoundEffectInstance.Stop()
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
    name: Stop
    nameWithType: SoundEffectInstance.Stop
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
    name: Stop
    nameWithType: SoundEffectInstance.Stop
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop
  isExternal: false
  name: Stop
  nameWithType: DynamicSoundEffectInstance.Stop
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: true
  name: Stop(Boolean)
  nameWithType: SoundEffectInstance.Stop(Boolean)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
    name: Stop
    nameWithType: SoundEffectInstance.Stop
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)
    name: Stop
    nameWithType: SoundEffectInstance.Stop
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer
  isExternal: false
  name: SubmitBuffer
  nameWithType: DynamicSoundEffectInstance.SubmitBuffer
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: SoundEffectInstance.Dispose(Boolean)
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SoundEffectInstance.Dispose
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SoundEffectInstance.Dispose
    fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose*
  commentId: Overload:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose
  isExternal: false
  name: Dispose
  nameWithType: DynamicSoundEffectInstance.Dispose
  fullName: Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Dispose
